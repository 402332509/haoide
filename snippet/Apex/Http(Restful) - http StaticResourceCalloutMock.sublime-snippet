<snippet>
    <content><![CDATA[
/*
 * Name                 : ${1:MockHttpResponseGenerator}
 * Object               : 
 * Requirement          : 
 * Refer classes        : 
 * Author               : Mouse Liu
 * Create Date          : 
 * Modify History       : 
 *
 */
@isTest
private class ${1:MockHttpResponseGenerator} {
    @isTest static void $2() {
        // Use StaticResourceCalloutMock built-in class to
        // specify fake response and include response body 
        // in a static resource.
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        mock.setStaticResource('mockResponse');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json');
        
        // Set the mock callout mode
        Test.setMock(HttpCalloutMock.class, mock);
        
        // Call the method that performs the callout
        HTTPResponse res = CalloutStaticClass.getInfoFromExternalService(
            'http://api.salesforce.com/foo/bar');
        
        // Verify response received contains values returned by
        // the mock response.
        // This is the content of the static resource.
        System.assertEquals('{"hah":"fooled you"}', res.getBody());
        System.assertEquals(200,res.getStatusCode());
        System.assertEquals('application/json', res.getHeader('Content-Type'));   
    }
}
]]></content>
    <tabTrigger>http StaticResourceCalloutMock</tabTrigger>
    <scope>source.apex</scope>
    <description>You can test HTTP callouts by specifying the body of the response you’d like to receive in a static resource and using one of two built-in classes—StaticResourceCalloutMock or MultiStaticResourceCalloutMock.
        <a>http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_classes_restful_http_testing.htm</a>
    </description>
</snippet>