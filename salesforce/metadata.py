apex_completions = {
    "ChatterGroup" : {
        "[P]owner" : "owner$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]isAutoArchiveDisabled" : "isAutoArchiveDisabled$0",
        "[P]photo" : "photo$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]emailToChatterAddress" : "emailToChatterAddress$0",
        "[P]community" : "community$0",
        "[P]canHaveChatterGuests" : "canHaveChatterGuests$0",
        "[P]description" : "description$0",
        "[P]myRole" : "myRole$0",
        "[P]lastFeedItemPostDate" : "lastFeedItemPostDate$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]visibility" : "visibility$0",
        "[P]isArchived" : "isArchived$0",
        "[P]memberCount" : "memberCount$0"
    },
    "Blob" : {
        "[M]toPdf(String o)\tBlob" : "toPdf($0)",
        "[M]toString()\tString" : "toString()$0",
        "[M]size()\tInteger" : "size()$0",
        "[M]valueOf(String o)\tBlob" : "valueOf($0)"
    },
    "UpsertResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]isCreated()\tBoolean" : "isCreated()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "LiveChatRoutingRoute" : {
        "[M]getChatKey()\tString" : "getChatKey()$0",
        "[M]getUserId()\tString" : "getUserId()$0"
    },
    "MessageSegmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "CaseComment" : {
        "[P]createdBy" : "createdBy$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]text" : "text$0",
        "[P]actorType" : "actorType$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]createdDate" : "createdDate$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]published" : "published$0",
        "[P]id" : "id$0",
        "[P]eventType" : "eventType$0"
    },
    "EmailToCaseHandler" : {},
    "TopicSort" : {
        "[M]values()\tLIST<ConnectApi.TopicSort>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]PopularDesc" : "PopularDesc$0",
        "[P]AlphaAsc" : "AlphaAsc$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "RecordSnapshotAttachment" : {
        "[P]recordView" : "recordView$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "EmptyRecycleBinResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "RecordTypeInfo" : {
        "[M]getName()\tString" : "getName()$0",
        "[M]isAvailable()\tBoolean" : "isAvailable()$0",
        "[M]isDefaultRecordTypeMapping()\tBoolean" : "isDefaultRecordTypeMapping()$0",
        "[M]getRecordTypeId()\tId" : "getRecordTypeId()$0"
    },
    "Organization" : {
        "[M]getSettings()\tConnectApi.OrganizationSettings" : "getSettings()$0"
    },
    "Cookie" : {
        "[M]getName()\tString" : "getName()$0",
        "[M]getPath()\tString" : "getPath()$0",
        "[M]getValue()\tString" : "getValue()$0",
        "[M]isSecure()\tBoolean" : "isSecure()$0",
        "[M]getDomain()\tString" : "getDomain()$0",
        "[M]getMaxAge()\tInteger" : "getMaxAge()$0"
    },
    "BlankRecordField" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "SendEmailResult" : {
        "[M]getErrors()\tLIST<Messaging.SendEmailError>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "Http" : {
        "[M]send(ANY request)\tSystem.HttpResponse" : "send($0)",
        "[M]toString()\tString" : "toString()$0"
    },
    "UnexpectedException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "LinkAttachment" : {
        "[P]url" : "url$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]title" : "title$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "AppExchange" : {
        "[M]movedPermanently(String location)\tvoid" : "movedPermanently($0)",
        "[M]calculateListingPopularity(String testUserName, String testCronString)\tvoid" : "calculateListingPopularity($0)",
        "[M]setDefaultLicenseTerms(String pkgVersionId, String orgId, String defaultLicenseStatus, Integer defaultLicenseLength, Integer defaultLicenseSeats)\tvoid" : "setDefaultLicenseTerms($0)",
        "[M]setLicenseManagementOrganization(String pkgVersionId, String orgId, String username, String password)\tString" : "setLicenseManagementOrganization($0)",
        "[M]debug(String message)\tvoid" : "debug($0)",
        "[M]getPortalId()\tString" : "getPortalId()$0",
        "[M]validateLMAInstalled(String username, String password)\tString" : "validateLMAInstalled($0)",
        "[M]getPortalAdminId()\tString" : "getPortalAdminId()$0",
        "[M]createPortalUser(SObject user, String accountId)\tId" : "createPortalUser($0)",
        "[M]isGuestUser()\tBoolean" : "isGuestUser()$0",
        "[M]getTrialTemplates(String callerOrgId, String lmPkgId, String username)\tLIST<TrialTemplate>" : "getTrialTemplates($0)",
        "[M]to18(String id)\tString" : "to18($0)",
        "[M]updateSingleAsAdmin(SObject sobj)\tDatabase.SaveResult" : "updateSingleAsAdmin($0)",
        "[M]getConfig(String section, String key)\tString" : "getConfig($0)",
        "[M]validateOrgUser(String username, String password)\tString" : "validateOrgUser($0)",
        "[M]stopListingPopularityJob()\tvoid" : "stopListingPopularityJob()$0",
        "[M]getSiteId()\tString" : "getSiteId()$0",
        "[M]isDuplicateUserName(String username)\tBoolean" : "isDuplicateUserName($0)",
        "[M]createOrg(String firstName, String lastName, String companyName, String email, String language, String adminUserName, String packageId, String evalUserName, Boolean isExtension)\tString" : "createOrg($0)",
        "[M]getAuthenticatingUrl(String page)\tString" : "getAuthenticatingUrl($0)",
        "[M]createSession(String appExchangeOrgId, String portalId, String siteId, String portalUserId)\tString" : "createSession($0)",
        "[M]getPackageManifest(String pkgVersionId)\tString" : "getPackageManifest($0)",
        "[M]getInstalledPackageVersions(String orgId)\tLIST<String>" : "getInstalledPackageVersions($0)",
        "[M]to15(String id)\tString" : "to15($0)",
        "[M]registerPackageVersion(String pkgVersionId)\tBoolean" : "registerPackageVersion($0)",
        "[M]setCookie(String name, String value)\tvoid" : "setCookie($0)",
        "[M]getCookie(String name)\tString" : "getCookie($0)",
        "[M]setCookie(String name, String value, String cookieDomainName, Integer cookieAge)\tvoid" : "setCookie($0)",
        "[M]getOrgName(String orgId)\tString" : "getOrgName($0)",
        "[M]provisionPackageLicense(String orgId, String allPackageId, Integer numLicenses, Date expirationDate, String status)\tString" : "provisionPackageLicense($0)",
        "[M]setHttpResponseStatus(Integer statusCode)\tvoid" : "setHttpResponseStatus($0)",
        "[M]getCrossInstanceEncryptedHash(Double appVersion, String value)\tString" : "getCrossInstanceEncryptedHash($0)"
    },
    "ReportTypeMetadata" : {
        "[M]setCategories(LIST<reports.ReportTypeColumnCategory> categories)\tvoid" : "setCategories($0)",
        "[M]getCategories()\tLIST<reports.ReportTypeColumnCategory>" : "getCategories()$0"
    },
    "MentionSegmentInput" : {
        "[P]id" : "id$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ChatterGroupPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]groups" : "groups$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "ContentAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]contentDocumentId" : "contentDocumentId$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Actor" : {
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "FollowingCounts" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]people" : "people$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]records" : "records$0"
    },
    "StringException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ResourceLinkSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]url" : "url$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "XmlStreamWriter" : {
        "[M]writeNamespace(String prefix, String namesapceURI)\tvoid" : "writeNamespace($0)",
        "[M]writeCData(String data)\tvoid" : "writeCData($0)",
        "[M]setDefaultNamespace(String uri)\tvoid" : "setDefaultNamespace($0)",
        "[M]writeAttribute(String prefix, String namespaceURI, String localName, String value)\tvoid" : "writeAttribute($0)",
        "[M]writeComment(String data)\tvoid" : "writeComment($0)",
        "[M]writeDefaultNamespace(String namesapceURI)\tvoid" : "writeDefaultNamespace($0)",
        "[M]writeStartElement(String prefix, String localName, String namesapceURI)\tvoid" : "writeStartElement($0)",
        "[M]writeEndElement()\tvoid" : "writeEndElement()$0",
        "[M]close()\tvoid" : "close()$0",
        "[M]writeEndDocument()\tvoid" : "writeEndDocument()$0",
        "[M]writeProcessingInstruction(String target, String data)\tvoid" : "writeProcessingInstruction($0)",
        "[M]getXmlString()\tString" : "getXmlString()$0",
        "[M]writeStartDocument(String encoding, String version)\tvoid" : "writeStartDocument($0)",
        "[M]writeCharacters(String text)\tvoid" : "writeCharacters($0)",
        "[M]writeEmptyElement(String prefix, String localName, String namesapceURI)\tvoid" : "writeEmptyElement($0)"
    },
    "UserDetail" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]chatterInfluence" : "chatterInfluence$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]followersCount" : "followersCount$0",
        "[P]followingCounts" : "followingCounts$0",
        "[P]chatterActivity" : "chatterActivity$0",
        "[P]groupCount" : "groupCount$0",
        "[P]isActive" : "isActive$0",
        "[P]aboutMe" : "aboutMe$0",
        "[P]thanksReceived" : "thanksReceived$0",
        "[P]managerName" : "managerName$0",
        "[P]address" : "address$0",
        "[P]username" : "username$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]managerId" : "managerId$0",
        "[P]email" : "email$0",
        "[P]phoneNumbers" : "phoneNumbers$0"
    },
    "TouchHandledException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "DescribeTabSetResult" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getTabs()\tLIST<Schema.DescribeTabResult>" : "getTabs()$0",
        "[M]isSelected()\tBoolean" : "isSelected()$0",
        "[M]getLogoUrl()\tString" : "getLogoUrl()$0",
        "[M]getNamespace()\tString" : "getNamespace()$0"
    },
    "MathException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "AbstractMessageBody" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]messageSegments" : "messageSegments$0",
        "[P]text" : "text$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "TextSegmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]text" : "text$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "FollowingPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]previousPageUrl" : "previousPageUrl$0",
        "[P]following" : "following$0"
    },
    "TypeException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "CommentPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[P]total" : "total$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]comments" : "comments$0",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]currentPageToken" : "currentPageToken$0"
    },
    "TrackedChangeAttachment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]changes" : "changes$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "MobilePushNotification" : {
        "[M]setPayload(MAP<String,ANY> payload)\tvoid" : "setPayload($0)",
        "[M]setTtl(Integer ttl)\tvoid" : "setTtl($0)",
        "[M]send(String application, SET<String> users)\tvoid" : "send($0)"
    },
    "HttpCalloutMock" : {
        "[M]respond(System.HttpRequest param1)\tSystem.HttpResponse" : "respond($0)"
    },
    "RestContext" : {
        "[P]response" : "response$0",
        "[P]request" : "request$0"
    },
    "DataCategory" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getChildCategories()\tLIST<Schema.DataCategory>" : "getChildCategories()$0",
        "[M]getName()\tString" : "getName()$0"
    },
    "EncodingUtil" : {
        "[M]base64Encode(Blob s)\tString" : "base64Encode($0)",
        "[M]base64Decode(String s)\tBlob" : "base64Decode($0)",
        "[M]urlEncode(String s, String enc)\tString" : "urlEncode($0)",
        "[M]convertToHex(Blob s)\tString" : "convertToHex($0)",
        "[M]urlDecode(String s, String enc)\tString" : "urlDecode($0)"
    },
    "GroupMember" : {
        "[P]user" : "user$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[P]role" : "role$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]url" : "url$0"
    },
    "ConnectApiException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0",
        "[M]getErrorCode()\tString" : "getErrorCode()$0"
    },
    "JSONToken" : {
        "[P]VALUE_NUMBER_FLOAT" : "VALUE_NUMBER_FLOAT$0",
        "[P]END_ARRAY" : "END_ARRAY$0",
        "[P]NOT_AVAILABLE" : "NOT_AVAILABLE$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]VALUE_EMBEDDED_OBJECT" : "VALUE_EMBEDDED_OBJECT$0",
        "[P]START_ARRAY" : "START_ARRAY$0",
        "[P]START_OBJECT" : "START_OBJECT$0",
        "[P]VALUE_NUMBER_INT" : "VALUE_NUMBER_INT$0",
        "[P]VALUE_STRING" : "VALUE_STRING$0",
        "[P]VALUE_FALSE" : "VALUE_FALSE$0",
        "[P]FIELD_NAME" : "FIELD_NAME$0",
        "[P]VALUE_None" : "VALUE_None$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]END_OBJECT" : "END_OBJECT$0",
        "[P]VALUE_TRUE" : "VALUE_TRUE$0",
        "[M]values()\tLIST<system.JSONToken>" : "values()$0"
    },
    "SelectOption" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]setDisabled(Boolean disabled)\tvoid" : "setDisabled($0)",
        "[M]setEscapeItem(Boolean disabled)\tvoid" : "setEscapeItem($0)",
        "[M]getEscapeItem()\tBoolean" : "getEscapeItem()$0",
        "[M]setValue(String value)\tvoid" : "setValue($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]getDisabled()\tBoolean" : "getDisabled()$0",
        "[M]getValue()\tString" : "getValue()$0"
    },
    "UserChatterSettings" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]defaultGroupEmailFrequency" : "defaultGroupEmailFrequency$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Decimal" : {
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]scale()\tInteger" : "scale()$0",
        "[M]divide(Decimal divisor, Integer scale, APEX_OBJECT roundingMode)\tDecimal" : "divide($0)",
        "[M]round()\tLong" : "round()$0",
        "[M]longValue()\tLong" : "longValue()$0",
        "[M]doubleValue()\tDouble" : "doubleValue()$0",
        "[M]valueOf(Double dbl)\tDecimal" : "valueOf($0)",
        "[M]abs()\tDecimal" : "abs()$0",
        "[M]toPlainString()\tString" : "toPlainString()$0",
        "[M]format()\tString" : "format()$0",
        "[M]stripTrailingZeros()\tDecimal" : "stripTrailingZeros()$0",
        "[M]pow(Integer exponent)\tDecimal" : "pow($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]setScale(Integer scale, system.RoundingMode roundingMode)\tDecimal" : "setScale($0)",
        "[M]valueOf(String str)\tDecimal" : "valueOf($0)",
        "[M]round(system.RoundingMode roundingMode)\tLong" : "round($0)",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]precision()\tInteger" : "precision()$0",
        "[M]setScale(Integer scale)\tDecimal" : "setScale($0)",
        "[M]valueOf(Long lng)\tDecimal" : "valueOf($0)",
        "[M]intValue()\tInteger" : "intValue()$0",
        "[M]divide(Decimal divisor, Integer scale)\tDecimal" : "divide($0)"
    },
    "ClientInfo" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]applicationName" : "applicationName$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]applicationUrl" : "applicationUrl$0"
    },
    "Motif" : {
        "[P]smallIconUrl" : "smallIconUrl$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]mediumIconUrl" : "mediumIconUrl$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]largeIconUrl" : "largeIconUrl$0",
        "[P]color" : "color$0"
    },
    "GroupInformation" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]text" : "text$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]title" : "title$0"
    },
    "TextSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "DeletedRecord" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getDeletedDate()\tDate" : "getDeletedDate()$0"
    },
    "PluginDescribeResult" : {
        "[P]inputParameters" : "inputParameters$0",
        "[P]tag" : "tag$0",
        "[P]description" : "description$0",
        "[P]name" : "name$0",
        "[P]outputParameters" : "outputParameters$0"
    },
    "FeedItemInput" : {
        "[P]originalFeedItemId" : "originalFeedItemId$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]visibility" : "visibility$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]attachment" : "attachment$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]isBookmarkedByCurrentUser" : "isBookmarkedByCurrentUser$0",
        "[P]body" : "body$0"
    },
    "UserProfile" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]capabilities" : "capabilities$0",
        "[P]tabs" : "tabs$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]userDetail" : "userDetail$0",
        "[P]url" : "url$0"
    },
    "Url" : {
        "[M]getSalesforceBaseUrl()\tsystem.Url" : "getSalesforceBaseUrl()$0",
        "[M]getUserInfo()\tString" : "getUserInfo()$0",
        "[M]getPort()\tInteger" : "getPort()$0",
        "[M]toExternalForm()\tString" : "toExternalForm()$0",
        "[M]getHost()\tString" : "getHost()$0",
        "[M]getQuery()\tString" : "getQuery()$0",
        "[M]sameFile(system.Url other)\tBoolean" : "sameFile($0)",
        "[M]getPath()\tString" : "getPath()$0",
        "[M]getFile()\tString" : "getFile()$0",
        "[M]getProtocol()\tString" : "getProtocol()$0",
        "[M]getFileFieldURL(String objectId, String fieldName)\tString" : "getFileFieldURL($0)",
        "[M]getCurrentRequestUrl()\tsystem.Url" : "getCurrentRequestUrl()$0",
        "[M]getAuthority()\tString" : "getAuthority()$0",
        "[M]getDefaultPort()\tInteger" : "getDefaultPort()$0",
        "[M]getRef()\tString" : "getRef()$0"
    },
    "ZoneShowIn" : {
        "[P]Portal" : "Portal$0",
        "[P]Internal" : "Internal$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Community" : "Community$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.ZoneShowIn>" : "values()$0"
    },
    "SetupScope" : {
        "[P]USER" : "USER$0",
        "[M]values()\tLIST<system.SetupScope>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]ORGANIZATION" : "ORGANIZATION$0",
        "[P]PROFILE" : "PROFILE$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "PluginRequest" : {
        "[P]inputParameters" : "inputParameters$0"
    },
    "UserInput" : {
        "[P]aboutMe" : "aboutMe$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "PhoneNumber" : {
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]phoneNumber" : "phoneNumber$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "MessageSegmentType" : {
        "[P]FieldChangeName" : "FieldChangeName$0",
        "[P]Text" : "Text$0",
        "[P]Mention" : "Mention$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]FieldChange" : "FieldChange$0",
        "[P]EntityLink" : "EntityLink$0",
        "[M]values()\tLIST<ConnectApi.MessageSegmentType>" : "values()$0",
        "[P]Link" : "Link$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Hashtag" : "Hashtag$0",
        "[P]ResourceLink" : "ResourceLink$0",
        "[P]MoreChanges" : "MoreChanges$0",
        "[P]FieldChangeValue" : "FieldChangeValue$0"
    },
    "NoSuchElementException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "QueryLocator" : {
        "[M]iterator()\tDatabase.QueryLocatorIterator" : "iterator()$0",
        "[M]getQuery()\tString" : "getQuery()$0"
    },
    "QueryLocatorChunkIterator" : {
        "[M]hasNext()\tBoolean" : "hasNext()$0",
        "[M]next()\tLIST<SObject>" : "next()$0"
    },
    "ChatterUsers" : {
        "[M]searchUsers(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "searchUsers($0)",
        "[M]getGroups(String communityId, String userId)\tConnectApi.UserGroupPage" : "getGroups($0)",
        "[M]getUsers(String communityId)\tConnectApi.UserPage" : "getUsers($0)",
        "[M]getFollowers(String communityId, String userId)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "[M]updateChatterSettings(String communityId, String userId, ConnectApi.GroupEmailFrequency defaultGroupEmailFrequency)\tConnectApi.UserChatterSettings" : "updateChatterSettings($0)",
        "[M]getPhoto(String communityId, String userId)\tConnectApi.Photo" : "getPhoto($0)",
        "[M]setPhoto(String communityId, String userId, String fileId, Integer versionNumber)\tConnectApi.Photo" : "setPhoto($0)",
        "[M]updateUser(String communityId, String userId, ConnectApi.UserInput userInput)\tConnectApi.UserDetail" : "updateUser($0)",
        "[M]getFollowings(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]setPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhoto($0)",
        "[M]getFollowings(String communityId, String userId, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getFollowings(String communityId, String userId, String filterType, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getUser(String communityId, String userId)\tConnectApi.UserDetail" : "getUser($0)",
        "[M]deletePhoto(String communityId, String userId)\tvoid" : "deletePhoto($0)",
        "[M]getChatterSettings(String communityId, String userId)\tConnectApi.UserChatterSettings" : "getChatterSettings($0)",
        "[M]searchUsers(String communityId, String q)\tConnectApi.UserPage" : "searchUsers($0)",
        "[M]getFollowers(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "[M]getFollowings(String communityId, String userId, String filterType)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "[M]getUsers(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "getUsers($0)",
        "[M]follow(String communityId, String userId, String subjectId)\tConnectApi.Subscription" : "follow($0)",
        "[M]getFollowings(String communityId, String userId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getGroups(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.UserGroupPage" : "getGroups($0)",
        "[M]searchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "searchUsers($0)",
        "[M]setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "[M]getFollowings(String communityId, String userId)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]setTestSearchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)",
        "[M]setTestSearchUsers(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)",
        "[M]setTestSearchUsers(String communityId, String q, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)"
    },
    "GroupMembershipType" : {
        "[P]NotAMember" : "NotAMember$0",
        "[M]values()\tLIST<ConnectApi.GroupMembershipType>" : "values()$0",
        "[P]GroupManager" : "GroupManager$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]GroupOwner" : "GroupOwner$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]StandardMember" : "StandardMember$0",
        "[P]NotAMemberPrivateRequested" : "NotAMemberPrivateRequested$0"
    },
    "InboundEmailHandler" : {
        "[M]handleInboundEmail(Messaging.InboundEmail param1, Messaging.InboundEnvelope param2)\tMessaging.InboundEmailResult" : "handleInboundEmail($0)"
    },
    "JSON" : {
        "[M]serialize(Object o)\tString" : "serialize($0)",
        "[M]deserializeStrict(String jsonString, system.Type apexType)\tObject" : "deserializeStrict($0)",
        "[M]createGenerator(Boolean pretty)\tsystem.JSONGenerator" : "createGenerator($0)",
        "[M]deserialize(String jsonString, system.Type apexType)\tObject" : "deserialize($0)",
        "[M]deserializeUntyped(String jsonString)\tObject" : "deserializeUntyped($0)",
        "[M]createParser(String jsonString)\tsystem.JSONParser" : "createParser($0)",
        "[M]serializePretty(Object o)\tString" : "serializePretty($0)"
    },
    "LabeledRecordField" : {
        "[P]label" : "label$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]text" : "text$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "DateGranularity" : {
        "[P]FISCAL_WEEK" : "FISCAL_WEEK$0",
        "[P]FISCAL_QUARTER" : "FISCAL_QUARTER$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]FISCAL_PERIOD" : "FISCAL_PERIOD$0",
        "[M]values()\tLIST<reports.DateGranularity>" : "values()$0",
        "[P]QUARTER" : "QUARTER$0",
        "[P]WEEK" : "WEEK$0",
        "[P]MONTH_IN_YEAR" : "MONTH_IN_YEAR$0",
        "[P]NONE" : "NONE$0",
        "[P]FISCAL_YEAR" : "FISCAL_YEAR$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]YEAR" : "YEAR$0",
        "[P]MONTH" : "MONTH$0",
        "[P]DAY_IN_MONTH" : "DAY_IN_MONTH$0",
        "[P]DAY" : "DAY$0"
    },
    "HttpResponse" : {
        "[M]setHeader(String key, String value)\tvoid" : "setHeader($0)",
        "[M]getBodyAsBlob()\tBlob" : "getBodyAsBlob()$0",
        "[M]getHeaderKeys()\tLIST<String>" : "getHeaderKeys()$0",
        "[M]setBody(String body)\tvoid" : "setBody($0)",
        "[M]setStatusCode(Integer statusCode)\tvoid" : "setStatusCode($0)",
        "[M]getXmlStreamReader()\tSystem.XmlStreamReader" : "getXmlStreamReader()$0",
        "[M]getHeader(String key)\tString" : "getHeader($0)",
        "[M]setBodyAsBlob(Blob body)\tvoid" : "setBodyAsBlob($0)",
        "[M]getStatusCode()\tInteger" : "getStatusCode()$0",
        "[M]getBodyDocument()\tdom.Document" : "getBodyDocument()$0",
        "[M]getStatus()\tString" : "getStatus()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]setStatus(String status)\tvoid" : "setStatus($0)",
        "[M]getBody()\tString" : "getBody()$0"
    },
    "TrackedChangeItem" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]fieldName" : "fieldName$0",
        "[P]newValue" : "newValue$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]oldValue" : "oldValue$0"
    },
    "SObject" : {
        "[M]putSObject(String field, SObject value)\tSObject" : "putSObject($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]setOptions(APEX_OBJECT options)\tvoid" : "setOptions($0)",
        "[M]clone(Boolean preserveId)\tSObject" : "clone($0)",
        "[M]clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps)\tSObject" : "clone($0)",
        "[M]get(Schema.SObjectField field)\tObject" : "get($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]clear()\tvoid" : "clear()$0",
        "[M]put(Schema.SObjectField field, Object value)\tObject" : "put($0)",
        "[M]putSObject(Schema.SObjectField field, SObject value)\tSObject" : "putSObject($0)",
        "[M]getSObjects(Schema.SObjectField field)\tLIST<SObject>" : "getSObjects($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]getSObject(String field)\tSObject" : "getSObject($0)",
        "[M]getSObject(Schema.SObjectField field)\tSObject" : "getSObject($0)",
        "[M]getSObjects(String field)\tLIST<SObject>" : "getSObjects($0)",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]getOptions()\tDatabase.DMLOptions" : "getOptions()$0",
        "[M]clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tSObject" : "clone($0)",
        "[M]clone()\tSObject" : "clone()$0",
        "[M]get(String field)\tObject" : "get($0)",
        "[M]put(String field, Object value)\tObject" : "put($0)",
        "[M]getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "[M]getQuickActionName()\tString" : "getQuickActionName()$0",
        "[M]clone(Boolean preserveId, Boolean deep)\tSObject" : "clone($0)"
    },
    "Records" : {
        "[M]getMotif(String communityId, String idOrPrefix)\tConnectApi.Motif" : "getMotif($0)"
    },
    "FieldChangeValueType" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]OldValue" : "OldValue$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]NewValue" : "NewValue$0",
        "[M]values()\tLIST<ConnectApi.FieldChangeValueType>" : "values()$0"
    },
    "PublishingService" : {
        "[M]deleteArchivedArticle(String articleId)\tvoid" : "deleteArchivedArticle($0)",
        "[M]submitForTranslation(String articleId, String language, String assigneeId, Datetime dueDate)\tString" : "submitForTranslation($0)",
        "[M]setTranslationToIncomplete(String articleVersionId)\tvoid" : "setTranslationToIncomplete($0)",
        "[M]cancelScheduledPublicationOfArticle(String articleId)\tvoid" : "cancelScheduledPublicationOfArticle($0)",
        "[M]deleteDraftArticle(String articleId)\tvoid" : "deleteDraftArticle($0)",
        "[M]deleteArchivedArticleVersion(String articleId, Integer versionNumber)\tvoid" : "deleteArchivedArticleVersion($0)",
        "[M]editOnlineArticle(String articleId, Boolean unpublish)\tString" : "editOnlineArticle($0)",
        "[M]completeTranslation(String articleVersionId)\tvoid" : "completeTranslation($0)",
        "[M]publishArticle(String articleId, Boolean flagAsNew)\tvoid" : "publishArticle($0)",
        "[M]assignDraftArticleTask(String articleId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid" : "assignDraftArticleTask($0)",
        "[M]archiveOnlineArticle(String articleId, Datetime scheduledDate)\tvoid" : "archiveOnlineArticle($0)",
        "[M]deleteDraftTranslation(String articleVersionId)\tvoid" : "deleteDraftTranslation($0)",
        "[M]restoreOldVersion(String articleId, Integer versionNumber)\tString" : "restoreOldVersion($0)",
        "[M]assignDraftTranslationTask(String translationVersionId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid" : "assignDraftTranslationTask($0)",
        "[M]cancelScheduledArchivingOfArticle(String articleId)\tvoid" : "cancelScheduledArchivingOfArticle($0)",
        "[M]editPublishedTranslation(String articleId, String language, Boolean unpublish)\tString" : "editPublishedTranslation($0)",
        "[M]scheduleForPublication(String articleId, Datetime scheduledDate)\tvoid" : "scheduleForPublication($0)",
        "[M]editArchivedArticle(String articleId)\tString" : "editArchivedArticle($0)"
    },
    "BatchableContext" : {
        "[M]getJobId()\tId" : "getJobId()$0",
        "[M]getChildJobId()\tId" : "getChildJobId()$0"
    },
    "FeedItemAttachmentType" : {
        "[P]Approval" : "Approval$0",
        "[P]Canvas" : "Canvas$0",
        "[P]RecordSnapshot" : "RecordSnapshot$0",
        "[M]values()\tLIST<ConnectApi.FeedItemAttachmentType>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]EmailMessage" : "EmailMessage$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]TrackedChange" : "TrackedChange$0",
        "[P]Content" : "Content$0",
        "[P]BasicTemplate" : "BasicTemplate$0",
        "[P]DashboardComponent" : "DashboardComponent$0",
        "[P]CaseComment" : "CaseComment$0",
        "[P]Link" : "Link$0",
        "[P]Poll" : "Poll$0"
    },
    "BusinessHours" : {
        "[M]add(Id businessHoursId, Datetime startDate, Long interval)\tDatetime" : "add($0)",
        "[M]isWithin(String businessHoursId, Datetime targetDate)\tBoolean" : "isWithin($0)",
        "[M]addGmt(Id businessHoursId, Datetime startDate, Long interval)\tDatetime" : "addGmt($0)",
        "[M]nextStartDate(Id businessHoursId, Datetime targetDate)\tDatetime" : "nextStartDate($0)",
        "[M]diff(String businessHoursId, Datetime startDate, Datetime endDate)\tLong" : "diff($0)"
    },
    "FeedPollChoice" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]voteCount" : "voteCount$0",
        "[P]text" : "text$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[P]position" : "position$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]voteCountRatio" : "voteCountRatio$0"
    },
    "ZoneSearchPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]items" : "items$0"
    },
    "FeedType" : {
        "[P]News" : "News$0",
        "[P]Company" : "Company$0",
        "[P]Moderation" : "Moderation$0",
        "[P]UserProfile" : "UserProfile$0",
        "[M]values()\tLIST<ConnectApi.FeedType>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]To" : "To$0",
        "[P]Groups" : "Groups$0",
        "[P]Topics" : "Topics$0",
        "[P]Bookmarks" : "Bookmarks$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]People" : "People$0",
        "[P]Files" : "Files$0",
        "[P]Record" : "Record$0"
    },
    "Answers" : {
        "[M]setBestReply(String questionId, String bestReplyId)\tvoid" : "setBestReply($0)",
        "[M]findSimilar(SObject question)\tLIST<Id>" : "findSimilar($0)"
    },
    "InboundEmailResult" : {
        "[P]message" : "message$0",
        "[P]success" : "success$0"
    },
    "CommunityStatus" : {
        "[P]Inactive" : "Inactive$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Live" : "Live$0",
        "[M]values()\tLIST<ConnectApi.CommunityStatus>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]UnderConstruction" : "UnderConstruction$0"
    },
    "ReportFactWithSummaries" : {},
    "TopicInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]description" : "description$0"
    },
    "LiveAgentRealTimeSystem" : {
        "[M]routeChatRequests(LIST<LiveAgent.LiveChatRoutingRoute> routes)\tLIST<LiveAgent.LiveChatRoutingResult>" : "routeChatRequests($0)",
        "[M]setButtonStatus(String liveChatButtonId, Boolean online)\tvoid" : "setButtonStatus($0)"
    },
    "IdeaStandardSetController" : {
        "[M]last()\tvoid" : "last()$0",
        "[M]getPageSize()\tInteger" : "getPageSize()$0",
        "[M]addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "[M]getCompleteResult()\tBoolean" : "getCompleteResult()$0",
        "[M]cancel()\tSystem.PageReference" : "cancel()$0",
        "[M]getRecords()\tLIST<SObject>" : "getRecords()$0",
        "[M]getResultSize()\tInteger" : "getResultSize()$0",
        "[M]first()\tvoid" : "first()$0",
        "[M]getFilterId()\tString" : "getFilterId()$0",
        "[M]getIdeaList()\tLIST<Idea>" : "getIdeaList()$0",
        "[M]getSelected()\tLIST<SObject>" : "getSelected()$0",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]getPageNumber()\tInteger" : "getPageNumber()$0",
        "[M]next()\tvoid" : "next()$0",
        "[M]reset()\tvoid" : "reset()$0",
        "[M]setFilterId(String filterId)\tvoid" : "setFilterId($0)",
        "[M]getHasPrevious()\tBoolean" : "getHasPrevious()$0",
        "[M]setSelected(LIST<SObject> selected)\tvoid" : "setSelected($0)",
        "[M]getListViewOptions()\tLIST<System.SelectOption>" : "getListViewOptions()$0",
        "[M]previous()\tvoid" : "previous()$0",
        "[M]save()\tSystem.PageReference" : "save()$0",
        "[M]setPageSize(Integer pageSize)\tvoid" : "setPageSize($0)",
        "[M]setPageNumber(Integer pageNumber)\tvoid" : "setPageNumber($0)",
        "[M]getHasNext()\tBoolean" : "getHasNext()$0"
    },
    "XmlException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "DataCategoryGroupSobjectTypePair" : {
        "[M]setSobject(String param1)\tvoid" : "setSobject($0)",
        "[M]getSobject()\tString" : "getSobject()$0",
        "[M]getDataCategoryGroupName()\tString" : "getDataCategoryGroupName()$0",
        "[M]setDataCategoryGroupName(String param1)\tvoid" : "setDataCategoryGroupName($0)"
    },
    "XmlNodeType" : {
        "[M]values()\tLIST<Dom.XmlNodeType>" : "values()$0",
        "[P]TEXT" : "TEXT$0",
        "[P]COMMENT" : "COMMENT$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]ELEMENT" : "ELEMENT$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ComplexSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]segments" : "segments$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "MentionCompletionPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]mentionCompletions" : "mentionCompletions$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "Stack" : {
        "[M]empty()\tBoolean" : "empty()$0",
        "[M]push(String item)\tvoid" : "push($0)",
        "[M]pop()\tString" : "pop()$0",
        "[M]peek()\tString" : "peek()$0"
    },
    "CurrencyRecordField" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "LiveChatRoutingRequest" : {
        "[M]getChatKey()\tString" : "getChatKey()$0",
        "[M]getLiveChatButtonId()\tString" : "getLiveChatButtonId()$0"
    },
    "AccountCreator" : {
        "[M]createAccount(String param1, String param2, Id param3)\tString" : "createAccount($0)"
    },
    "StandardSetController" : {
        "[M]last()\tvoid" : "last()$0",
        "[M]getPageSize()\tInteger" : "getPageSize()$0",
        "[M]addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "[M]getCompleteResult()\tBoolean" : "getCompleteResult()$0",
        "[M]cancel()\tSystem.PageReference" : "cancel()$0",
        "[M]getRecords()\tLIST<SObject>" : "getRecords()$0",
        "[M]getResultSize()\tInteger" : "getResultSize()$0",
        "[M]first()\tvoid" : "first()$0",
        "[M]getFilterId()\tString" : "getFilterId()$0",
        "[M]setPageSize(Integer pageSize)\tvoid" : "setPageSize($0)",
        "[M]getSelected()\tLIST<SObject>" : "getSelected()$0",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]getPageNumber()\tInteger" : "getPageNumber()$0",
        "[M]next()\tvoid" : "next()$0",
        "[M]reset()\tvoid" : "reset()$0",
        "[M]setFilterId(String filterId)\tvoid" : "setFilterId($0)",
        "[M]getHasPrevious()\tBoolean" : "getHasPrevious()$0",
        "[M]setSelected(LIST<SObject> selected)\tvoid" : "setSelected($0)",
        "[M]getListViewOptions()\tLIST<System.SelectOption>" : "getListViewOptions()$0",
        "[M]previous()\tvoid" : "previous()$0",
        "[M]save()\tSystem.PageReference" : "save()$0",
        "[M]setPageNumber(Integer pageNumber)\tvoid" : "setPageNumber($0)",
        "[M]getHasNext()\tBoolean" : "getHasNext()$0"
    },
    "InvalidParameterValueException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "DMLOptions" : {
        "[P]OptAllOrNone" : "OptAllOrNone$0",
        "[P]AllowFieldTruncation" : "AllowFieldTruncation$0",
        "[P]EmailHeader" : "EmailHeader$0",
        "[P]AssignmentRuleHeader" : "AssignmentRuleHeader$0",
        "[P]LocaleOptions" : "LocaleOptions$0"
    },
    "StatusCode" : {
        "[P]INVALID_READ_ONLY_USER_DML" : "INVALID_READ_ONLY_USER_DML$0",
        "[P]NO_MASS_MAIL_PERMISSION" : "NO_MASS_MAIL_PERMISSION$0",
        "[P]COMMUNITY_NOT_ACCESSIBLE" : "COMMUNITY_NOT_ACCESSIBLE$0",
        "[P]EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR" : "EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR$0",
        "[P]INVALID_INET_ADDRESS" : "INVALID_INET_ADDRESS$0",
        "[P]INVALID_FILTER_ACTION" : "INVALID_FILTER_ACTION$0",
        "[P]FIELD_FILTER_VALIDATION_EXCEPTION" : "FIELD_FILTER_VALIDATION_EXCEPTION$0",
        "[P]INVALID_TYPE_ON_FIELD_IN_RECORD" : "INVALID_TYPE_ON_FIELD_IN_RECORD$0",
        "[P]INVALID_QUERY_LOCATOR" : "INVALID_QUERY_LOCATOR$0",
        "[P]DUPLICATE_MASTER_LABEL" : "DUPLICATE_MASTER_LABEL$0",
        "[P]TOO_MANY_ENUM_VALUE" : "TOO_MANY_ENUM_VALUE$0",
        "[P]TRANSFER_REQUIRES_READ" : "TRANSFER_REQUIRES_READ$0",
        "[P]INVALID_OR_None_FOR_RESTRICTED_PICKLIST" : "INVALID_OR_None_FOR_RESTRICTED_PICKLIST$0",
        "[P]MAXIMUM_CCEMAILS_EXCEEDED" : "MAXIMUM_CCEMAILS_EXCEEDED$0",
        "[P]ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT" : "ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT$0",
        "[P]INVALID_OAUTH_URL" : "INVALID_OAUTH_URL$0",
        "[P]DUPLICATE_SENDER_DISPLAY_NAME" : "DUPLICATE_SENDER_DISPLAY_NAME$0",
        "[P]MAX_ACTIVE_RULES_EXCEEDED" : "MAX_ACTIVE_RULES_EXCEEDED$0",
        "[P]FIELD_INTEGRITY_EXCEPTION" : "FIELD_INTEGRITY_EXCEPTION$0",
        "[P]INVALID_DATA_URI" : "INVALID_DATA_URI$0",
        "[P]ERROR_IN_MAILER" : "ERROR_IN_MAILER$0",
        "[P]MALFORMED_ID" : "MALFORMED_ID$0",
        "[P]CUSTOM_METADATA_LIMIT_EXCEEDED" : "CUSTOM_METADATA_LIMIT_EXCEEDED$0",
        "[P]BAD_CUSTOM_ENTITY_PARENT_DOMAIN" : "BAD_CUSTOM_ENTITY_PARENT_DOMAIN$0",
        "[P]OP_WITH_INVALID_USER_TYPE_EXCEPTION" : "OP_WITH_INVALID_USER_TYPE_EXCEPTION$0",
        "[P]INVALID_SIGNUP_COUNTRY" : "INVALID_SIGNUP_COUNTRY$0",
        "[P]CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE" : "CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE$0",
        "[P]CUSTOM_INDEX_EXISTS" : "CUSTOM_INDEX_EXISTS$0",
        "[P]FAILED_ACTIVATION" : "FAILED_ACTIVATION$0",
        "[P]ENTITY_IS_LOCKED" : "ENTITY_IS_LOCKED$0",
        "[P]INVALID_CURRENCY_ISO" : "INVALID_CURRENCY_ISO$0",
        "[P]INVALID_MASTER_OR_TRANSLATED_SOLUTION" : "INVALID_MASTER_OR_TRANSLATED_SOLUTION$0",
        "[P]NO_SUCH_USER_EXISTS" : "NO_SUCH_USER_EXISTS$0",
        "[P]INVALID_DATA_CATEGORY_GROUP_REFERENCE" : "INVALID_DATA_CATEGORY_GROUP_REFERENCE$0",
        "[P]DUPLICATE_CUSTOM_TAB_MOTIF" : "DUPLICATE_CUSTOM_TAB_MOTIF$0",
        "[P]INVALID_FIELD" : "INVALID_FIELD$0",
        "[P]ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB" : "ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB$0",
        "[P]NONUNIQUE_SHIPPING_ADDRESS" : "NONUNIQUE_SHIPPING_ADDRESS$0",
        "[P]ASSIGNEE_TYPE_REQUIRED" : "ASSIGNEE_TYPE_REQUIRED$0",
        "[P]CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD" : "CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD$0",
        "[P]CUSTOM_ENTITY_OR_FIELD_LIMIT" : "CUSTOM_ENTITY_OR_FIELD_LIMIT$0",
        "[P]NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED" : "NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED$0",
        "[P]MAX_FORMULAS_PER_RULE_EXCEEDED" : "MAX_FORMULAS_PER_RULE_EXCEEDED$0",
        "[P]INVALID_ID_FIELD" : "INVALID_ID_FIELD$0",
        "[P]REQUEST_RUNNING_TOO_LONG" : "REQUEST_RUNNING_TOO_LONG$0",
        "[P]DELETE_REQUIRED_ON_CASCADE" : "DELETE_REQUIRED_ON_CASCADE$0",
        "[P]MASS_MAIL_LIMIT_EXCEEDED" : "MASS_MAIL_LIMIT_EXCEEDED$0",
        "[P]INVALID_PARTNER_NETWORK_STATUS" : "INVALID_PARTNER_NETWORK_STATUS$0",
        "[P]INVALID_FIELD_WHEN_USING_TEMPLATE" : "INVALID_FIELD_WHEN_USING_TEMPLATE$0",
        "[P]INVALID_SUBDOMAIN" : "INVALID_SUBDOMAIN$0",
        "[P]INSUFFICIENT_ACCESS_OR_READONLY" : "INSUFFICIENT_ACCESS_OR_READONLY$0",
        "[P]UNVERIFIED_SENDER_ADDRESS" : "UNVERIFIED_SENDER_ADDRESS$0",
        "[P]MAX_APPROVAL_STEPS_EXCEEDED" : "MAX_APPROVAL_STEPS_EXCEEDED$0",
        "[P]CANNOT_PASSWORD_LOCKOUT" : "CANNOT_PASSWORD_LOCKOUT$0",
        "[P]INVALID_ASSIGNEE_TYPE" : "INVALID_ASSIGNEE_TYPE$0",
        "[P]INVALID_SETUP_OWNER" : "INVALID_SETUP_OWNER$0",
        "[P]PACKAGING_API_INSTALL_FAILED" : "PACKAGING_API_INSTALL_FAILED$0",
        "[P]ENTITY_IS_DELETED" : "ENTITY_IS_DELETED$0",
        "[P]INVALID_TYPE" : "INVALID_TYPE$0",
        "[P]REQUIRED_FIELD_MISSING" : "REQUIRED_FIELD_MISSING$0",
        "[P]CIRCULAR_DEPENDENCY" : "CIRCULAR_DEPENDENCY$0",
        "[P]MAXIMUM_SIZE_OF_DOCUMENT" : "MAXIMUM_SIZE_OF_DOCUMENT$0",
        "[P]FILTERED_LOOKUP_LIMIT_EXCEEDED" : "FILTERED_LOOKUP_LIMIT_EXCEEDED$0",
        "[P]DELETE_FAILED" : "DELETE_FAILED$0",
        "[P]WEBLINK_SIZE_LIMIT_EXCEEDED" : "WEBLINK_SIZE_LIMIT_EXCEEDED$0",
        "[P]CANNOT_DISABLE_LAST_ADMIN" : "CANNOT_DISABLE_LAST_ADMIN$0",
        "[P]TERRITORY_REALIGN_IN_PROGRESS" : "TERRITORY_REALIGN_IN_PROGRESS$0",
        "[P]LIMIT_EXCEEDED" : "LIMIT_EXCEEDED$0",
        "[P]INVALID_SAVE_AS_ACTIVITY_FLAG" : "INVALID_SAVE_AS_ACTIVITY_FLAG$0",
        "[P]MAX_RULE_ENTRIES_EXCEEDED" : "MAX_RULE_ENTRIES_EXCEEDED$0",
        "[P]CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED" : "CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED$0",
        "[P]DELETE_OPERATION_TOO_LARGE" : "DELETE_OPERATION_TOO_LARGE$0",
        "[P]UNAVAILABLE_RECORDTYPE_EXCEPTION" : "UNAVAILABLE_RECORDTYPE_EXCEPTION$0",
        "[P]DUPLICATE_EXTERNAL_ID" : "DUPLICATE_EXTERNAL_ID$0",
        "[P]NO_ATTACHMENT_PERMISSION" : "NO_ATTACHMENT_PERMISSION$0",
        "[P]DUPLICATE_VALUE" : "DUPLICATE_VALUE$0",
        "[M]values()\tLIST<system.StatusCode>" : "values()$0",
        "[P]DUPLICATE_DEVELOPER_NAME" : "DUPLICATE_DEVELOPER_NAME$0",
        "[P]TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET" : "TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET$0",
        "[P]CANNOT_DEACTIVATE_DIVISION" : "CANNOT_DEACTIVATE_DIVISION$0",
        "[P]PRIVATE_CONTACT_ON_ASSET" : "PRIVATE_CONTACT_ON_ASSET$0",
        "[P]CANNOT_RENAME_REFERENCED_FIELD" : "CANNOT_RENAME_REFERENCED_FIELD$0",
        "[P]STORAGE_LIMIT_EXCEEDED" : "STORAGE_LIMIT_EXCEEDED$0",
        "[P]INVALID_CURRENCY_CORP_RATE" : "INVALID_CURRENCY_CORP_RATE$0",
        "[P]CANNOT_RENAME_APEX_REFERENCED_OBJECT" : "CANNOT_RENAME_APEX_REFERENCED_OBJECT$0",
        "[P]CANNOT_ENABLE_IP_RESTRICT_REQUESTS" : "CANNOT_ENABLE_IP_RESTRICT_REQUESTS$0",
        "[P]SINGLE_EMAIL_LIMIT_EXCEEDED" : "SINGLE_EMAIL_LIMIT_EXCEEDED$0",
        "[P]USER_WITH_APEX_SHARES_EXCEPTION" : "USER_WITH_APEX_SHARES_EXCEPTION$0",
        "[P]TOO_MANY_APEX_REQUESTS" : "TOO_MANY_APEX_REQUESTS$0",
        "[P]CANNOT_CASCADE_PRODUCT_ACTIVE" : "CANNOT_CASCADE_PRODUCT_ACTIVE$0",
        "[P]INVALID_SESSION_ID" : "INVALID_SESSION_ID$0",
        "[P]INVALID_PACKAGE_VERSION" : "INVALID_PACKAGE_VERSION$0",
        "[P]QUERY_TIMEOUT" : "QUERY_TIMEOUT$0",
        "[P]MIXED_DML_OPERATION" : "MIXED_DML_OPERATION$0",
        "[P]INVALID_ACCESS_LEVEL" : "INVALID_ACCESS_LEVEL$0",
        "[P]INVALID_LINEITEM_CLONE_STATE" : "INVALID_LINEITEM_CLONE_STATE$0",
        "[P]RECORD_IN_USE_BY_WORKFLOW" : "RECORD_IN_USE_BY_WORKFLOW$0",
        "[P]CANNOT_DELETE_LAST_DATED_CONVERSION_RATE" : "CANNOT_DELETE_LAST_DATED_CONVERSION_RATE$0",
        "[P]CANNOT_EXECUTE_FLOW_TRIGGER" : "CANNOT_EXECUTE_FLOW_TRIGGER$0",
        "[P]INVALID_EMAIL_ADDRESS" : "INVALID_EMAIL_ADDRESS$0",
        "[P]CANNOT_UPDATE_CONVERTED_LEAD" : "CANNOT_UPDATE_CONVERTED_LEAD$0",
        "[P]CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY" : "CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY$0",
        "[P]SUBDOMAIN_IN_USE" : "SUBDOMAIN_IN_USE$0",
        "[P]FIELD_CUSTOM_VALIDATION_EXCEPTION" : "FIELD_CUSTOM_VALIDATION_EXCEPTION$0",
        "[P]CANNOT_MODIFY_MANAGED_OBJECT" : "CANNOT_MODIFY_MANAGED_OBJECT$0",
        "[P]PACKAGING_API_UNINSTALL_FAILED" : "PACKAGING_API_UNINSTALL_FAILED$0",
        "[P]IP_RANGE_LIMIT_EXCEEDED" : "IP_RANGE_LIMIT_EXCEEDED$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]DEPENDENCY_EXISTS" : "DEPENDENCY_EXISTS$0",
        "[P]INVALID_BATCH_OPERATION" : "INVALID_BATCH_OPERATION$0",
        "[P]CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD" : "CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD$0",
        "[P]CANNOT_REPARENT_RECORD" : "CANNOT_REPARENT_RECORD$0",
        "[P]NO_INACTIVE_DIVISION_MEMBERS" : "NO_INACTIVE_DIVISION_MEMBERS$0",
        "[P]CUSTOM_LINK_LIMIT_EXCEEDED" : "CUSTOM_LINK_LIMIT_EXCEEDED$0",
        "[P]INVALID_OWNER" : "INVALID_OWNER$0",
        "[P]REQUIRED_FEATURE_MISSING" : "REQUIRED_FEATURE_MISSING$0",
        "[P]TEMPLATE_NOT_ACTIVE" : "TEMPLATE_NOT_ACTIVE$0",
        "[P]CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED" : "CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED$0",
        "[P]DUPLICATE_COMM_NICKNAME" : "DUPLICATE_COMM_NICKNAME$0",
        "[P]PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT" : "PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT$0",
        "[P]ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE" : "ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE$0",
        "[P]MAX_ACTIONS_PER_RULE_EXCEEDED" : "MAX_ACTIONS_PER_RULE_EXCEEDED$0",
        "[P]DUPLICATE_CUSTOM_ENTITY_DEFINITION" : "DUPLICATE_CUSTOM_ENTITY_DEFINITION$0",
        "[P]IMAGE_TOO_LARGE" : "IMAGE_TOO_LARGE$0",
        "[P]DUPLICATE_CASE_SOLUTION" : "DUPLICATE_CASE_SOLUTION$0",
        "[P]INVALID_TYPE_FOR_OPERATION" : "INVALID_TYPE_FOR_OPERATION$0",
        "[P]INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD" : "INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD$0",
        "[P]INVALID_EMPTY_KEY_OWNER" : "INVALID_EMPTY_KEY_OWNER$0",
        "[P]INVALID_GOOGLE_DOCS_URL" : "INVALID_GOOGLE_DOCS_URL$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]WEBLINK_URL_INVALID" : "WEBLINK_URL_INVALID$0",
        "[P]SHARE_NEEDED_FOR_CHILD_OWNER" : "SHARE_NEEDED_FOR_CHILD_OWNER$0",
        "[P]UNKNOWN_EXCEPTION" : "UNKNOWN_EXCEPTION$0",
        "[P]INVALID_MESSAGE_ID_REFERENCE" : "INVALID_MESSAGE_ID_REFERENCE$0",
        "[P]ALREADY_IN_PROCESS" : "ALREADY_IN_PROCESS$0",
        "[P]MERGE_FAILED" : "MERGE_FAILED$0",
        "[P]LIGHT_PORTAL_USER_EXCEPTION" : "LIGHT_PORTAL_USER_EXCEPTION$0",
        "[P]LICENSE_LIMIT_EXCEEDED" : "LICENSE_LIMIT_EXCEEDED$0",
        "[P]CANNOT_RENAME_REFERENCED_OBJECT" : "CANNOT_RENAME_REFERENCED_OBJECT$0",
        "[P]INVALID_CROSS_REFERENCE_KEY" : "INVALID_CROSS_REFERENCE_KEY$0",
        "[P]MAX_RULES_EXCEEDED" : "MAX_RULES_EXCEEDED$0",
        "[P]INVALID_PERSON_ACCOUNT_OPERATION" : "INVALID_PERSON_ACCOUNT_OPERATION$0",
        "[P]EMPTY_SCONTROL_FILE_NAME" : "EMPTY_SCONTROL_FILE_NAME$0",
        "[P]ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB" : "ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB$0",
        "[P]INVALID_ASSIGNMENT_RULE" : "INVALID_ASSIGNMENT_RULE$0",
        "[P]USER_OWNS_PORTAL_ACCOUNT_EXCEPTION" : "USER_OWNS_PORTAL_ACCOUNT_EXCEPTION$0",
        "[P]SELF_REFERENCE_FROM_TRIGGER" : "SELF_REFERENCE_FROM_TRIGGER$0",
        "[P]INVALID_OPERATION" : "INVALID_OPERATION$0",
        "[P]MAX_TM_RULES_EXCEEDED" : "MAX_TM_RULES_EXCEEDED$0",
        "[P]WRONG_CONTROLLER_TYPE" : "WRONG_CONTROLLER_TYPE$0",
        "[P]INVALID_ARGUMENT_TYPE" : "INVALID_ARGUMENT_TYPE$0",
        "[P]CUSTOM_APEX_ERROR" : "CUSTOM_APEX_ERROR$0",
        "[P]ENTITY_IS_ARCHIVED" : "ENTITY_IS_ARCHIVED$0",
        "[P]SELF_REFERENCE_FROM_FLOW" : "SELF_REFERENCE_FROM_FLOW$0",
        "[P]MISSING_ARGUMENT" : "MISSING_ARGUMENT$0",
        "[P]TOO_MANY_POSSIBLE_USERS_EXIST" : "TOO_MANY_POSSIBLE_USERS_EXIST$0",
        "[P]UNDELETE_FAILED" : "UNDELETE_FAILED$0",
        "[P]UNABLE_TO_LOCK_ROW" : "UNABLE_TO_LOCK_ROW$0",
        "[P]ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN" : "ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN$0",
        "[P]CANT_DISABLE_CORP_CURRENCY" : "CANT_DISABLE_CORP_CURRENCY$0",
        "[P]ALL_OR_NONE_OPERATION_ROLLED_BACK" : "ALL_OR_NONE_OPERATION_ROLLED_BACK$0",
        "[P]DUPLICATE_USERNAME" : "DUPLICATE_USERNAME$0",
        "[P]INVALID_CREDIT_CARD_INFO" : "INVALID_CREDIT_CARD_INFO$0",
        "[P]MANAGER_NOT_DEFINED" : "MANAGER_NOT_DEFINED$0",
        "[P]MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED" : "MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED$0",
        "[P]TEMPLATE_NOT_FOUND" : "TEMPLATE_NOT_FOUND$0",
        "[P]UNSPECIFIED_EMAIL_ADDRESS" : "UNSPECIFIED_EMAIL_ADDRESS$0",
        "[P]INVALID_OPERATOR" : "INVALID_OPERATOR$0",
        "[P]OPTED_OUT_OF_MASS_MAIL" : "OPTED_OUT_OF_MASS_MAIL$0",
        "[P]CANNOT_RENAME_APEX_REFERENCED_FIELD" : "CANNOT_RENAME_APEX_REFERENCED_FIELD$0",
        "[P]INACTIVE_OWNER_OR_USER" : "INACTIVE_OWNER_OR_USER$0",
        "[P]NO_APPLICABLE_PROCESS" : "NO_APPLICABLE_PROCESS$0",
        "[P]PORTAL_NO_ACCESS" : "PORTAL_NO_ACCESS$0",
        "[P]INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY" : "INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY$0",
        "[P]INVALID_CURRENCY_CONV_RATE" : "INVALID_CURRENCY_CONV_RATE$0",
        "[P]STANDARD_PRICE_NOT_DEFINED" : "STANDARD_PRICE_NOT_DEFINED$0",
        "[P]MAXIMUM_SIZE_OF_ATTACHMENT" : "MAXIMUM_SIZE_OF_ATTACHMENT$0",
        "[P]INVALID_FIELD_FOR_INSERT_UPDATE" : "INVALID_FIELD_FOR_INSERT_UPDATE$0",
        "[P]CANT_UNSET_CORP_CURRENCY" : "CANT_UNSET_CORP_CURRENCY$0",
        "[P]INVALID_CONTENT_TYPE" : "INVALID_CONTENT_TYPE$0",
        "[P]COLLISION_DETECTED" : "COLLISION_DETECTED$0",
        "[P]CANNOT_FREEZE_SELF" : "CANNOT_FREEZE_SELF$0",
        "[P]UNSUPPORTED_APEX_TRIGGER_OPERATON" : "UNSUPPORTED_APEX_TRIGGER_OPERATON$0",
        "[P]NUMBER_OUTSIDE_VALID_RANGE" : "NUMBER_OUTSIDE_VALID_RANGE$0",
        "[P]TABSET_LIMIT_EXCEEDED" : "TABSET_LIMIT_EXCEEDED$0",
        "[P]PACKAGE_LICENSE_REQUIRED" : "PACKAGE_LICENSE_REQUIRED$0",
        "[P]MAX_TM_RULE_ITEMS_EXCEEDED" : "MAX_TM_RULE_ITEMS_EXCEEDED$0",
        "[P]HTML_FILE_UPLOAD_NOT_ALLOWED" : "HTML_FILE_UPLOAD_NOT_ALLOWED$0",
        "[P]BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED" : "BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED$0",
        "[P]STRING_TOO_LONG" : "STRING_TOO_LONG$0",
        "[P]MAXIMUM_HIERARCHY_LEVELS_REACHED" : "MAXIMUM_HIERARCHY_LEVELS_REACHED$0",
        "[P]MAX_TASK_DESCRIPTION_EXCEEEDED" : "MAX_TASK_DESCRIPTION_EXCEEEDED$0",
        "[P]INVALID_STATUS" : "INVALID_STATUS$0",
        "[P]CHILD_SHARE_FAILS_PARENT" : "CHILD_SHARE_FAILS_PARENT$0",
        "[P]MASSMAIL_RETRY_LIMIT_EXCEEDED" : "MASSMAIL_RETRY_LIMIT_EXCEEDED$0",
        "[P]CUSTOM_TAB_LIMIT_EXCEEDED" : "CUSTOM_TAB_LIMIT_EXCEEDED$0",
        "[P]CANNOT_DELETE_MANAGED_OBJECT" : "CANNOT_DELETE_MANAGED_OBJECT$0"
    },
    "ReportTypeColumn" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getFilterable()\tBoolean" : "getFilterable()$0",
        "[M]setDataType(String value)\tvoid" : "setDataType($0)",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]getFilterValues()\tLIST<reports.FilterValue>" : "getFilterValues()$0",
        "[M]setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "[M]getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "[M]setFilterable(Boolean filterable)\tvoid" : "setFilterable($0)",
        "[M]setFilterValues(LIST<reports.FilterValue> filterValues)\tvoid" : "setFilterValues($0)",
        "[M]getName()\tString" : "getName()$0"
    },
    "PollAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]pollChoices" : "pollChoices$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "HandledException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "Topic" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[P]createdDate" : "createdDate$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[P]talkingAbout" : "talkingAbout$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]description" : "description$0",
        "[P]url" : "url$0"
    },
    "Cases" : {
        "[M]getCaseIdFromEmailThreadId(String emailThreadId)\tId" : "getCaseIdFromEmailThreadId($0)"
    },
    "SendEmailError" : {
        "[M]getFields()\tLIST<String>" : "getFields()$0",
        "[M]getTargetObjectId()\tString" : "getTargetObjectId()$0",
        "[M]getStatusCode()\tsystem.StatusCode" : "getStatusCode()$0",
        "[M]getMessage()\tString" : "getMessage()$0"
    },
    "Network" : {
        "[M]communitiesLanding()\tSystem.PageReference" : "communitiesLanding()$0",
        "[M]forwardToAuthPage(String startUrl)\tSystem.PageReference" : "forwardToAuthPage($0)",
        "[M]getNetworkId()\tString" : "getNetworkId()$0",
        "[M]forwardToAuthPage(String startUrl, String displayType)\tSystem.PageReference" : "forwardToAuthPage($0)"
    },
    "AssignmentRuleHeader" : {
        "[P]UseDefaultRule" : "UseDefaultRule$0",
        "[P]AssignmentRuleId" : "AssignmentRuleId$0"
    },
    "ColumnDataType" : {
        "[P]DATETIME_DATA" : "DATETIME_DATA$0",
        "[P]TIME_DATA" : "TIME_DATA$0",
        "[P]ID_DATA" : "ID_DATA$0",
        "[P]CURRENCY_DATA" : "CURRENCY_DATA$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]MULTIPICKLIST_DATA" : "MULTIPICKLIST_DATA$0",
        "[P]EMAIL_DATA" : "EMAIL_DATA$0",
        "[P]COMBOBOX_DATA" : "COMBOBOX_DATA$0",
        "[P]URL_DATA" : "URL_DATA$0",
        "[P]REFERENCE_DATA" : "REFERENCE_DATA$0",
        "[P]BOOLEAN_DATA" : "BOOLEAN_DATA$0",
        "[P]PERCENT_DATA" : "PERCENT_DATA$0",
        "[M]values()\tLIST<reports.ColumnDataType>" : "values()$0",
        "[P]DOUBLE_DATA" : "DOUBLE_DATA$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]PHONE_DATA" : "PHONE_DATA$0",
        "[P]STRING_DATA" : "STRING_DATA$0",
        "[P]INT_DATA" : "INT_DATA$0",
        "[P]PICKLIST_DATA" : "PICKLIST_DATA$0",
        "[P]DATE_DATA" : "DATE_DATA$0",
        "[P]TEXTAREA_DATA" : "TEXTAREA_DATA$0"
    },
    "DescribeAvailableQuickActionResult" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]getType()\tString" : "getType()$0"
    },
    "UserInfo" : {
        "[M]getUserType()\tString" : "getUserType()$0",
        "[M]getDefaultCurrency()\tString" : "getDefaultCurrency()$0",
        "[M]getLocale()\tString" : "getLocale()$0",
        "[M]getLanguage()\tString" : "getLanguage()$0",
        "[M]getUserId()\tString" : "getUserId()$0",
        "[M]getUserEmail()\tString" : "getUserEmail()$0",
        "[M]getLastName()\tString" : "getLastName()$0",
        "[M]getTimeZone()\tsystem.TimeZone" : "getTimeZone()$0",
        "[M]getOrganizationId()\tString" : "getOrganizationId()$0",
        "[M]getProfileId()\tString" : "getProfileId()$0",
        "[M]isCurrentUserLicensed(String namespacePrefix)\tBoolean" : "isCurrentUserLicensed($0)",
        "[M]getSessionId()\tString" : "getSessionId()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]getUiTheme()\tString" : "getUiTheme()$0",
        "[M]isMultiCurrencyOrganization()\tBoolean" : "isMultiCurrencyOrganization()$0",
        "[M]getFirstName()\tString" : "getFirstName()$0",
        "[M]getUserName()\tString" : "getUserName()$0",
        "[M]getUserRoleId()\tString" : "getUserRoleId()$0",
        "[M]getOrganizationName()\tString" : "getOrganizationName()$0",
        "[M]getUiThemeDisplayed()\tString" : "getUiThemeDisplayed()$0"
    },
    "AssertException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "InboundSocialPostResult" : {
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]setSuccess(Boolean success)\tvoid" : "setSuccess($0)"
    },
    "EmailMessage" : {
        "[P]subject" : "subject$0",
        "[P]direction" : "direction$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]emailMessageId" : "emailMessageId$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]textBody" : "textBody$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]toAddresses" : "toAddresses$0"
    },
    "ModerationFlags" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]flaggedByMe" : "flaggedByMe$0",
        "[P]flagCount" : "flagCount$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "MessageBodyInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]messageSegments" : "messageSegments$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "BasicTemplateAttachment" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]linkUrl" : "linkUrl$0",
        "[P]icon" : "icon$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]linkRecordId" : "linkRecordId$0",
        "[P]subtype" : "subtype$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0",
        "[P]description" : "description$0"
    },
    "ReportFilter" : {
        "[M]setOperator(String operator)\tvoid" : "setOperator($0)",
        "[M]getOperator()\tString" : "getOperator()$0",
        "[M]setValue(String value)\tvoid" : "setValue($0)",
        "[M]getColumn()\tString" : "getColumn()$0",
        "[M]setColumn(String column)\tvoid" : "setColumn($0)",
        "[M]getValue()\tString" : "getValue()$0"
    },
    "RecordColumnOrder" : {
        "[P]TopDown" : "TopDown$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]LeftRight" : "LeftRight$0",
        "[M]values()\tLIST<ConnectApi.RecordColumnOrder>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ReferenceRecordField" : {
        "[P]reference" : "reference$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "System" : {
        "[M]currentTimeMillis()\tLong" : "currentTimeMillis()$0",
        "[M]isBatch()\tBoolean" : "isBatch()$0",
        "[M]scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow)\tString" : "scheduleBatch($0)",
        "[M]isScheduled()\tBoolean" : "isScheduled()$0",
        "[M]now()\tDatetime" : "now()$0",
        "[M]isFuture()\tBoolean" : "isFuture()$0",
        "[M]currentPageReference()\tSystem.PageReference" : "currentPageReference()$0",
        "[M]process(LIST workitemIds, String action, String commments, String nextApprover)\tLIST<Id>" : "process($0)",
        "[M]requestVersion()\tsystem.Version" : "requestVersion()$0",
        "[M]runAs(Package.Version version)\tvoid" : "runAs($0)",
        "[M]assertEquals(ANY expected, ANY actual)\tvoid" : "assertEquals($0)",
        "[M]assertNotEquals(ANY expected, ANY actual)\tvoid" : "assertNotEquals($0)",
        "[M]scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow, Integer scopeSize)\tString" : "scheduleBatch($0)",
        "[M]submit(LIST ids, String commments, String nextApprover)\tLIST<Id>" : "submit($0)",
        "[M]getApplicationReadWriteMode()\tsystem.ApplicationReadWriteMode" : "getApplicationReadWriteMode()$0",
        "[M]today()\tDate" : "today()$0",
        "[M]schedule(String jobName, String cronExp, APEX_OBJECT schedulable)\tString" : "schedule($0)",
        "[M]assert(Boolean condition)\tvoid" : "assert($0)",
        "[M]assert(Boolean condition, ANY msg)\tvoid" : "assert($0)",
        "[M]debug(ANY o)\tvoid" : "debug($0)",
        "[M]debug(APEX_OBJECT logLevel, ANY o)\tvoid" : "debug($0)",
        "[M]assertEquals(ANY expected, ANY actual, ANY msg)\tvoid" : "assertEquals($0)",
        "[M]abortJob(String jobId)\tvoid" : "abortJob($0)",
        "[M]resetPassword(Id userId, Boolean sendUserEmail)\tSystem.ResetPasswordResult" : "resetPassword($0)",
        "[M]assertNotEquals(ANY expected, ANY actual, ANY msg)\tvoid" : "assertNotEquals($0)",
        "[M]purgeOldAsyncJobs(Date date)\tInteger" : "purgeOldAsyncJobs($0)",
        "[M]setPassword(Id userId, String password)\tvoid" : "setPassword($0)",
        "[M]runAs(SObject user, ANY block)\tvoid" : "runAs($0)"
    },
    "UrlRewriter" : {
        "[M]mapRequestUrl(System.PageReference param1)\tSystem.PageReference" : "mapRequestUrl($0)",
        "[M]generateUrlFor(LIST<System.PageReference> param1)\tLIST<System.PageReference>" : "generateUrlFor($0)"
    },
    "MentionValidations" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]hasErrors" : "hasErrors$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]mentionValidations" : "mentionValidations$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "ZoneSearchResult" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]voteCount" : "voteCount$0",
        "[P]hasBestAnswer" : "hasBestAnswer$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]title" : "title$0",
        "[P]type" : "type$0"
    },
    "FieldChangeNameSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "InboundEnvelope" : {
        "[P]toAddress" : "toAddress$0",
        "[P]fromAddress" : "fromAddress$0"
    },
    "GroupMemberPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]myMembership" : "myMembership$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]totalMemberCount" : "totalMemberCount$0",
        "[P]members" : "members$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "Topics" : {
        "[M]getRelatedTopics(String communityId, String topicId)\tConnectApi.TopicPage" : "getRelatedTopics($0)",
        "[M]assignTopic(String communityId, String recordId, String topicId)\tConnectApi.Topic" : "assignTopic($0)",
        "[M]getGroupsRecentlyTalkingAboutTopic(String communityId, String topicId)\tConnectApi.ChatterGroupSummaryPage" : "getGroupsRecentlyTalkingAboutTopic($0)",
        "[M]getTopicSuggestionsForText(String communityId, String text, Integer maxResults)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestionsForText($0)",
        "[M]unassignTopic(String communityId, String recordId, String topicId)\tvoid" : "unassignTopic($0)",
        "[M]getTopics(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]setTestGetRelatedTopics(String communityId, String topicId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRelatedTopics($0)",
        "[M]getTopic(String communityId, String topicId)\tConnectApi.Topic" : "getTopic($0)",
        "[M]deleteTopic(String communityId, String topicId)\tvoid" : "deleteTopic($0)",
        "[M]getTopics(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getTopicSuggestions(String communityId, String recordId)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestions($0)",
        "[M]setTestGetTrendingTopics(String communityId, Integer maxResults, ConnectApi.TopicPage result)\tvoid" : "setTestGetTrendingTopics($0)",
        "[M]assignTopicByName(String communityId, String recordId, String topicName)\tConnectApi.Topic" : "assignTopicByName($0)",
        "[M]setTestGetRecentlyTalkingAboutTopicsForUser(String communityId, String userId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRecentlyTalkingAboutTopicsForUser($0)",
        "[M]getTopicSuggestionsForText(String communityId, String text)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestionsForText($0)",
        "[M]setTestGetTopicSuggestions(String communityId, String recordId, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestions($0)",
        "[M]getTopics(String communityId)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getTopics(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getTopics(String communityId, String q, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]setTestGetTopicSuggestionsForText(String communityId, String text, Integer maxResults, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestionsForText($0)",
        "[M]getTrendingTopics(String communityId, Integer maxResults)\tConnectApi.TopicPage" : "getTrendingTopics($0)",
        "[M]setTestGetTopicSuggestions(String communityId, String recordId, Integer maxResults, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestions($0)",
        "[M]getTopicSuggestions(String communityId, String recordId, Integer maxResults)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestions($0)",
        "[M]setTestGetTopicSuggestionsForText(String communityId, String text, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestionsForText($0)",
        "[M]setTestGetTrendingTopics(String communityId, ConnectApi.TopicPage result)\tvoid" : "setTestGetTrendingTopics($0)",
        "[M]setTestGetRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRecentlyTalkingAboutTopicsForGroup($0)",
        "[M]setTestGetGroupsRecentlyTalkingAboutTopic(String communityId, String topicId, ConnectApi.ChatterGroupSummaryPage result)\tvoid" : "setTestGetGroupsRecentlyTalkingAboutTopic($0)",
        "[M]getTrendingTopics(String communityId)\tConnectApi.TopicPage" : "getTrendingTopics($0)",
        "[M]getRecentlyTalkingAboutTopicsForUser(String communityId, String userId)\tConnectApi.TopicPage" : "getRecentlyTalkingAboutTopicsForUser($0)",
        "[M]getTopics(String communityId, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getTopics(String communityId, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getTopics(String communityId, String recordId)\tConnectApi.TopicPage" : "getTopics($0)",
        "[M]getRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId)\tConnectApi.TopicPage" : "getRecentlyTalkingAboutTopicsForGroup($0)",
        "[M]updateTopic(String communityId, String topicId, ConnectApi.TopicInput topic)\tConnectApi.Topic" : "updateTopic($0)"
    },
    "CanvasAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]parameters" : "parameters$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[P]developerName" : "developerName$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]height" : "height$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0",
        "[P]description" : "description$0",
        "[P]thumbnailUrl" : "thumbnailUrl$0",
        "[P]namespacePrefix" : "namespacePrefix$0"
    },
    "CURRENCY" : {
        "[M]format()\tString" : "format()$0",
        "[M]newInstance(Decimal amount, String isoCode)\tCURRENCY" : "newInstance($0)",
        "[M]formatAmount()\tString" : "formatAmount()$0"
    },
    "ReportInstanceAttributes" : {
        "[M]setRequestDate(String requestDate)\tvoid" : "setRequestDate($0)",
        "[M]getRequestDate()\tString" : "getRequestDate()$0",
        "[M]setOwnerId(Id ownerId)\tvoid" : "setOwnerId($0)",
        "[M]setId(Id id)\tvoid" : "setId($0)",
        "[M]setCompletionDate(String completionDate)\tvoid" : "setCompletionDate($0)",
        "[M]getCompletionDate()\tString" : "getCompletionDate()$0",
        "[M]getOwnerId()\tId" : "getOwnerId()$0",
        "[M]getStatus()\tString" : "getStatus()$0",
        "[M]getId()\tId" : "getId()$0",
        "[M]setStatus(String status)\tvoid" : "setStatus($0)"
    },
    "EmailException" : {
        "[M]getDmlFields(Integer index)\tLIST<Schema.SObjectField>" : "getDmlFields($0)",
        "[M]getDmlMessage(Integer index)\tString" : "getDmlMessage($0)",
        "[M]getDmlIndex(Integer index)\tInteger" : "getDmlIndex($0)",
        "[M]getDmlId(Integer index)\tString" : "getDmlId($0)",
        "[M]getDmlFieldNames(Integer index)\tLIST<String>" : "getDmlFieldNames($0)",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getDmlType(Integer index)\tsystem.StatusCode" : "getDmlType($0)",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0",
        "[M]getNumDml()\tInteger" : "getNumDml()$0",
        "[M]getDmlStatusCode(Integer index)\tString" : "getDmlStatusCode($0)"
    },
    "UserSettings" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]hasFileSync" : "hasFileSync$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]fileSyncStorageLimit" : "fileSyncStorageLimit$0",
        "[P]canViewFullUserProfile" : "canViewFullUserProfile$0",
        "[P]canViewAllGroups" : "canViewAllGroups$0",
        "[P]canViewPublicFiles" : "canViewPublicFiles$0",
        "[P]userId" : "userId$0",
        "[P]externalUser" : "externalUser$0",
        "[P]hasRestDataApiAccess" : "hasRestDataApiAccess$0",
        "[P]userLocale" : "userLocale$0",
        "[P]hasAccessToInternalOrg" : "hasAccessToInternalOrg$0",
        "[P]approvalPosts" : "approvalPosts$0",
        "[P]canOwnGroups" : "canOwnGroups$0",
        "[P]userDefaultCurrencyIsoCode" : "userDefaultCurrencyIsoCode$0",
        "[P]canViewAllData" : "canViewAllData$0",
        "[P]canViewAllUsers" : "canViewAllUsers$0",
        "[P]currencySymbol" : "currencySymbol$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]canFollow" : "canFollow$0",
        "[P]canModifyAllData" : "canModifyAllData$0"
    },
    "Icon" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]width" : "width$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]height" : "height$0",
        "[P]url" : "url$0"
    },
    "FeedBody" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "SerializationException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ReportMetadata" : {
        "[M]setReportFilters(LIST<reports.ReportFilter> reportFilters)\tvoid" : "setReportFilters($0)",
        "[M]setId(Id id)\tvoid" : "setId($0)",
        "[M]getGroupingsAcross()\tLIST<reports.GroupingInfo>" : "getGroupingsAcross()$0",
        "[M]getId()\tId" : "getId()$0",
        "[M]setCurrencyCode(String currencyCode)\tvoid" : "setCurrencyCode($0)",
        "[M]setDeveloperName(String developerName)\tvoid" : "setDeveloperName($0)",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setReportBooleanFilter(String reportBooleanFilter)\tvoid" : "setReportBooleanFilter($0)",
        "[M]getDeveloperName()\tString" : "getDeveloperName()$0",
        "[M]getAggregates()\tLIST<String>" : "getAggregates()$0",
        "[M]setDetailColumns(LIST<String> detailColumns)\tvoid" : "setDetailColumns($0)",
        "[M]setReportFormat(String value)\tvoid" : "setReportFormat($0)",
        "[M]getReportType()\treports.ReportType" : "getReportType()$0",
        "[M]getDetailColumns()\tLIST<String>" : "getDetailColumns()$0",
        "[M]setGroupingsDown(LIST<reports.GroupingInfo> groupingsDown)\tvoid" : "setGroupingsDown($0)",
        "[M]getGroupingsDown()\tLIST<reports.GroupingInfo>" : "getGroupingsDown()$0",
        "[M]getReportBooleanFilter()\tString" : "getReportBooleanFilter()$0",
        "[M]setAggregates(LIST<String> aggregates)\tvoid" : "setAggregates($0)",
        "[M]getReportFormat()\treports.ReportFormat" : "getReportFormat()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setReportType(reports.ReportType reportType)\tvoid" : "setReportType($0)",
        "[M]getCurrencyCode()\tString" : "getCurrencyCode()$0",
        "[M]setReportFormat(reports.ReportFormat reportFormat)\tvoid" : "setReportFormat($0)",
        "[M]getReportFilters()\tLIST<reports.ReportFilter>" : "getReportFilters()$0",
        "[M]setGroupingsAcross(LIST<reports.GroupingInfo> groupingsAcross)\tvoid" : "setGroupingsAcross($0)"
    },
    "RecordSummary" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "ReportImageFormula" : {
        "[M]getWidth()\tString" : "getWidth()$0",
        "[M]setImgSrc(String imgSrc)\tvoid" : "setImgSrc($0)",
        "[M]setWidth(String width)\tvoid" : "setWidth($0)",
        "[M]setHeight(String height)\tvoid" : "setHeight($0)",
        "[M]getText()\tString" : "getText()$0",
        "[M]getHeight()\tString" : "getHeight()$0",
        "[M]getImgSrc()\tString" : "getImgSrc()$0",
        "[M]setText(String text)\tvoid" : "setText($0)"
    },
    "DescribeIconResult" : {
        "[M]getWidth()\tInteger" : "getWidth()$0",
        "[M]getUrl()\tString" : "getUrl()$0",
        "[M]getTheme()\tString" : "getTheme()$0",
        "[M]getHeight()\tInteger" : "getHeight()$0",
        "[M]getContentType()\tString" : "getContentType()$0"
    },
    "ReportCurrency" : {
        "[M]getCurrencyCode()\tString" : "getCurrencyCode()$0",
        "[M]getAmount()\tDecimal" : "getAmount()$0",
        "[M]setAmount(Decimal amount)\tvoid" : "setAmount($0)",
        "[M]setCurrencyCode(String currencyCode)\tvoid" : "setCurrencyCode($0)"
    },
    "LicensingAndProvisioning" : {
        "[M]replaceTenantAccountLink(String serviceProviderKey, String oldTenantExternalId, String newTenantExternalId)\tvoid" : "replaceTenantAccountLink($0)",
        "[M]linkTenantAccount(String serviceProviderKey, String tenantExternalId, String accountId)\tvoid" : "linkTenantAccount($0)"
    },
    "ReportType" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]setType(String type)\tvoid" : "setType($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]getType()\tString" : "getType()$0"
    },
    "Iterator" : {
        "[M]next()\tObject" : "next()$0",
        "[M]hasNext()\tBoolean" : "hasNext()$0"
    },
    "List" : {
        "[M]iterator()\tsystem.ListIterator" : "iterator()$0",
        "[M]isEmpty()\tBoolean" : "isEmpty()$0",
        "[M]remove(Integer index)\tObject" : "remove($0)",
        "[M]sort()\tvoid" : "sort()$0",
        "[M]deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps)\tLIST<String>" : "deepClone($0)",
        "[M]set(Integer index, ANY value)\tvoid" : "set($0)",
        "[M]equals(ANY obj)\tBoolean" : "equals($0)",
        "[M]clone()\tLIST<String>" : "clone()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]deepClone()\tLIST<String>" : "deepClone()$0",
        "[M]add(ANY element)\tObject" : "add($0)",
        "[M]get(Integer index)\tObject" : "get($0)",
        "[M]size()\tInteger" : "size()$0",
        "[M]getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "[M]deepClone(Boolean preserveId)\tLIST<String>" : "deepClone($0)",
        "[M]addAll(SET elements)\tvoid" : "addAll($0)",
        "[M]add(Integer index, ANY element)\tvoid" : "add($0)",
        "[M]addAll(LIST elements)\tvoid" : "addAll($0)",
        "[M]clear()\tvoid" : "clear()$0",
        "[M]deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tLIST<String>" : "deepClone($0)"
    },
    "FlowException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "UserProfileTab" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]tabType" : "tabType$0",
        "[P]isDefault" : "isDefault$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]tabUrl" : "tabUrl$0"
    },
    "InboundSocialPostHandler" : {
        "[M]handleInboundSocialPost(SocialPost param1, SocialPersona param2, MAP<String,ANY> param3)\tSocial.InboundSocialPostResult" : "handleInboundSocialPost($0)"
    },
    "DescribeQuickActionDefaultValue" : {
        "[M]getField()\tString" : "getField()$0",
        "[M]getDefaultValue()\tString" : "getDefaultValue()$0"
    },
    "EmailAddress" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]emailAddress" : "emailAddress$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]displayName" : "displayName$0"
    },
    "MessageSegment" : {
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]text" : "text$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "StandardController" : {
        "[M]view()\tSystem.PageReference" : "view()$0",
        "[M]getSubject()\tSObject" : "getSubject()$0",
        "[M]cancel()\tSystem.PageReference" : "cancel()$0",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]edit()\tSystem.PageReference" : "edit()$0",
        "[M]delete()\tSystem.PageReference" : "delete()$0",
        "[M]save()\tSystem.PageReference" : "save()$0",
        "[M]getId()\tString" : "getId()$0",
        "[M]reset()\tvoid" : "reset()$0",
        "[M]addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)"
    },
    "EntityLinkSegment" : {
        "[P]reference" : "reference$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]motif" : "motif$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "RestRequest" : {
        "[P]remoteAddress" : "remoteAddress$0",
        "[P]httpMethod" : "httpMethod$0",
        "[M]addParameter(String name, String value)\tvoid" : "addParameter($0)",
        "[P]params" : "params$0",
        "[P]headers" : "headers$0",
        "[P]requestBody" : "requestBody$0",
        "[P]resourcePath" : "resourcePath$0",
        "[M]addHeader(String name, String value)\tvoid" : "addHeader($0)",
        "[P]requestURI" : "requestURI$0"
    },
    "NonePointerException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "RequiredFeatureMissingException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "FilePublishStatus" : {
        "[M]values()\tLIST<ConnectApi.FilePublishStatus>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]PendingAccess" : "PendingAccess$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]PrivateAccess" : "PrivateAccess$0",
        "[P]PublicAccess" : "PublicAccess$0"
    },
    "DashboardComponentAttachment" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]dashboardId" : "dashboardId$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]componentId" : "componentId$0",
        "[P]dashboardName" : "dashboardName$0",
        "[P]thumbnailUrl" : "thumbnailUrl$0",
        "[P]lastRefreshDateDisplayText" : "lastRefreshDateDisplayText$0",
        "[P]fullSizeImageUrl" : "fullSizeImageUrl$0",
        "[P]componentName" : "componentName$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]lastRefreshDate" : "lastRefreshDate$0",
        "[P]dashboardBodyText" : "dashboardBodyText$0",
        "[P]runningUser" : "runningUser$0"
    },
    "ZonePage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]zones" : "zones$0"
    },
    "QueryException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "UserProfileTabType" : {
        "[P]CustomVisualForce" : "CustomVisualForce$0",
        "[P]CustomWeb" : "CustomWeb$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Overview" : "Overview$0",
        "[P]Feed" : "Feed$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.UserProfileTabType>" : "values()$0"
    },
    "FileSummary" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "Boolean" : {
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]valueOf(Object a)\tBoolean" : "valueOf($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "InstanceAccessException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "MobilePushPayload" : {
        "[M]apple(String alert, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>" : "apple($0)",
        "[M]apple(String alertBody, String actionLocKey, String locKey, LIST<String> locArgs, String launchImage, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>" : "apple($0)"
    },
    "FilterValue" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "ChatterMessagePage" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]messages" : "messages$0",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]nextPageUrl" : "nextPageUrl$0"
    },
    "UndeleteResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "GetUpdatedResult" : {
        "[M]getIds()\tLIST<Id>" : "getIds()$0",
        "[M]getLatestDateCovered()\tDate" : "getLatestDateCovered()$0"
    },
    "FileSharingType" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.FileSharingType>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Collaborator" : "Collaborator$0",
        "[P]WorkspaceManaged" : "WorkspaceManaged$0",
        "[P]Admin" : "Admin$0",
        "[P]Viewer" : "Viewer$0",
        "[P]Owner" : "Owner$0"
    },
    "Document" : {
        "[M]load(String xml)\tvoid" : "load($0)",
        "[M]createRootElement(String name, String namespace, String prefix)\tdom.XmlNode" : "createRootElement($0)",
        "[M]toXmlString()\tString" : "toXmlString()$0",
        "[M]getRootElement()\tdom.XmlNode" : "getRootElement()$0"
    },
    "Iterable" : {
        "[M]iterator()\tsystem.Iterator" : "iterator()$0"
    },
    "MassEmailMessage" : {
        "[M]getUseSignature()\tBoolean" : "getUseSignature()$0",
        "[M]setSubject(String param1)\tvoid" : "setSubject($0)",
        "[M]setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "[M]setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "[M]getTemplateId()\tId" : "getTemplateId()$0",
        "[M]setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "[M]getWhatIds()\tLIST<Id>" : "getWhatIds()$0",
        "[M]setReplyTo(String param1)\tvoid" : "setReplyTo($0)",
        "[M]setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "[M]getSubject()\tString" : "getSubject()$0",
        "[M]getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "[M]getReplyTo()\tString" : "getReplyTo()$0",
        "[M]getDescription()\tString" : "getDescription()$0",
        "[M]setDescription(String param1)\tvoid" : "setDescription($0)",
        "[M]setTemplateId(Id param1)\tvoid" : "setTemplateId($0)",
        "[M]setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "[M]getTargetObjectIds()\tLIST<Id>" : "getTargetObjectIds()$0",
        "[M]setTargetObjectIds(LIST<Id> param1)\tvoid" : "setTargetObjectIds($0)",
        "[M]getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "[M]getEmailPriority()\tString" : "getEmailPriority()$0",
        "[M]getBccSender()\tBoolean" : "getBccSender()$0",
        "[M]setWhatIds(LIST<Id> param1)\tvoid" : "setWhatIds($0)"
    },
    "Zones" : {
        "[M]setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize, ConnectApi.ZoneSearchPage result)\tvoid" : "setTestSearchInZone($0)",
        "[M]getZones(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.ZonePage" : "getZones($0)",
        "[M]getZone(String communityId, String zoneId)\tConnectApi.Zone" : "getZone($0)",
        "[M]searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize)\tConnectApi.ZoneSearchPage" : "searchInZone($0)",
        "[M]getZones(String communityId)\tConnectApi.ZonePage" : "getZones($0)",
        "[M]setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, ConnectApi.ZoneSearchPage result)\tvoid" : "setTestSearchInZone($0)",
        "[M]searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter)\tConnectApi.ZoneSearchPage" : "searchInZone($0)"
    },
    "ReportDescribeResult" : {
        "[M]getReportTypeMetadata()\treports.ReportTypeMetadata" : "getReportTypeMetadata()$0",
        "[M]getReportExtendedMetadata()\treports.ReportExtendedMetadata" : "getReportExtendedMetadata()$0",
        "[M]getReportMetadata()\treports.ReportMetadata" : "getReportMetadata()$0",
        "[M]setReportTypeMetadata(reports.ReportTypeMetadata reportTypeMetadata)\tvoid" : "setReportTypeMetadata($0)",
        "[M]setReportExtendedMetadata(reports.ReportExtendedMetadata reportExtendedMetadata)\tvoid" : "setReportExtendedMetadata($0)",
        "[M]setReportMetadata(reports.ReportMetadata reportMetadata)\tvoid" : "setReportMetadata($0)"
    },
    "FeedItemPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[P]isModifiedToken" : "isModifiedToken$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]isModifiedUrl" : "isModifiedUrl$0",
        "[P]items" : "items$0"
    },
    "SparkPlugApi" : {
        "[M]describePlugin(String className)\tProcess.SparkPlugApi.SparkPlugDescribeResult" : "describePlugin($0)",
        "[M]invokePluginWithJson(String className, String parameters)\tString" : "invokePluginWithJson($0)",
        "[M]describePlugins()\tLIST<Process.SparkPlugApi.SparkPlugDescribeResult>" : "describePlugins()$0"
    },
    "FilterOperator" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "Ideas" : {
        "[M]getReadRecentReplies(String userId, String communityId)\tLIST<Id>" : "getReadRecentReplies($0)",
        "[M]findSimilar(SObject idea)\tLIST<Id>" : "findSimilar($0)",
        "[M]getAllRecentReplies(String userId, String communityId)\tLIST<Id>" : "getAllRecentReplies($0)",
        "[M]markRead(String ideaId)\tvoid" : "markRead($0)",
        "[M]getUnreadRecentReplies(String userId, String communityId)\tLIST<Id>" : "getUnreadRecentReplies($0)"
    },
    "IdeaStandardController" : {
        "[M]view()\tSystem.PageReference" : "view()$0",
        "[M]getSubject()\tSObject" : "getSubject()$0",
        "[M]cancel()\tSystem.PageReference" : "cancel()$0",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]edit()\tSystem.PageReference" : "edit()$0",
        "[M]delete()\tSystem.PageReference" : "delete()$0",
        "[M]save()\tSystem.PageReference" : "save()$0",
        "[M]getId()\tString" : "getId()$0",
        "[M]reset()\tvoid" : "reset()$0",
        "[M]addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "[M]getCommentList()\tLIST<IdeaComment>" : "getCommentList()$0"
    },
    "PluginResult" : {
        "[P]outputParameters" : "outputParameters$0"
    },
    "GroupingColumn" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setDataType(String value)\tvoid" : "setDataType($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]setGroupingLevel(Integer groupingLevel)\tvoid" : "setGroupingLevel($0)",
        "[M]setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "[M]getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]getGroupingLevel()\tInteger" : "getGroupingLevel()$0"
    },
    "ChatterConversation" : {
        "[P]members" : "members$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]conversationUrl" : "conversationUrl$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]messages" : "messages$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]conversationId" : "conversationId$0",
        "[P]read" : "read$0"
    },
    "GroupingInfo" : {
        "[M]getName()\tString" : "getName()$0",
        "[M]setDateGranularity(reports.DateGranularity dateGranularity)\tvoid" : "setDateGranularity($0)",
        "[M]getSortOrder()\treports.ColumnSortOrder" : "getSortOrder()$0",
        "[M]setSortOrder(reports.ColumnSortOrder sortOrder)\tvoid" : "setSortOrder($0)",
        "[M]getDateGranularity()\treports.DateGranularity" : "getDateGranularity()$0",
        "[M]setSortOrder(String value)\tvoid" : "setSortOrder($0)",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setDateGranularity(String value)\tvoid" : "setDateGranularity($0)"
    },
    "MentionValidationStatus" : {
        "[P]Ok" : "Ok$0",
        "[P]Inaccessible" : "Inaccessible$0",
        "[P]Disallowed" : "Disallowed$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.MentionValidationStatus>" : "values()$0"
    },
    "SObjectType" : {
        "[M]getDescribe()\tSchema.DescribeSObjectResult" : "getDescribe()$0",
        "[M]newSObject(Id recordTypeId, Boolean loadDefaultValues)\tSObject" : "newSObject($0)",
        "[M]newSObject(Id id)\tSObject" : "newSObject($0)",
        "[M]newSObject()\tSObject" : "newSObject()$0"
    },
    "String" : {
        "[M]containsOnly(String validChars)\tBoolean" : "containsOnly($0)",
        "[M]lastIndexOf(String str)\tInteger" : "lastIndexOf($0)",
        "[M]right(Integer len)\tString" : "right($0)",
        "[M]center(Integer size, String padStr)\tString" : "center($0)",
        "[M]valueOf(Object o)\tString" : "valueOf($0)",
        "[M]swapCase()\tString" : "swapCase()$0",
        "[M]format(String format, LIST<String> arguments)\tString" : "format($0)",
        "[M]unescapeCsv()\tString" : "unescapeCsv()$0",
        "[M]split(String regex, Integer limit)\tLIST<String>" : "split($0)",
        "[M]valueOfGmt(Datetime dt)\tString" : "valueOfGmt($0)",
        "[M]valueOf(Long l)\tString" : "valueOf($0)",
        "[M]leftPad(Integer len, String padStr)\tString" : "leftPad($0)",
        "[M]isAlphaSpace()\tBoolean" : "isAlphaSpace()$0",
        "[M]getLevenshteinDistance(String other, Integer threshold)\tInteger" : "getLevenshteinDistance($0)",
        "[M]getCommonPrefix(LIST strings)\tString" : "getCommonPrefix($0)",
        "[M]isAllLowerCase()\tBoolean" : "isAllLowerCase()$0",
        "[M]indexOfAnyBut(String searchChars)\tInteger" : "indexOfAnyBut($0)",
        "[M]endsWith(String str)\tBoolean" : "endsWith($0)",
        "[M]isNotEmpty(String str)\tBoolean" : "isNotEmpty($0)",
        "[M]left(Integer len)\tString" : "left($0)",
        "[M]valueOf(Decimal d)\tString" : "valueOf($0)",
        "[M]substring(Integer start)\tString" : "substring($0)",
        "[M]replace(String target, String replacement)\tString" : "replace($0)",
        "[M]toUpperCase()\tString" : "toUpperCase()$0",
        "[M]valueOf(Datetime dt)\tString" : "valueOf($0)",
        "[M]lastIndexOfIgnoreCase(String searchStr, Integer startPos)\tInteger" : "lastIndexOfIgnoreCase($0)",
        "[M]rightPad(Integer len)\tString" : "rightPad($0)",
        "[M]escapeSingleQuotes(String s)\tString" : "escapeSingleQuotes($0)",
        "[M]isNumericSpace()\tBoolean" : "isNumericSpace()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]uncapitalize()\tString" : "uncapitalize()$0",
        "[M]escapeEcmaScript()\tString" : "escapeEcmaScript()$0",
        "[M]abbreviate(Integer maxWidth)\tString" : "abbreviate($0)",
        "[M]leftPad(Integer len)\tString" : "leftPad($0)",
        "[M]escapeHtml4()\tString" : "escapeHtml4()$0",
        "[M]remove(String toRemove)\tString" : "remove($0)",
        "[M]valueOf(Double d)\tString" : "valueOf($0)",
        "[M]escapeXml()\tString" : "escapeXml()$0",
        "[M]startsWithIgnoreCase(String prefix)\tBoolean" : "startsWithIgnoreCase($0)",
        "[M]containsAny(String validChars)\tBoolean" : "containsAny($0)",
        "[M]containsWhitespace()\tBoolean" : "containsWhitespace()$0",
        "[M]isEmpty(String str)\tBoolean" : "isEmpty($0)",
        "[M]isAsciiPrintable()\tBoolean" : "isAsciiPrintable()$0",
        "[M]countMatches(String searchStr)\tInteger" : "countMatches($0)",
        "[M]startsWith(String str)\tBoolean" : "startsWith($0)",
        "[M]overlay(String overlay, Integer start, Integer end)\tString" : "overlay($0)",
        "[M]substringBetween(String tag)\tString" : "substringBetween($0)",
        "[M]rightPad(Integer len, String padStr)\tString" : "rightPad($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]valueOf(Integer i)\tString" : "valueOf($0)",
        "[M]length()\tInteger" : "length()$0",
        "[M]isBlank(String str)\tBoolean" : "isBlank($0)",
        "[M]indexOf(String str, Integer startPos)\tInteger" : "indexOf($0)",
        "[M]endsWithIgnoreCase(String suffix)\tBoolean" : "endsWithIgnoreCase($0)",
        "[M]substringBefore(String separator)\tString" : "substringBefore($0)",
        "[M]isAllUpperCase()\tBoolean" : "isAllUpperCase()$0",
        "[M]substring(Integer start, Integer end)\tString" : "substring($0)",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]unescapeEcmaScript()\tString" : "unescapeEcmaScript()$0",
        "[M]compareTo(String str)\tInteger" : "compareTo($0)",
        "[M]substringBetween(String open, String close)\tString" : "substringBetween($0)",
        "[M]indexOfIgnoreCase(String searchStr)\tInteger" : "indexOfIgnoreCase($0)",
        "[M]toLowerCase(String locale)\tString" : "toLowerCase($0)",
        "[M]reverse()\tString" : "reverse()$0",
        "[M]difference(String other)\tString" : "difference($0)",
        "[M]repeat(String separator, Integer numTimes)\tString" : "repeat($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]toLowerCase()\tString" : "toLowerCase()$0",
        "[M]escapeCsv()\tString" : "escapeCsv()$0",
        "[M]isNumeric()\tBoolean" : "isNumeric()$0",
        "[M]deleteWhitespace()\tString" : "deleteWhitespace()$0",
        "[M]valueOf(Date d)\tString" : "valueOf($0)",
        "[M]mid(Integer pos, Integer len)\tString" : "mid($0)",
        "[M]equals(String other)\tBoolean" : "equals($0)",
        "[M]lastIndexOfIgnoreCase(String searchStr)\tInteger" : "lastIndexOfIgnoreCase($0)",
        "[M]isAlphanumericSpace()\tBoolean" : "isAlphanumericSpace()$0",
        "[M]splitByCharacterTypeCamelCase()\tLIST<String>" : "splitByCharacterTypeCamelCase()$0",
        "[M]removeStart(String toRemove)\tString" : "removeStart($0)",
        "[M]isAlphanumeric()\tBoolean" : "isAlphanumeric()$0",
        "[M]substringAfter(String separator)\tString" : "substringAfter($0)",
        "[M]unescapeHtml4()\tString" : "unescapeHtml4()$0",
        "[M]repeat(Integer numTimes)\tString" : "repeat($0)",
        "[M]isWhitespace()\tBoolean" : "isWhitespace()$0",
        "[M]isAlpha()\tBoolean" : "isAlpha()$0",
        "[M]unescapeHtml3()\tString" : "unescapeHtml3()$0",
        "[M]replaceAll(String regex, String replacement)\tString" : "replaceAll($0)",
        "[M]getLevenshteinDistance(String other)\tInteger" : "getLevenshteinDistance($0)",
        "[M]escapeHtml3()\tString" : "escapeHtml3()$0",
        "[M]stripHtmlTags()\tString" : "stripHtmlTags()$0",
        "[M]unescapeXml()\tString" : "unescapeXml()$0",
        "[M]center(Integer size)\tString" : "center($0)",
        "[M]replaceFirst(String regex, String replacement)\tString" : "replaceFirst($0)",
        "[M]equalsIgnoreCase(String other)\tBoolean" : "equalsIgnoreCase($0)",
        "[M]indexOf(String str)\tInteger" : "indexOf($0)",
        "[M]contains(String str)\tBoolean" : "contains($0)",
        "[M]removeEndIgnoreCase(String toRemove)\tString" : "removeEndIgnoreCase($0)",
        "[M]fromCharArray(LIST<Integer> charArr)\tString" : "fromCharArray($0)",
        "[M]trim()\tString" : "trim()$0",
        "[M]normalizeSpace()\tString" : "normalizeSpace()$0",
        "[M]lastIndexOf(String searchStr, Integer startPos)\tInteger" : "lastIndexOf($0)",
        "[M]substringAfterLast(String separator)\tString" : "substringAfterLast($0)",
        "[M]removeEnd(String toRemove)\tString" : "removeEnd($0)",
        "[M]indexOfIgnoreCase(String searchStr, Integer startPos)\tInteger" : "indexOfIgnoreCase($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]capitalize()\tString" : "capitalize()$0",
        "[M]join(APEX_OBJECT iterableObj, String separator)\tString" : "join($0)",
        "[M]isNotBlank(String str)\tBoolean" : "isNotBlank($0)",
        "[M]splitByCharacterType()\tLIST<String>" : "splitByCharacterType()$0",
        "[M]removeStartIgnoreCase(String toRemove)\tString" : "removeStartIgnoreCase($0)",
        "[M]abbreviate(Integer maxWidth, Integer offset)\tString" : "abbreviate($0)",
        "[M]containsNone(String invalidChars)\tBoolean" : "containsNone($0)",
        "[M]substringBeforeLast(String separator)\tString" : "substringBeforeLast($0)",
        "[M]containsIgnoreCase(String searchStr)\tBoolean" : "containsIgnoreCase($0)",
        "[M]indexOfDifference(String other)\tInteger" : "indexOfDifference($0)",
        "[M]indexOfAny(String searchChars)\tInteger" : "indexOfAny($0)",
        "[M]split(String regex)\tLIST<String>" : "split($0)",
        "[M]toUpperCase(String locale)\tString" : "toUpperCase($0)"
    },
    "ChatterGroups" : {
        "[M]setTestSearchGroups(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "[M]searchGroups(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "[M]updateMyChatterSettings(String communityId, String groupId, ConnectApi.GroupEmailFrequency emailFrequency)\tConnectApi.GroupChatterSettings" : "updateMyChatterSettings($0)",
        "[M]getGroups(String communityId)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "[M]getMember(String communityId, String membershipId)\tConnectApi.GroupMember" : "getMember($0)",
        "[M]getFollowings(String communityId, String groupId, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getGroup(String communityId, String groupId)\tConnectApi.ChatterGroupDetail" : "getGroup($0)",
        "[M]deleteMember(String communityId, String membershipId)\tvoid" : "deleteMember($0)",
        "[M]getGroups(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "[M]getPhoto(String communityId, String groupId)\tConnectApi.Photo" : "getPhoto($0)",
        "[M]deletePhoto(String communityId, String groupId)\tvoid" : "deletePhoto($0)",
        "[M]updateGroup(String communityId, String groupId, ConnectApi.ChatterGroupInput groupInput)\tConnectApi.ChatterGroupDetail" : "updateGroup($0)",
        "[M]getFollowings(String communityId, String groupId, String filterType)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]deleteGroup(String communityId, String groupId)\tvoid" : "deleteGroup($0)",
        "[M]addMember(String communityId, String groupId, String userId)\tConnectApi.GroupMember" : "addMember($0)",
        "[M]setPhoto(String communityId, String groupId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhoto($0)",
        "[M]getFollowings(String communityId, String groupId, String filterType, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]updateRequestStatus(String communityId, String requestId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequest" : "updateRequestStatus($0)",
        "[M]updateGroupMember(String communityId, String membershipId, ConnectApi.GroupMembershipType role)\tConnectApi.GroupMember" : "updateGroupMember($0)",
        "[M]follow(String communityId, String groupId, String subjectId)\tConnectApi.Subscription" : "follow($0)",
        "[M]getFollowings(String communityId, String groupId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]createGroup(String communityId, ConnectApi.ChatterGroupInput groupInput)\tConnectApi.ChatterGroupDetail" : "createGroup($0)",
        "[M]setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "[M]getMembers(String communityId, String groupId)\tConnectApi.GroupMemberPage" : "getMembers($0)",
        "[M]setTestSearchGroups(String communityId, String q, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "[M]getGroups(String communityId, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "[M]getFollowings(String communityId, String groupId)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getGroupMembershipRequest(String communityId, String requestId)\tConnectApi.GroupMembershipRequest" : "getGroupMembershipRequest($0)",
        "[M]getMyChatterSettings(String communityId, String groupId)\tConnectApi.GroupChatterSettings" : "getMyChatterSettings($0)",
        "[M]setTestSearchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "[M]getGroupMembershipRequests(String communityId, String groupId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequests" : "getGroupMembershipRequests($0)",
        "[M]searchGroups(String communityId, String q)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "[M]getGroupMembershipRequests(String communityId, String groupId)\tConnectApi.GroupMembershipRequests" : "getGroupMembershipRequests($0)",
        "[M]addMemberWithRole(String communityId, String groupId, String userId, ConnectApi.GroupMembershipType role)\tConnectApi.GroupMember" : "addMemberWithRole($0)",
        "[M]searchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "[M]setPhoto(String communityId, String groupId, String fileId, Integer versionNumber)\tConnectApi.Photo" : "setPhoto($0)",
        "[M]setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "[M]getFollowings(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "[M]getMembers(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.GroupMemberPage" : "getMembers($0)",
        "[M]requestGroupMembership(String communityId, String groupId)\tConnectApi.GroupMembershipRequest" : "requestGroupMembership($0)"
    },
    "Matcher" : {
        "[M]useAnchoringBounds(Boolean b)\tsystem.Matcher" : "useAnchoringBounds($0)",
        "[M]group()\tString" : "group()$0",
        "[M]regionStart()\tInteger" : "regionStart()$0",
        "[M]pattern()\tsystem.Pattern" : "pattern()$0",
        "[M]hasTransparentBounds()\tBoolean" : "hasTransparentBounds()$0",
        "[M]reset(String input)\tsystem.Matcher" : "reset($0)",
        "[M]usePattern(system.Pattern p)\tsystem.Matcher" : "usePattern($0)",
        "[M]quoteReplacement(String s)\tString" : "quoteReplacement($0)",
        "[M]find(Integer start)\tBoolean" : "find($0)",
        "[M]start(Integer grp)\tInteger" : "start($0)",
        "[M]groupCount()\tInteger" : "groupCount()$0",
        "[M]end(Integer grp)\tInteger" : "end($0)",
        "[M]find()\tBoolean" : "find()$0",
        "[M]start()\tInteger" : "start()$0",
        "[M]reset()\tsystem.Matcher" : "reset()$0",
        "[M]useTransparentBounds(Boolean b)\tsystem.Matcher" : "useTransparentBounds($0)",
        "[M]region(Integer start, Integer ending)\tsystem.Matcher" : "region($0)",
        "[M]requireEnd()\tBoolean" : "requireEnd()$0",
        "[M]matches()\tBoolean" : "matches()$0",
        "[M]lookingAt()\tBoolean" : "lookingAt()$0",
        "[M]end()\tInteger" : "end()$0",
        "[M]hasAnchoringBounds()\tBoolean" : "hasAnchoringBounds()$0",
        "[M]hitEnd()\tBoolean" : "hitEnd()$0",
        "[M]group(Integer start)\tString" : "group($0)",
        "[M]regionEnd()\tInteger" : "regionEnd()$0",
        "[M]replaceAll(String replacement)\tString" : "replaceAll($0)",
        "[M]replaceFirst(String replacement)\tString" : "replaceFirst($0)"
    },
    "RecordView" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]sections" : "sections$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "FeedItemVisibilityType" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]InternalUsers" : "InternalUsers$0",
        "[M]values()\tLIST<ConnectApi.FeedItemVisibilityType>" : "values()$0",
        "[P]AllUsers" : "AllUsers$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "FeedFavorite" : {
        "[P]target" : "target$0",
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]community" : "community$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]user" : "user$0",
        "[P]createdBy" : "createdBy$0",
        "[P]lastViewDate" : "lastViewDate$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]id" : "id$0",
        "[P]feedUrl" : "feedUrl$0",
        "[P]searchText" : "searchText$0",
        "[P]url" : "url$0"
    },
    "Features" : {
        "[P]chatterGlobalInfluence" : "chatterGlobalInfluence$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]thanksAllowed" : "thanksAllowed$0",
        "[P]mobileNotificationsEnabled" : "mobileNotificationsEnabled$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]publisherActions" : "publisherActions$0",
        "[P]communityModeration" : "communityModeration$0",
        "[P]viralInvitesAllowed" : "viralInvitesAllowed$0",
        "[P]chatter" : "chatter$0",
        "[P]defaultCurrencyIsoCode" : "defaultCurrencyIsoCode$0",
        "[P]filesOnComments" : "filesOnComments$0",
        "[P]connectRecords" : "connectRecords$0",
        "[P]feedPolling" : "feedPolling$0",
        "[P]chatterTopics" : "chatterTopics$0",
        "[P]files" : "files$0",
        "[P]ideas" : "ideas$0",
        "[P]chatterActivity" : "chatterActivity$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]groupsCanFollow" : "groupsCanFollow$0",
        "[P]multiCurrency" : "multiCurrency$0",
        "[P]chatterAnswers" : "chatterAnswers$0",
        "[P]dashboardComponentSnapshots" : "dashboardComponentSnapshots$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]trendingTopics" : "trendingTopics$0",
        "[P]chatterMessages" : "chatterMessages$0"
    },
    "CompoundRecordField" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]fields" : "fields$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Severity" : {
        "[M]values()\tLIST<ApexPages.Severity>" : "values()$0",
        "[P]WARNING" : "WARNING$0",
        "[P]INFO" : "INFO$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]FATAL" : "FATAL$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ERROR" : "ERROR$0",
        "[P]CONFIRM" : "CONFIRM$0"
    },
    "Zone" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]visibility" : "visibility$0",
        "[P]name" : "name$0",
        "[P]isChatterAnswers" : "isChatterAnswers$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]description" : "description$0",
        "[P]visibilityId" : "visibilityId$0",
        "[P]isActive" : "isActive$0"
    },
    "Subscription" : {
        "[P]subject" : "subject$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]subscriber" : "subscriber$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[P]community" : "community$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]url" : "url$0"
    },
    "FeedFavoriteType" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ListView" : "ListView$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Topic" : "Topic$0",
        "[M]values()\tLIST<ConnectApi.FeedFavoriteType>" : "values()$0",
        "[P]Search" : "Search$0"
    },
    "Integer" : {
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]valueOf(Object o)\tInteger" : "valueOf($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]format()\tString" : "format()$0",
        "[M]valueOf(String i)\tInteger" : "valueOf($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "EmailMessageDirection" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Outbound" : "Outbound$0",
        "[P]Inbound" : "Inbound$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.EmailMessageDirection>" : "values()$0"
    },
    "Test" : {
        "[M]invokePage(System.PageReference p)\tComponent.apex.page" : "invokePage($0)",
        "[M]loadData(Schema.SObjectType sobjectType, String staticResourceName)\tLIST<SObject>" : "loadData($0)",
        "[M]testInstall(system.InstallHandler script, system.Version version, Boolean isPush)\tvoid" : "testInstall($0)",
        "[M]isRunningTest()\tBoolean" : "isRunningTest()$0",
        "[M]testUninstall(system.UninstallHandler script)\tvoid" : "testUninstall($0)",
        "[M]stopTest()\tvoid" : "stopTest()$0",
        "[M]setCurrentPage(Object pageReference)\tvoid" : "setCurrentPage($0)",
        "[M]startTest()\tvoid" : "startTest()$0",
        "[M]setCurrentPageReference(Object pageReference)\tvoid" : "setCurrentPageReference($0)",
        "[M]setMock(system.Type interfaceType, Object mock)\tvoid" : "setMock($0)",
        "[M]setReadOnlyApplicationMode(Boolean readOnlyApplicationMode)\tvoid" : "setReadOnlyApplicationMode($0)",
        "[M]setFixedSearchResults(LIST<String> searchResultsIds)\tvoid" : "setFixedSearchResults($0)",
        "[M]testInstall(system.InstallHandler script, system.Version version)\tvoid" : "testInstall($0)"
    },
    "SecurityException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "DescribeSObjectResult" : {
        "[M]isAccessible()\tBoolean" : "isAccessible()$0",
        "[M]isMergeable()\tBoolean" : "isMergeable()$0",
        "[M]isCustomSetting()\tBoolean" : "isCustomSetting()$0",
        "[M]getFieldSets()\tSchema.SObjectTypeFieldSets" : "getFieldSets()$0",
        "[M]getRecordTypeInfosByName()\tMAP<String,Schema.RecordTypeInfo>" : "getRecordTypeInfosByName()$0",
        "[M]isQueryable()\tBoolean" : "isQueryable()$0",
        "[M]isSearchable()\tBoolean" : "isSearchable()$0",
        "[M]getKeyPrefix()\tString" : "getKeyPrefix()$0",
        "[M]getRecordTypeInfosById()\tMAP<Id,Schema.RecordTypeInfo>" : "getRecordTypeInfosById()$0",
        "[M]isFeedEnabled()\tBoolean" : "isFeedEnabled()$0",
        "[M]isCreateable()\tBoolean" : "isCreateable()$0",
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getLocalName()\tString" : "getLocalName()$0",
        "[M]isUndeletable()\tBoolean" : "isUndeletable()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]isCustom()\tBoolean" : "isCustom()$0",
        "[M]getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "[M]getChildRelationships()\tLIST<Schema.ChildRelationship>" : "getChildRelationships()$0",
        "[M]isUpdateable()\tBoolean" : "isUpdateable()$0",
        "[M]getFields()\tSchema.SObjectTypeFields" : "getFields()$0",
        "[M]getLabelPlural()\tString" : "getLabelPlural()$0",
        "[M]isDeletable()\tBoolean" : "isDeletable()$0",
        "[M]getRecordTypeInfos()\tLIST<Schema.RecordTypeInfo>" : "getRecordTypeInfos()$0",
        "[M]isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0"
    },
    "CommentType" : {
        "[M]values()\tLIST<ConnectApi.CommentType>" : "values()$0",
        "[P]TextComment" : "TextComment$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]ContentComment" : "ContentComment$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Reference" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]url" : "url$0"
    },
    "InvalidHeaderException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "TextAttachment" : {
        "[P]charset" : "charset$0",
        "[P]mimeTypeSubType" : "mimeTypeSubType$0",
        "[P]bodyIsTruncated" : "bodyIsTruncated$0",
        "[P]body" : "body$0",
        "[P]fileName" : "fileName$0"
    },
    "FieldSetMember" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getType()\tSchema.DisplayType" : "getType()$0",
        "[M]getRequired()\tBoolean" : "getRequired()$0",
        "[M]getFieldPath()\tString" : "getFieldPath()$0",
        "[M]getDbRequired()\tBoolean" : "getDbRequired()$0"
    },
    "Chatter" : {
        "[M]getFollowers(String communityId, String recordId)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "[M]deleteSubscription(String communityId, String subscriptionId)\tvoid" : "deleteSubscription($0)",
        "[M]getSubscription(String communityId, String subscriptionId)\tConnectApi.Subscription" : "getSubscription($0)",
        "[M]getFollowers(String communityId, String recordId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage" : "getFollowers($0)"
    },
    "DetailColumn" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setDataType(String value)\tvoid" : "setDataType($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "[M]getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "[M]setName(String name)\tvoid" : "setName($0)"
    },
    "CaseCommentEventType" : {
        "[P]NewPublishedByCustomer" : "NewPublishedByCustomer$0",
        "[M]values()\tLIST<ConnectApi.CaseCommentEventType>" : "values()$0",
        "[P]PublishExisting" : "PublishExisting$0",
        "[P]UnpublishExsiting" : "UnpublishExsiting$0",
        "[P]NewPublished" : "NewPublished$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]NewInternal" : "NewInternal$0",
        "[P]UnpublishExistingByCustomer" : "UnpublishExistingByCustomer$0",
        "[P]PublishExistingByCustomer" : "PublishExistingByCustomer$0"
    },
    "ContentAttachment" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]isInMyFileSync" : "isInMyFileSync$0",
        "[P]fileSize" : "fileSize$0",
        "[P]mimeType" : "mimeType$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]checksum" : "checksum$0",
        "[P]fileExtension" : "fileExtension$0",
        "[P]hasPdfPreview" : "hasPdfPreview$0",
        "[P]description" : "description$0",
        "[P]id" : "id$0",
        "[P]renditionUrl" : "renditionUrl$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]fileType" : "fileType$0",
        "[P]hasImagePreview" : "hasImagePreview$0",
        "[P]downloadUrl" : "downloadUrl$0",
        "[P]title" : "title$0",
        "[P]versionId" : "versionId$0"
    },
    "PicklistRecordField" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "HashtagSegment" : {
        "[P]tag" : "tag$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]topicUrl" : "topicUrl$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]url" : "url$0"
    },
    "ReportDataCell" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]setValue(Object value)\tvoid" : "setValue($0)",
        "[M]getValue()\tObject" : "getValue()$0",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "Mentions" : {
        "[M]setTestGetMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize, ConnectApi.MentionCompletionPage result)\tvoid" : "setTestGetMentionCompletions($0)",
        "[M]getMentionValidations(String communityId, String parentId, LIST<String> recordIds, ConnectApi.FeedItemVisibilityType visibility)\tConnectApi.MentionValidations" : "getMentionValidations($0)",
        "[M]getMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize)\tConnectApi.MentionCompletionPage" : "getMentionCompletions($0)",
        "[M]getMentionCompletions(String communityId, String q, String contextId)\tConnectApi.MentionCompletionPage" : "getMentionCompletions($0)",
        "[M]setTestGetMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionPage result)\tvoid" : "setTestGetMentionCompletions($0)"
    },
    "CaseActorType" : {
        "[P]CustomerService" : "CustomerService$0",
        "[M]values()\tLIST<ConnectApi.CaseActorType>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Customer" : "Customer$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ListException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "GroupingValue" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getKey()\tString" : "getKey()$0",
        "[M]getGroupings()\tLIST<reports.GroupingValue>" : "getGroupings()$0",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]setGroupings(LIST<reports.GroupingValue> groupings)\tvoid" : "setGroupings($0)",
        "[M]setValue(Object value)\tvoid" : "setValue($0)",
        "[M]setKey(String key)\tvoid" : "setKey($0)",
        "[M]getValue()\tObject" : "getValue()$0"
    },
    "ReportLinkFormula" : {
        "[M]setUrl(String url)\tvoid" : "setUrl($0)",
        "[M]getText()\tString" : "getText()$0",
        "[M]setTarget(String target)\tvoid" : "setTarget($0)",
        "[M]setImage(reports.ReportImageFormula image)\tvoid" : "setImage($0)",
        "[M]getTarget()\tString" : "getTarget()$0",
        "[M]getUrl()\tString" : "getUrl()$0",
        "[M]getImage()\treports.ReportImageFormula" : "getImage()$0",
        "[M]setText(String text)\tvoid" : "setText($0)"
    },
    "ReferenceWithDateRecordField" : {
        "[P]dateValue" : "dateValue$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]reference" : "reference$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "BatchableContextImpl" : {
        "[M]getJobId()\tId" : "getJobId()$0",
        "[M]getChildJobId()\tId" : "getChildJobId()$0"
    },
    "DisplayType" : {
        "[P]CURRENCY" : "CURRENCY$0",
        "[P]STRING" : "STRING$0",
        "[P]ENCRYPTEDSTRING" : "ENCRYPTEDSTRING$0",
        "[P]BOOLEAN" : "BOOLEAN$0",
        "[P]TIME" : "TIME$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]DATETIME" : "DATETIME$0",
        "[P]PICKLIST" : "PICKLIST$0",
        "[P]PHONE" : "PHONE$0",
        "[P]DATACATEGORYGROUPREFERENCE" : "DATACATEGORYGROUPREFERENCE$0",
        "[P]ANYTYPE" : "ANYTYPE$0",
        "[P]DOUBLE" : "DOUBLE$0",
        "[P]PERCENT" : "PERCENT$0",
        "[P]COMBOBOX" : "COMBOBOX$0",
        "[P]MULTIPICKLIST" : "MULTIPICKLIST$0",
        "[P]LOCATION" : "LOCATION$0",
        "[P]TEXTAREA" : "TEXTAREA$0",
        "[P]COMPLEXVALUE" : "COMPLEXVALUE$0",
        "[P]INTEGER" : "INTEGER$0",
        "[M]values()\tLIST<Schema.DisplayType>" : "values()$0",
        "[P]DATE" : "DATE$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ID" : "ID$0",
        "[P]REFERENCE" : "REFERENCE$0",
        "[P]EMAIL" : "EMAIL$0",
        "[P]BASE64" : "BASE64$0",
        "[P]URL" : "URL$0"
    },
    "ChatterActivity" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]likeReceivedCount" : "likeReceivedCount$0",
        "[P]commentCount" : "commentCount$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]commentReceivedCount" : "commentReceivedCount$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]postCount" : "postCount$0"
    },
    "RateLimitException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0",
        "[M]getErrorCode()\tString" : "getErrorCode()$0"
    },
    "SObjectException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ReportManager" : {
        "[M]runReport(Id reportId)\treports.ReportResults" : "runReport($0)",
        "[M]describeReport(Id reportId)\treports.ReportDescribeResult" : "describeReport($0)",
        "[M]runReport(Id reportId, Boolean includeDetails)\treports.ReportResults" : "runReport($0)"
    },
    "InboundEmail" : {
        "[P]replyTo" : "replyTo$0",
        "[P]plainTextBody" : "plainTextBody$0",
        "[P]references" : "references$0",
        "[P]htmlBodyIsTruncated" : "htmlBodyIsTruncated$0",
        "[P]fromName" : "fromName$0",
        "[P]toAddresses" : "toAddresses$0",
        "[P]subject" : "subject$0",
        "[P]plainTextBodyIsTruncated" : "plainTextBodyIsTruncated$0",
        "[P]inReplyTo" : "inReplyTo$0",
        "[P]fromAddress" : "fromAddress$0",
        "[P]messageId" : "messageId$0",
        "[P]binaryAttachments" : "binaryAttachments$0",
        "[P]ccAddresses" : "ccAddresses$0",
        "[P]headers" : "headers$0",
        "[P]textAttachments" : "textAttachments$0",
        "[P]htmlBody" : "htmlBody$0"
    },
    "NoDataFoundException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "GroupChatterSettings" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]emailFrequency" : "emailFrequency$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "QuickActionRequest" : {
        "[M]setContextId(Id param1)\tvoid" : "setContextId($0)",
        "[M]setQuickActionName(String param1)\tvoid" : "setQuickActionName($0)",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]getQuickActionName()\tString" : "getQuickActionName()$0",
        "[M]getContextId()\tId" : "getContextId()$0",
        "[M]setRecord(SObject param1)\tvoid" : "setRecord($0)"
    },
    "StaticResourceCalloutMock" : {
        "[M]setStatusCode(Integer code)\tvoid" : "setStatusCode($0)",
        "[M]respond(System.HttpRequest request)\tSystem.HttpResponse" : "respond($0)",
        "[M]setStatus(String status)\tvoid" : "setStatus($0)",
        "[M]setStaticResource(String staticResourceName)\tvoid" : "setStaticResource($0)",
        "[M]setHeader(String key, String val)\tvoid" : "setHeader($0)"
    },
    "Double" : {
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]valueOf(String str)\tDouble" : "valueOf($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]round()\tLong" : "round()$0",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]valueOf(Object o)\tDouble" : "valueOf($0)",
        "[M]format()\tString" : "format()$0",
        "[M]longValue()\tLong" : "longValue()$0",
        "[M]intValue()\tInteger" : "intValue()$0",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "DescribeTabResult" : {
        "[M]getIcons()\tLIST<Schema.DescribeIconResult>" : "getIcons()$0",
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]isCustom()\tBoolean" : "isCustom()$0",
        "[M]getSobjectName()\tString" : "getSobjectName()$0",
        "[M]getIconUrl()\tString" : "getIconUrl()$0",
        "[M]getMiniIconUrl()\tString" : "getMiniIconUrl()$0",
        "[M]getUrl()\tString" : "getUrl()$0",
        "[M]getColors()\tLIST<Schema.DescribeColorResult>" : "getColors()$0"
    },
    "AggregateColumn" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]setName(String name)\tvoid" : "setName($0)",
        "[M]setDataType(String value)\tvoid" : "setDataType($0)",
        "[M]setAcrossGroupingContext(String acrossGroupingContext)\tvoid" : "setAcrossGroupingContext($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)",
        "[M]getAcrossGroupingContext()\tString" : "getAcrossGroupingContext()$0",
        "[M]setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "[M]getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "[M]getDownGroupingContext()\tString" : "getDownGroupingContext()$0",
        "[M]setDownGroupingContext(String downGroupingContext)\tvoid" : "setDownGroupingContext($0)"
    },
    "JSONParser" : {
        "[M]getBlobValue()\tBlob" : "getBlobValue()$0",
        "[M]getTimeValue()\tTime" : "getTimeValue()$0",
        "[M]getLongValue()\tLong" : "getLongValue()$0",
        "[M]hasCurrentToken()\tBoolean" : "hasCurrentToken()$0",
        "[M]readValueAs(system.Type apexType)\tObject" : "readValueAs($0)",
        "[M]getDoubleValue()\tDouble" : "getDoubleValue()$0",
        "[M]getIdValue()\tId" : "getIdValue()$0",
        "[M]getDateTimeValue()\tDatetime" : "getDateTimeValue()$0",
        "[M]clearCurrentToken()\tvoid" : "clearCurrentToken()$0",
        "[M]getText()\tString" : "getText()$0",
        "[M]getCurrentName()\tString" : "getCurrentName()$0",
        "[M]skipChildren()\tvoid" : "skipChildren()$0",
        "[M]getIntegerValue()\tInteger" : "getIntegerValue()$0",
        "[M]getLastClearedToken()\tsystem.JSONToken" : "getLastClearedToken()$0",
        "[M]getCurrentToken()\tsystem.JSONToken" : "getCurrentToken()$0",
        "[M]getDateValue()\tDate" : "getDateValue()$0",
        "[M]nextToken()\tsystem.JSONToken" : "nextToken()$0",
        "[M]getDecimalValue()\tDecimal" : "getDecimalValue()$0",
        "[M]getBooleanValue()\tBoolean" : "getBooleanValue()$0",
        "[M]nextValue()\tsystem.JSONToken" : "nextValue()$0",
        "[M]readValueAsStrict(system.Type apexType)\tObject" : "readValueAsStrict($0)"
    },
    "FeedFavorites" : {
        "[P]favorites" : "favorites$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "LoggingLevel" : {
        "[P]FINER" : "FINER$0",
        "[P]INFO" : "INFO$0",
        "[M]values()\tLIST<system.LoggingLevel>" : "values()$0",
        "[P]DEBUG" : "DEBUG$0",
        "[P]INTERNAL" : "INTERNAL$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]FINE" : "FINE$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ERROR" : "ERROR$0",
        "[P]WARN" : "WARN$0",
        "[P]FINEST" : "FINEST$0"
    },
    "LimitException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "AbstractRecordField" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "DmlException" : {
        "[M]getDmlFields(Integer index)\tLIST<Schema.SObjectField>" : "getDmlFields($0)",
        "[M]getDmlMessage(Integer index)\tString" : "getDmlMessage($0)",
        "[M]getDmlIndex(Integer index)\tInteger" : "getDmlIndex($0)",
        "[M]getDmlId(Integer index)\tString" : "getDmlId($0)",
        "[M]getDmlFieldNames(Integer index)\tLIST<String>" : "getDmlFieldNames($0)",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getDmlType(Integer index)\tsystem.StatusCode" : "getDmlType($0)",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0",
        "[M]getNumDml()\tInteger" : "getNumDml()$0",
        "[M]getDmlStatusCode(Integer index)\tString" : "getDmlStatusCode($0)"
    },
    "SearchException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ReportFormat" : {
        "[P]MULTI_BLOCK" : "MULTI_BLOCK$0",
        "[P]TABULAR" : "TABULAR$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]SUMMARY" : "SUMMARY$0",
        "[M]values()\tLIST<reports.ReportFormat>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]MATRIX" : "MATRIX$0"
    },
    "AppLauncherApexController" : {
        "[M]getApps()\tLIST<AppMenuItem>" : "getApps()$0"
    },
    "LicenseException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "Email" : {
        "[M]getSubject()\tString" : "getSubject()$0",
        "[M]getUseSignature()\tBoolean" : "getUseSignature()$0",
        "[M]setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "[M]setSubject(String param1)\tvoid" : "setSubject($0)",
        "[M]setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "[M]getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "[M]getReplyTo()\tString" : "getReplyTo()$0",
        "[M]setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "[M]getBccSender()\tBoolean" : "getBccSender()$0",
        "[M]setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "[M]setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "[M]getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "[M]getEmailPriority()\tString" : "getEmailPriority()$0",
        "[M]setReplyTo(String param1)\tvoid" : "setReplyTo($0)"
    },
    "DateRecordField" : {
        "[P]dateValue" : "dateValue$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Error" : {
        "[M]getFields()\tLIST<String>" : "getFields()$0",
        "[M]getStatusCode()\tsystem.StatusCode" : "getStatusCode()$0",
        "[M]getMessage()\tString" : "getMessage()$0"
    },
    "FieldChangeSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "EmailHeader" : {
        "[P]TriggerOtherEmail" : "TriggerOtherEmail$0",
        "[P]TriggerAutoResponseEmail" : "TriggerAutoResponseEmail$0",
        "[P]TriggerUserEmail" : "TriggerUserEmail$0"
    },
    "QuickActionResult" : {
        "[M]getIds()\tLIST<Id>" : "getIds()$0",
        "[M]isCreated()\tBoolean" : "isCreated()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "ResetPasswordResult" : {
        "[M]getPassword()\tString" : "getPassword()$0"
    },
    "JSONGenerator" : {
        "[M]writeDateTimeField(String fieldName, Datetime dt)\tvoid" : "writeDateTimeField($0)",
        "[M]writeDateTime(Datetime dt)\tvoid" : "writeDateTime($0)",
        "[M]writeNumber(Long lng)\tvoid" : "writeNumber($0)",
        "[M]writeTime(Time t)\tvoid" : "writeTime($0)",
        "[M]writeNumber(Integer i)\tvoid" : "writeNumber($0)",
        "[M]writeNumber(Decimal d)\tvoid" : "writeNumber($0)",
        "[M]writeNone()\tvoid" : "writeNone()$0",
        "[M]writeBooleanField(String fieldName, Boolean b)\tvoid" : "writeBooleanField($0)",
        "[M]writeStartObject()\tvoid" : "writeStartObject()$0",
        "[M]writeDateField(String fieldName, Date d)\tvoid" : "writeDateField($0)",
        "[M]writeEndArray()\tvoid" : "writeEndArray()$0",
        "[M]writeId(Id id)\tvoid" : "writeId($0)",
        "[M]writeBlob(Blob b)\tvoid" : "writeBlob($0)",
        "[M]writeIdField(String fieldName, Id id)\tvoid" : "writeIdField($0)",
        "[M]writeNumber(Double d)\tvoid" : "writeNumber($0)",
        "[M]writeNumberField(String fieldName, Long lng)\tvoid" : "writeNumberField($0)",
        "[M]writeNoneField(String fieldName)\tvoid" : "writeNoneField($0)",
        "[M]writeBoolean(Boolean b)\tvoid" : "writeBoolean($0)",
        "[M]writeNumberField(String fieldName, Integer i)\tvoid" : "writeNumberField($0)",
        "[M]writeString(String str)\tvoid" : "writeString($0)",
        "[M]getAsString()\tString" : "getAsString()$0",
        "[M]writeFieldName(String fieldName)\tvoid" : "writeFieldName($0)",
        "[M]isClosed()\tBoolean" : "isClosed()$0",
        "[M]writeObject(Object o)\tvoid" : "writeObject($0)",
        "[M]writeNumberField(String fieldName, Double d)\tvoid" : "writeNumberField($0)",
        "[M]close()\tvoid" : "close()$0",
        "[M]writeDate(Date d)\tvoid" : "writeDate($0)",
        "[M]writeBlobField(String fieldName, Blob b)\tvoid" : "writeBlobField($0)",
        "[M]writeEndObject()\tvoid" : "writeEndObject()$0",
        "[M]writeTimeField(String fieldName, Time t)\tvoid" : "writeTimeField($0)",
        "[M]writeStartArray()\tvoid" : "writeStartArray()$0",
        "[M]writeNumberField(String fieldName, Decimal d)\tvoid" : "writeNumberField($0)",
        "[M]writeStringField(String fieldName, String str)\tvoid" : "writeStringField($0)",
        "[M]writeObjectField(String fieldName, Object o)\tvoid" : "writeObjectField($0)"
    },
    "BinaryInput" : {
        "[M]getFilename()\tString" : "getFilename()$0",
        "[M]getBlobValue()\tBlob" : "getBlobValue()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getContentType()\tString" : "getContentType()$0"
    },
    "CommentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]attachment" : "attachment$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]body" : "body$0"
    },
    "File" : {
        "[P]renditionUrl240By180" : "renditionUrl240By180$0",
        "[P]sharingRole" : "sharingRole$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]isInMyFileSync" : "isInMyFileSync$0",
        "[P]mimeType" : "mimeType$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]renditionUrl720By480" : "renditionUrl720By480$0",
        "[P]fileExtension" : "fileExtension$0",
        "[P]contentSize" : "contentSize$0",
        "[P]flashRenditionStatus" : "flashRenditionStatus$0",
        "[P]description" : "description$0",
        "[P]versionNumber" : "versionNumber$0",
        "[P]thumb240By180RenditionStatus" : "thumb240By180RenditionStatus$0",
        "[P]downloadUrl" : "downloadUrl$0",
        "[P]modifiedDate" : "modifiedDate$0",
        "[P]thumb720By480RenditionStatus" : "thumb720By480RenditionStatus$0",
        "[P]checksum" : "checksum$0",
        "[P]fileType" : "fileType$0",
        "[P]publishStatus" : "publishStatus$0",
        "[P]renditionUrl" : "renditionUrl$0",
        "[P]pdfRenditionStatus" : "pdfRenditionStatus$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]contentUrl" : "contentUrl$0",
        "[P]thumb120By90RenditionStatus" : "thumb120By90RenditionStatus$0",
        "[P]title" : "title$0",
        "[P]origin" : "origin$0",
        "[P]owner" : "owner$0"
    },
    "Interview" : {
        "[M]getVariableValue(String variableName)\tObject" : "getVariableValue($0)"
    },
    "SoapType" : {
        "[P]STRING" : "STRING$0",
        "[P]BOOLEAN" : "BOOLEAN$0",
        "[P]TIME" : "TIME$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]APEXCODECOVERAGE_COVERAGE" : "APEXCODECOVERAGE_COVERAGE$0",
        "[P]DATETIME" : "DATETIME$0",
        "[P]METADATA_APEXCLASS" : "METADATA_APEXCLASS$0",
        "[P]METADATA_CUSTOMOBJECT" : "METADATA_CUSTOMOBJECT$0",
        "[P]BASE64BINARY" : "BASE64BINARY$0",
        "[P]ANYTYPE" : "ANYTYPE$0",
        "[P]METADATA_APEXTRIGGER" : "METADATA_APEXTRIGGER$0",
        "[P]METADATA_CUSTOMFIELD" : "METADATA_CUSTOMFIELD$0",
        "[P]DOUBLE" : "DOUBLE$0",
        "[P]SYMBOLTABLE" : "SYMBOLTABLE$0",
        "[P]EXECUTIONOVERLAY_SOQLRESULT" : "EXECUTIONOVERLAY_SOQLRESULT$0",
        "[P]EXECUTIONOVERLAY_APEXRESULT" : "EXECUTIONOVERLAY_APEXRESULT$0",
        "[P]METADATA_APEXCOMPONENT" : "METADATA_APEXCOMPONENT$0",
        "[M]values()\tLIST<Schema.SoapType>" : "values()$0",
        "[P]INTEGER" : "INTEGER$0",
        "[P]EXECUTIONOVERLAY_HEAPDUMP" : "EXECUTIONOVERLAY_HEAPDUMP$0",
        "[P]DATE" : "DATE$0",
        "[P]METADATA_APEXPAGE" : "METADATA_APEXPAGE$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ID" : "ID$0"
    },
    "UnreadConversationCount" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]hasMore" : "hasMore$0",
        "[P]unreadCount" : "unreadCount$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "UserCapabilities" : {
        "[P]canChat" : "canChat$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]canFollow" : "canFollow$0",
        "[P]canEdit" : "canEdit$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]canDirectMessage" : "canDirectMessage$0",
        "[P]isModerator" : "isModerator$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]canViewFullProfile" : "canViewFullProfile$0",
        "[P]canViewFeed" : "canViewFeed$0"
    },
    "ChatterConversationPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]conversations" : "conversations$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]currentPageUrl" : "currentPageUrl$0"
    },
    "LinkSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]url" : "url$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "UserProfiles" : {
        "[M]getUserProfile(String communityId, String userId)\tConnectApi.UserProfile" : "getUserProfile($0)"
    },
    "Long" : {
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]valueOf(String str)\tLong" : "valueOf($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]format()\tString" : "format()$0",
        "[M]intValue()\tInteger" : "intValue()$0",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "DescribeFieldResult" : {
        "[M]isGroupable()\tBoolean" : "isGroupable()$0",
        "[M]isFilterable()\tBoolean" : "isFilterable()$0",
        "[M]isPermissionable()\tBoolean" : "isPermissionable()$0",
        "[M]getScale()\tInteger" : "getScale()$0",
        "[M]getLength()\tInteger" : "getLength()$0",
        "[M]getReferenceTo()\tLIST<Schema.SObjectType>" : "getReferenceTo()$0",
        "[M]isDisplayLocationInDecimal()\tBoolean" : "isDisplayLocationInDecimal()$0",
        "[M]getDefaultValueFormula()\tString" : "getDefaultValueFormula()$0",
        "[M]isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0",
        "[M]isRestrictedPicklist()\tBoolean" : "isRestrictedPicklist()$0",
        "[M]isAutoNumber()\tBoolean" : "isAutoNumber()$0",
        "[M]getRelationshipName()\tString" : "getRelationshipName()$0",
        "[M]isCreateable()\tBoolean" : "isCreateable()$0",
        "[M]getSobjectField()\tSchema.SObjectField" : "getSobjectField()$0",
        "[M]getInlineHelpText()\tString" : "getInlineHelpText()$0",
        "[M]isUnique()\tBoolean" : "isUnique()$0",
        "[M]isExternalId()\tBoolean" : "isExternalId()$0",
        "[M]isWriteRequiresMasterRead()\tBoolean" : "isWriteRequiresMasterRead()$0",
        "[M]getDigits()\tInteger" : "getDigits()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]isRestrictedDelete()\tBoolean" : "isRestrictedDelete()$0",
        "[M]isCustom()\tBoolean" : "isCustom()$0",
        "[M]getDefaultValue()\tObject" : "getDefaultValue()$0",
        "[M]isCascadeDelete()\tBoolean" : "isCascadeDelete()$0",
        "[M]getCalculatedFormula()\tString" : "getCalculatedFormula()$0",
        "[M]isNillable()\tBoolean" : "isNillable()$0",
        "[M]isAccessible()\tBoolean" : "isAccessible()$0",
        "[M]getType()\tSchema.DisplayType" : "getType()$0",
        "[M]getPicklistValues()\tLIST<Schema.PicklistEntry>" : "getPicklistValues()$0",
        "[M]isCaseSensitive()\tBoolean" : "isCaseSensitive()$0",
        "[M]getSoapType()\tSchema.SoapType" : "getSoapType()$0",
        "[M]getLocalName()\tString" : "getLocalName()$0",
        "[M]isDependentPicklist()\tBoolean" : "isDependentPicklist()$0",
        "[M]getRelationshipOrder()\tInteger" : "getRelationshipOrder()$0",
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]isIdLookup()\tBoolean" : "isIdLookup()$0",
        "[M]isDefaultedOnCreate()\tBoolean" : "isDefaultedOnCreate()$0",
        "[M]getByteLength()\tInteger" : "getByteLength()$0",
        "[M]isCalculated()\tBoolean" : "isCalculated()$0",
        "[M]isNamePointing()\tBoolean" : "isNamePointing()$0",
        "[M]isHtmlFormatted()\tBoolean" : "isHtmlFormatted()$0",
        "[M]getPrecision()\tInteger" : "getPrecision()$0",
        "[M]getController()\tSchema.SObjectField" : "getController()$0",
        "[M]isUpdateable()\tBoolean" : "isUpdateable()$0",
        "[M]isNameField()\tBoolean" : "isNameField()$0",
        "[M]isSortable()\tBoolean" : "isSortable()$0"
    },
    "QueryLocatorIterator" : {
        "[M]hasNext()\tBoolean" : "hasNext()$0",
        "[M]next()\tSObject" : "next()$0"
    },
    "Map" : {
        "[M]putAll(MAP entries)\tvoid" : "putAll($0)",
        "[M]isEmpty()\tBoolean" : "isEmpty()$0",
        "[M]size()\tInteger" : "size()$0",
        "[M]remove(ANY key)\tString" : "remove($0)",
        "[M]putAll(LIST entries)\tvoid" : "putAll($0)",
        "[M]equals(ANY obj)\tBoolean" : "equals($0)",
        "[M]containsKey(ANY key)\tBoolean" : "containsKey($0)",
        "[M]deepClone()\tMAP<String,String>" : "deepClone()$0",
        "[M]keySet()\tSET<String>" : "keySet()$0",
        "[M]getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<String>" : "values()$0",
        "[M]clear()\tvoid" : "clear()$0",
        "[M]put(ANY key, ANY value)\tString" : "put($0)",
        "[M]clone()\tMAP<String,String>" : "clone()$0",
        "[M]get(ANY key)\tString" : "get($0)"
    },
    "DeleteResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "DescribeColorResult" : {
        "[M]getColor()\tString" : "getColor()$0",
        "[M]getTheme()\tString" : "getTheme()$0",
        "[M]getContext()\tString" : "getContext()$0"
    },
    "ChatterFeeds" : {
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]getLikesForComment(String communityId, String commentId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage" : "getLikesForComment($0)",
        "[M]likeFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLike" : "likeFeedItem($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]setTestSearchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "[M]deleteFeedItem(String communityId, String feedItemId)\tvoid" : "deleteFeedItem($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.Feed" : "getFeed($0)",
        "[M]isModified(String communityId, ConnectApi.FeedType feedType, String subjectId, String since)\tConnectApi.FeedModifiedInfo" : "isModified($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "[M]setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "[M]getLike(String communityId, String likeId)\tConnectApi.ChatterLike" : "getLike($0)",
        "[M]postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemInput feedItem, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.FeedItem" : "postFeedItem($0)",
        "[M]setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]getFeedPoll(String communityId, String feedItemId)\tConnectApi.FeedPoll" : "getFeedPoll($0)",
        "[M]getFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFeed($0)",
        "[M]getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "[M]getLikesForFeedItem(String communityId, String feedItemId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage" : "getLikesForFeedItem($0)",
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]searchFeedItems(String communityId, String q, String pageParam, Integer pageSize)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "[M]setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "[M]postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String text)\tConnectApi.FeedItem" : "postFeedItem($0)",
        "[M]searchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "[M]postComment(String communityId, String feedItemId, String text)\tConnectApi.Comment" : "postComment($0)",
        "[M]deleteComment(String communityId, String commentId)\tvoid" : "deleteComment($0)",
        "[M]searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "[M]getLikesForFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLikePage" : "getLikesForFeedItem($0)",
        "[M]setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "[M]searchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "[M]getFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.Feed" : "getFeed($0)",
        "[M]searchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "[M]searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "[M]getFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.Feed" : "getFilterFeed($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]likeComment(String communityId, String commentId)\tConnectApi.ChatterLike" : "likeComment($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]updateBookmark(String communityId, String feedItemId, Boolean isBookmarkedByCurrentUser)\tConnectApi.FeedItem" : "updateBookmark($0)",
        "[M]getFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFilterFeed($0)",
        "[M]getFeedItem(String communityId, String feedItemId)\tConnectApi.FeedItem" : "getFeedItem($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]searchFeedItems(String communityId, String q)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "[M]getCommentsForFeedItem(String communityId, String feedItemId)\tConnectApi.CommentPage" : "getCommentsForFeedItem($0)",
        "[M]setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "[M]getCommentsForFeedItem(String communityId, String feedItemId, String pageParam, Integer pageSize)\tConnectApi.CommentPage" : "getCommentsForFeedItem($0)",
        "[M]deleteLike(String communityId, String likeId)\tvoid" : "deleteLike($0)",
        "[M]setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "[M]setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "[M]setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "[M]getComment(String communityId, String commentId)\tConnectApi.Comment" : "getComment($0)",
        "[M]voteOnFeedPoll(String communityId, String feedItemId, String myChoiceId)\tConnectApi.FeedPoll" : "voteOnFeedPoll($0)",
        "[M]shareFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String originalFeedItemId)\tConnectApi.FeedItem" : "shareFeedItem($0)",
        "[M]setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "[M]searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "[M]getLikesForComment(String communityId, String commentId)\tConnectApi.ChatterLikePage" : "getLikesForComment($0)",
        "[M]searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "[M]getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFeed($0)",
        "[M]setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)",
        "[M]postComment(String communityId, String feedItemId, ConnectApi.CommentInput comment, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.Comment" : "postComment($0)",
        "[M]setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)"
    },
    "Date" : {
        "[M]addYears(Integer years)\tDate" : "addYears($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]isSameDay(Date other)\tBoolean" : "isSameDay($0)",
        "[M]addMonths(Integer months)\tDate" : "addMonths($0)",
        "[M]month()\tInteger" : "month()$0",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]newInstance(Integer year, Integer month, Integer day)\tDate" : "newInstance($0)",
        "[M]format()\tString" : "format()$0",
        "[M]daysBetween(Date other)\tInteger" : "daysBetween($0)",
        "[M]today()\tDate" : "today()$0",
        "[M]daysInMonth(Integer year, Integer month)\tInteger" : "daysInMonth($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]valueOf(Object o)\tDate" : "valueOf($0)",
        "[M]monthsBetween(Date other)\tInteger" : "monthsBetween($0)",
        "[M]year()\tInteger" : "year()$0",
        "[M]toStartOfWeek()\tDate" : "toStartOfWeek()$0",
        "[M]day()\tInteger" : "day()$0",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]parse(String str)\tDate" : "parse($0)",
        "[M]toStartOfMonth()\tDate" : "toStartOfMonth()$0",
        "[M]dayOfYear()\tInteger" : "dayOfYear()$0",
        "[M]addDays(Integer days)\tDate" : "addDays($0)",
        "[M]isLeapYear(Integer year)\tBoolean" : "isLeapYear($0)",
        "[M]valueOf(String str)\tDate" : "valueOf($0)"
    },
    "MentionCompletion" : {
        "[P]additionalLabel" : "additionalLabel$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[P]recordId" : "recordId$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]photoUrl" : "photoUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]description" : "description$0"
    },
    "EmptyStackException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ChatterLikePage" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]likes" : "likes$0",
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]previousPageToken" : "previousPageToken$0",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "AsyncException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "MessageBody" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "GroupVisibilityType" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]PublicAccess" : "PublicAccess$0",
        "[P]PrivateAccess" : "PrivateAccess$0",
        "[M]values()\tLIST<ConnectApi.GroupVisibilityType>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "Address" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]state" : "state$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]city" : "city$0",
        "[P]formattedAddress" : "formattedAddress$0",
        "[P]street" : "street$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]country" : "country$0",
        "[P]zip" : "zip$0"
    },
    "ActionDml" : {
        "[M]invoke()\tvoid" : "invoke()$0"
    },
    "ProcessResult" : {
        "[M]getEntityId()\tString" : "getEntityId()$0",
        "[M]getInstanceStatus()\tString" : "getInstanceStatus()$0",
        "[M]getNewWorkitemIds()\tLIST<Id>" : "getNewWorkitemIds()$0",
        "[M]getInstanceId()\tString" : "getInstanceId()$0",
        "[M]getActorIds()\tLIST<Id>" : "getActorIds()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "ReportChartComponent" : {
        "[M]getContextFilterableField()\tString" : "getContextFilterableField()$0",
        "[M]getHideOnError()\tBoolean" : "getHideOnError()$0",
        "[M]getCacheData()\tBoolean" : "getCacheData()$0",
        "[M]getShowTitle()\tBoolean" : "getShowTitle()$0",
        "[M]getIncludeContext()\tBoolean" : "getIncludeContext()$0",
        "[M]getSize()\tString" : "getSize()$0"
    },
    "CanvasTemplateAttachment" : {
        "[P]developerName" : "developerName$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]parameters" : "parameters$0",
        "[P]namespacePrefix" : "namespacePrefix$0",
        "[P]icon" : "icon$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0",
        "[P]description" : "description$0",
        "[P]thumbnailUrl" : "thumbnailUrl$0",
        "[P]height" : "height$0"
    },
    "RecordField" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "InputParameter" : {
        "[P]description" : "description$0",
        "[P]name" : "name$0",
        "[P]required" : "required$0",
        "[P]parameterType" : "parameterType$0"
    },
    "FeedItemType" : {
        "[P]AnnouncementPost" : "AnnouncementPost$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]values()\tLIST<ConnectApi.FeedItemType>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]SocialPost" : "SocialPost$0",
        "[P]CanvasPost" : "CanvasPost$0",
        "[P]UserStatus" : "UserStatus$0",
        "[P]MilestoneEvent" : "MilestoneEvent$0",
        "[P]CollaborationGroupUnarchived" : "CollaborationGroupUnarchived$0",
        "[P]ActivityEvent" : "ActivityEvent$0",
        "[P]BasicTemplateFeedItem" : "BasicTemplateFeedItem$0",
        "[P]FacebookPost" : "FacebookPost$0",
        "[P]ApprovalPost" : "ApprovalPost$0",
        "[P]EmailMessageEvent" : "EmailMessageEvent$0",
        "[P]TextPost" : "TextPost$0",
        "[P]CallLogPost" : "CallLogPost$0",
        "[P]ChangeStatusPost" : "ChangeStatusPost$0",
        "[P]DashboardComponentSnapshot" : "DashboardComponentSnapshot$0",
        "[P]CreateRecordEvent" : "CreateRecordEvent$0",
        "[P]RypplePost" : "RypplePost$0",
        "[P]PollPost" : "PollPost$0",
        "[P]DashboardComponentAlert" : "DashboardComponentAlert$0",
        "[P]AttachArticleEvent" : "AttachArticleEvent$0",
        "[P]TrackedChange" : "TrackedChange$0",
        "[P]ChatTranscriptPost" : "ChatTranscriptPost$0",
        "[P]ContentPost" : "ContentPost$0",
        "[P]CollaborationGroupCreated" : "CollaborationGroupCreated$0",
        "[P]LinkPost" : "LinkPost$0",
        "[P]ReplyPost" : "ReplyPost$0",
        "[P]CaseCommentPost" : "CaseCommentPost$0"
    },
    "EmailFileAttachment" : {
        "[M]setBody(Blob param1)\tvoid" : "setBody($0)",
        "[M]setFileName(String param1)\tvoid" : "setFileName($0)",
        "[M]getContentType()\tString" : "getContentType()$0",
        "[M]getInline()\tBoolean" : "getInline()$0",
        "[M]getFileName()\tString" : "getFileName()$0",
        "[M]getBody()\tBlob" : "getBody()$0",
        "[M]setInline(Boolean param1)\tvoid" : "setInline($0)",
        "[M]setContentType(String param1)\tvoid" : "setContentType($0)"
    },
    "ActorWithId" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]motif" : "motif$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]mySubscription" : "mySubscription$0",
        "[P]url" : "url$0"
    },
    "SaveResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "LeadConvert" : {
        "[M]setAccountId(Id param1)\tvoid" : "setAccountId($0)",
        "[M]getContactId()\tId" : "getContactId()$0",
        "[M]getAccountId()\tId" : "getAccountId()$0",
        "[M]getOpportunityName()\tString" : "getOpportunityName()$0",
        "[M]setOwnerId(Id param1)\tvoid" : "setOwnerId($0)",
        "[M]setSendNotificationEmail(Boolean param1)\tvoid" : "setSendNotificationEmail($0)",
        "[M]isOverwriteLeadSource()\tBoolean" : "isOverwriteLeadSource()$0",
        "[M]setDoNotCreateOpportunity(Boolean param1)\tvoid" : "setDoNotCreateOpportunity($0)",
        "[M]isSendNotificationEmail()\tBoolean" : "isSendNotificationEmail()$0",
        "[M]setConvertedStatus(String param1)\tvoid" : "setConvertedStatus($0)",
        "[M]setOverwriteLeadSource(Boolean param1)\tvoid" : "setOverwriteLeadSource($0)",
        "[M]getConvertedStatus()\tString" : "getConvertedStatus()$0",
        "[M]setOpportunityName(String param1)\tvoid" : "setOpportunityName($0)",
        "[M]setContactId(Id param1)\tvoid" : "setContactId($0)",
        "[M]getLeadId()\tId" : "getLeadId()$0",
        "[M]setLeadId(Id param1)\tvoid" : "setLeadId($0)",
        "[M]getOwnerId()\tId" : "getOwnerId()$0",
        "[M]isDoNotCreateOpportunity()\tBoolean" : "isDoNotCreateOpportunity()$0"
    },
    "TimeZone" : {
        "[M]getOffset(Datetime dt)\tInteger" : "getOffset($0)",
        "[M]getDisplayName()\tString" : "getDisplayName()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getID()\tString" : "getID()$0",
        "[M]getTimeZone(String id)\tsystem.TimeZone" : "getTimeZone($0)"
    },
    "SortOrder" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Ascending" : "Ascending$0",
        "[M]values()\tLIST<ConnectApi.SortOrder>" : "values()$0",
        "[P]Descending" : "Descending$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ChatterMessages" : {
        "[M]searchConversation(String conversationId, String q)\tConnectApi.ChatterConversation" : "searchConversation($0)",
        "[M]searchConversations(String pageParam, Integer pageSize, String q)\tConnectApi.ChatterConversationPage" : "searchConversations($0)",
        "[M]getMessages(String pageParam, Integer pageSize)\tConnectApi.ChatterMessagePage" : "getMessages($0)",
        "[M]sendMessage(String text, String recipients)\tConnectApi.ChatterMessage" : "sendMessage($0)",
        "[M]getConversations()\tConnectApi.ChatterConversationPage" : "getConversations()$0",
        "[M]getMessages()\tConnectApi.ChatterMessagePage" : "getMessages()$0",
        "[M]searchConversation(String conversationId, String pageParam, Integer pageSize, String q)\tConnectApi.ChatterConversation" : "searchConversation($0)",
        "[M]getUnreadCount()\tConnectApi.UnreadConversationCount" : "getUnreadCount()$0",
        "[M]searchMessages(String pageParam, Integer pageSize, String q)\tConnectApi.ChatterMessagePage" : "searchMessages($0)",
        "[M]getConversation(String conversationId)\tConnectApi.ChatterConversation" : "getConversation($0)",
        "[M]getConversation(String conversationId, String pageParam, Integer pageSize)\tConnectApi.ChatterConversation" : "getConversation($0)",
        "[M]getMessage(String messageId)\tConnectApi.ChatterMessage" : "getMessage($0)",
        "[M]searchConversations(String q)\tConnectApi.ChatterConversationPage" : "searchConversations($0)",
        "[M]markConversationRead(String conversationId, Boolean read)\tConnectApi.ChatterConversationSummary" : "markConversationRead($0)",
        "[M]getConversations(String pageParam, Integer pageSize)\tConnectApi.ChatterConversationPage" : "getConversations($0)",
        "[M]replyToMessage(String text, String inReplyTo)\tConnectApi.ChatterMessage" : "replyToMessage($0)",
        "[M]searchMessages(String q)\tConnectApi.ChatterMessagePage" : "searchMessages($0)"
    },
    "CommunityModeration" : {
        "[M]getFlagsOnComment(String communityId, String commentId)\tConnectApi.ModerationFlags" : "getFlagsOnComment($0)",
        "[M]removeFlagFromFeedItem(String communityId, String feedItemId, String userId)\tvoid" : "removeFlagFromFeedItem($0)",
        "[M]addFlagToComment(String communityId, String commentId)\tConnectApi.ModerationFlags" : "addFlagToComment($0)",
        "[M]getFlagsOnFeedItem(String communityId, String feedItemId)\tConnectApi.ModerationFlags" : "getFlagsOnFeedItem($0)",
        "[M]addFlagToFeedItem(String communityId, String feedItemId)\tConnectApi.ModerationFlags" : "addFlagToFeedItem($0)",
        "[M]removeFlagFromComment(String communityId, String commentId, String userId)\tvoid" : "removeFlagFromComment($0)"
    },
    "Context" : {
        "[P]sobjects" : "sobjects$0"
    },
    "GroupMembershipRequests" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]requests" : "requests$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "UnauthenticatedUser" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "SObjectField" : {
        "[M]getDescribe()\tSchema.DescribeFieldResult" : "getDescribe()$0"
    },
    "DescribeDataCategoryGroupStructureResult" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]getDescription()\tString" : "getDescription()$0",
        "[M]getTopCategories()\tLIST<Schema.DataCategory>" : "getTopCategories()$0",
        "[M]getSobject()\tString" : "getSobject()$0"
    },
    "FeedModifiedInfo" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPollUrl" : "nextPollUrl$0",
        "[P]isModifiedToken" : "isModifiedToken$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]isModified" : "isModified$0"
    },
    "ProcessRequest" : {
        "[M]getNextApproverIds()\tLIST<Id>" : "getNextApproverIds()$0",
        "[M]getComments()\tString" : "getComments()$0",
        "[M]setNextApproverIds(LIST<Id> param1)\tvoid" : "setNextApproverIds($0)",
        "[M]setComments(String param1)\tvoid" : "setComments($0)"
    },
    "ReportInstance" : {
        "[M]setUrl(String url)\tvoid" : "setUrl($0)",
        "[M]getUrl()\tString" : "getUrl()$0",
        "[M]getReportId()\tId" : "getReportId()$0",
        "[M]setReportId(Id reportId)\tvoid" : "setReportId($0)"
    },
    "LiveChatRouter" : {
        "[M]doRouting(LIST<LiveAgent.LiveChatRoutingRequest> param1)\tvoid" : "doRouting($0)"
    },
    "ChatterConversationSummary" : {
        "[P]latestMessage" : "latestMessage$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[P]read" : "read$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]members" : "members$0",
        "[P]url" : "url$0"
    },
    "RecordFieldType" : {
        "[P]Location" : "Location$0",
        "[M]values()\tLIST<ConnectApi.RecordFieldType>" : "values()$0",
        "[P]Boolean" : "Boolean$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Phone" : "Phone$0",
        "[P]Blank" : "Blank$0",
        "[P]CreatedBy" : "CreatedBy$0",
        "[P]Address" : "Address$0",
        "[P]Date" : "Date$0",
        "[P]Compound" : "Compound$0",
        "[P]Name" : "Name$0",
        "[P]Percent" : "Percent$0",
        "[P]Currency" : "Currency$0",
        "[P]Text" : "Text$0",
        "[P]LastModifiedBy" : "LastModifiedBy$0",
        "[P]Time" : "Time$0",
        "[P]Picklist" : "Picklist$0",
        "[P]DateTime" : "DateTime$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Reference" : "Reference$0",
        "[P]Email" : "Email$0",
        "[P]Number" : "Number$0"
    },
    "GroupMembershipRequest" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]lastUpdateDate" : "lastUpdateDate$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]user" : "user$0",
        "[P]createdDate" : "createdDate$0",
        "[P]status" : "status$0",
        "[P]responseMessage" : "responseMessage$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]id" : "id$0",
        "[P]requestedGroup" : "requestedGroup$0",
        "[P]url" : "url$0"
    },
    "ChatterGroupInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]isAutoArchiveDisabled" : "isAutoArchiveDisabled$0",
        "[P]name" : "name$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]information" : "information$0",
        "[P]canHaveChatterGuests" : "canHaveChatterGuests$0",
        "[P]description" : "description$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]visibility" : "visibility$0",
        "[P]isArchived" : "isArchived$0",
        "[P]owner" : "owner$0"
    },
    "FieldChangeValueSegment" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]url" : "url$0",
        "[P]valueType" : "valueType$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "EmailAttachment" : {
        "[M]setBody(Blob param1)\tvoid" : "setBody($0)",
        "[M]setFileName(String param1)\tvoid" : "setFileName($0)",
        "[M]getContentType()\tString" : "getContentType()$0",
        "[M]getFileName()\tString" : "getFileName()$0",
        "[M]getBody()\tBlob" : "getBody()$0",
        "[M]setContentType(String param1)\tvoid" : "setContentType($0)"
    },
    "FeedItemAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "DescribeQuickActionResult" : {
        "[M]getDefaultValues()\tLIST<QuickAction.DescribeQuickActionDefaultValue>" : "getDefaultValues()$0",
        "[M]getLayout()\tQuickAction.DescribeLayoutSection" : "getLayout()$0",
        "[M]getCanvasApplicationName()\tString" : "getCanvasApplicationName()$0",
        "[M]getMiniIconUrl()\tString" : "getMiniIconUrl()$0",
        "[M]getTargetParentField()\tString" : "getTargetParentField()$0",
        "[M]getColors()\tLIST<Schema.DescribeColorResult>" : "getColors()$0",
        "[M]getSourceSobjectType()\tString" : "getSourceSobjectType()$0",
        "[M]getIcons()\tLIST<Schema.DescribeIconResult>" : "getIcons()$0",
        "[M]getTargetSobjectType()\tString" : "getTargetSobjectType()$0",
        "[M]getHeight()\tInteger" : "getHeight()$0",
        "[M]getIconName()\tString" : "getIconName()$0",
        "[M]getIconUrl()\tString" : "getIconUrl()$0",
        "[M]getTargetRecordTypeId()\tString" : "getTargetRecordTypeId()$0",
        "[M]getWidth()\tInteger" : "getWidth()$0",
        "[M]getVisualforcePageName()\tString" : "getVisualforcePageName()$0"
    },
    "ApplicationReadWriteMode" : {
        "[M]values()\tLIST<system.ApplicationReadWriteMode>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]READ_ONLY" : "READ_ONLY$0",
        "[P]DEFAULT" : "DEFAULT$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "MoreChangesSegment" : {
        "[P]moreChangesCount" : "moreChangesCount$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]moreChanges" : "moreChanges$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "UserPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]nextPageToken" : "nextPageToken$0",
        "[P]users" : "users$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageToken" : "currentPageToken$0",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]previousPageToken" : "previousPageToken$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "ChatterGroupDetail" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]pendingRequests" : "pendingRequests$0",
        "[P]information" : "information$0",
        "[P]fileCount" : "fileCount$0"
    },
    "Comparable" : {
        "[M]compareTo(Object param1)\tInteger" : "compareTo($0)"
    },
    "ChatterGroupSummary" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]fileCount" : "fileCount$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "GroupArchiveStatus" : {
        "[P]Archived" : "Archived$0",
        "[P]All" : "All$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.GroupArchiveStatus>" : "values()$0",
        "[P]NotArchived" : "NotArchived$0"
    },
    "DescribeLayoutItem" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]isEditable()\tBoolean" : "isEditable()$0",
        "[M]getLayoutComponents()\tLIST<QuickAction.DescribeLayoutComponent>" : "getLayoutComponents()$0",
        "[M]isPlaceholder()\tBoolean" : "isPlaceholder()$0",
        "[M]isRequired()\tBoolean" : "isRequired()$0"
    },
    "Plugin" : {
        "[M]describe()\tProcess.PluginDescribeResult" : "describe()$0",
        "[M]invoke(Process.PluginRequest param1)\tProcess.PluginResult" : "invoke($0)"
    },
    "FeedPoll" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]myChoiceId" : "myChoiceId$0",
        "[P]totalVoteCount" : "totalVoteCount$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]choices" : "choices$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "FieldSet" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "[M]getNameSpace()\tString" : "getNameSpace()$0",
        "[M]getDescription()\tString" : "getDescription()$0",
        "[M]getFields()\tLIST<Schema.FieldSetMember>" : "getFields()$0"
    },
    "Crypto" : {
        "[M]encrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob clearData)\tBlob" : "encrypt($0)",
        "[M]getRandomInteger()\tInteger" : "getRandomInteger()$0",
        "[M]getRandomLong()\tLong" : "getRandomLong()$0",
        "[M]decrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob encryptedData)\tBlob" : "decrypt($0)",
        "[M]encryptWithManagedIV(String algorithmName, Blob secretKey, Blob clearData)\tBlob" : "encryptWithManagedIV($0)",
        "[M]generateDigest(String algorithmName, Blob input)\tBlob" : "generateDigest($0)",
        "[M]decryptWithManagedIV(String algorithmName, Blob secretKey, Blob encryptedData)\tBlob" : "decryptWithManagedIV($0)",
        "[M]generateAesKey(Integer size)\tBlob" : "generateAesKey($0)",
        "[M]generateMac(String algorithmName, Blob input, Blob privateKey)\tBlob" : "generateMac($0)",
        "[M]sign(String algorithmName, Blob input, Blob privateKey)\tBlob" : "sign($0)"
    },
    "ReportFactWithDetails" : {
        "[M]getRows()\tLIST<reports.ReportDetailRow>" : "getRows()$0",
        "[M]setRows(LIST<reports.ReportDetailRow> rows)\tvoid" : "setRows($0)"
    },
    "NoAccessException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "XmlNode" : {
        "[M]setNamespace(String prefix, String namespace)\tvoid" : "setNamespace($0)",
        "[M]getPrefixFor(String namespace)\tString" : "getPrefixFor($0)",
        "[M]getChildElements()\tLIST<dom.XmlNode>" : "getChildElements()$0",
        "[M]getNamespace()\tString" : "getNamespace()$0",
        "[M]getAttribute(String key, String keyNamespace)\tString" : "getAttribute($0)",
        "[M]getChildElement(String name, String namespace)\tdom.XmlNode" : "getChildElement($0)",
        "[M]setAttributeNs(String key, String value, String keyNamespace, String valueNamespace)\tvoid" : "setAttributeNs($0)",
        "[M]getAttributeCount()\tInteger" : "getAttributeCount()$0",
        "[M]getNamespaceFor(String prefix)\tString" : "getNamespaceFor($0)",
        "[M]getChildren()\tLIST<dom.XmlNode>" : "getChildren()$0",
        "[M]getText()\tString" : "getText()$0",
        "[M]getAttributeKeyNsAt(Integer index)\tString" : "getAttributeKeyNsAt($0)",
        "[M]getName()\tString" : "getName()$0",
        "[M]getNodeType()\tDom.XmlNodeType" : "getNodeType()$0",
        "[M]getParent()\tdom.XmlNode" : "getParent()$0",
        "[M]addChildElement(String name, String namespace, String prefix)\tdom.XmlNode" : "addChildElement($0)",
        "[M]getAttributeKeyAt(Integer index)\tString" : "getAttributeKeyAt($0)",
        "[M]setAttribute(String key, String value)\tvoid" : "setAttribute($0)",
        "[M]addTextNode(String text)\tdom.XmlNode" : "addTextNode($0)",
        "[M]getAttributeValue(String key, String keyNamespace)\tString" : "getAttributeValue($0)",
        "[M]removeChild(ANY child)\tBoolean" : "removeChild($0)",
        "[M]addCommentNode(String text)\tdom.XmlNode" : "addCommentNode($0)",
        "[M]removeAttribute(String key, String keyNamespace)\tBoolean" : "removeAttribute($0)",
        "[M]getAttributeValueNs(String key, String keyNamespace)\tString" : "getAttributeValueNs($0)"
    },
    "TopicPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]topics" : "topics$0"
    },
    "WebServiceMock" : {
        "[M]doInvoke(Object param1, Object param2, MAP<String,ANY> param3, String param4, String param5, String param6, String param7, String param8, String param9)\tvoid" : "doInvoke($0)"
    },
    "Communities" : {
        "[M]internalLogin(String startUrl)\tSystem.PageReference" : "internalLogin($0)",
        "[M]communitiesLanding(String startUrl)\tSystem.PageReference" : "communitiesLanding($0)",
        "[M]communitiesLanding()\tSystem.PageReference" : "communitiesLanding()$0",
        "[M]login(String username, String password, String startUrl)\tSystem.PageReference" : "login($0)",
        "[M]forwardToAuthPage(String startUrl)\tSystem.PageReference" : "forwardToAuthPage($0)",
        "[M]getCSS()\tString" : "getCSS()$0"
    },
    "SchedulableContext" : {
        "[M]getTriggerId()\tId" : "getTriggerId()$0"
    },
    "ReportFact" : {
        "[M]setKey(String key)\tvoid" : "setKey($0)",
        "[M]getAggregates()\tLIST<reports.SummaryValue>" : "getAggregates()$0",
        "[M]getKey()\tString" : "getKey()$0",
        "[M]setAggregates(LIST<reports.SummaryValue> aggregates)\tvoid" : "setAggregates($0)"
    },
    "ChatterFavorites" : {
        "[M]setTestGetFeedItems(String communityId, String subjectId, String favoriteId, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)",
        "[M]getFeedItems(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "[M]setTestGetFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)",
        "[M]addFavorite(String communityId, String subjectId, String searchText)\tConnectApi.FeedFavorite" : "addFavorite($0)",
        "[M]addRecordFavorite(String communityId, String subjectId, String targetId)\tConnectApi.FeedFavorite" : "addRecordFavorite($0)",
        "[M]setTestGetFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)",
        "[M]getFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "[M]getFavorites(String communityId, String subjectId)\tConnectApi.FeedFavorites" : "getFavorites($0)",
        "[M]deleteFavorite(String communityId, String subjectId, String favoriteId)\tvoid" : "deleteFavorite($0)",
        "[M]updateFavorite(String communityId, String subjectId, String favoriteId, Boolean updateLastViewDate)\tConnectApi.FeedFavorite" : "updateFavorite($0)",
        "[M]getFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "[M]getFavorite(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedFavorite" : "getFavorite($0)"
    },
    "Version" : {
        "[M]major()\tInteger" : "major()$0",
        "[M]minor()\tInteger" : "minor()$0",
        "[M]compareTo(system.Version other)\tInteger" : "compareTo($0)",
        "[M]patch()\tInteger" : "patch()$0"
    },
    "Database" : {
        "[M]executeBatch(APEX_OBJECT batchable, Integer batchSize)\tString" : "executeBatch($0)",
        "[M]update(SObject sobject)\tDatabase.SaveResult" : "update($0)",
        "[M]getQueryLocator(String query)\tDatabase.QueryLocator" : "getQueryLocator($0)",
        "[M]update(SObject sobject, APEX_OBJECT allOrNothing)\tDatabase.SaveResult" : "update($0)",
        "[M]setSavepoint()\tSystem.Savepoint" : "setSavepoint()$0",
        "[M]undelete(LIST<SObject> sobjects)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "[M]undelete(Id id)\tDatabase.UndeleteResult" : "undelete($0)",
        "[M]undelete(SObject sobject)\tDatabase.UndeleteResult" : "undelete($0)",
        "[M]merge(SObject master, LIST<Id> duplicates, Boolean allOrNothing)\tLIST<Database.MergeResult>" : "merge($0)",
        "[M]executeBatch(APEX_OBJECT batchable)\tString" : "executeBatch($0)",
        "[M]update(LIST<SObject> sobjects)\tLIST<Database.SaveResult>" : "update($0)",
        "[M]upsert(LIST<SObject> sobjects, Schema.SObjectField field)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "[M]getDeleted(String sobjectType, Datetime startDate, Datetime endDate)\tDatabase.GetDeletedResult" : "getDeleted($0)",
        "[M]emptyRecycleBin(SObject sobject)\tDatabase.EmptyRecycleBinResult" : "emptyRecycleBin($0)",
        "[M]convertLead(LIST<Database.LeadConvert> leadConverts, Boolean allOrNothing)\tLIST<Database.LeadConvertResult>" : "convertLead($0)",
        "[M]upsert(SObject sobject, Boolean allOrNothing)\tDatabase.UpsertResult" : "upsert($0)",
        "[M]upsert(SObject sobject, Schema.SObjectField field, Boolean allOrNothing)\tDatabase.UpsertResult" : "upsert($0)",
        "[M]delete(LIST<Id> ids, Boolean allOrNothing)\tLIST<Database.DeleteResult>" : "delete($0)",
        "[M]emptyRecycleBin(LIST<SObject> sobjects)\tLIST<Database.EmptyRecycleBinResult>" : "emptyRecycleBin($0)",
        "[M]merge(SObject master, LIST<SObject> duplicates)\tLIST<Database.MergeResult>" : "merge($0)",
        "[M]convertLead(LIST<Database.LeadConvert> leadConverts)\tLIST<Database.LeadConvertResult>" : "convertLead($0)",
        "[M]undelete(LIST<Id> ids, Boolean allOrNothing)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "[M]upsert(LIST<SObject> sobjects)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "[M]merge(SObject master, Id duplicate)\tDatabase.MergeResult" : "merge($0)",
        "[M]undelete(LIST<Id> ids)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "[M]merge(SObject master, Id duplicate, Boolean allOrNothing)\tDatabase.MergeResult" : "merge($0)",
        "[M]rollback(System.Savepoint savepoint)\tvoid" : "rollback($0)",
        "[M]delete(Id id, Boolean allOrNothing)\tDatabase.DeleteResult" : "delete($0)",
        "[M]insert(LIST<SObject> sobjects)\tLIST<Database.SaveResult>" : "insert($0)",
        "[M]countQuery(String query)\tInteger" : "countQuery($0)",
        "[M]delete(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.DeleteResult>" : "delete($0)",
        "[M]undelete(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "[M]update(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.SaveResult>" : "update($0)",
        "[M]delete(SObject sobject)\tDatabase.DeleteResult" : "delete($0)",
        "[M]undelete(SObject sobject, Boolean allOrNothing)\tDatabase.UndeleteResult" : "undelete($0)",
        "[M]update(LIST<SObject> sobjects, APEX_OBJECT allOrNothing)\tLIST<Database.SaveResult>" : "update($0)",
        "[M]getUpdated(String sobjectType, Datetime startDate, Datetime endDate)\tDatabase.GetUpdatedResult" : "getUpdated($0)",
        "[M]insert(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.SaveResult>" : "insert($0)",
        "[M]merge(SObject master, SObject duplicate, Boolean allOrNothing)\tDatabase.MergeResult" : "merge($0)",
        "[M]insert(LIST<SObject> sobjects, APEX_OBJECT DmlOptions)\tLIST<Database.SaveResult>" : "insert($0)",
        "[M]emptyRecycleBin(LIST<Id> ids)\tLIST<Database.EmptyRecycleBinResult>" : "emptyRecycleBin($0)",
        "[M]upsert(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "[M]merge(SObject master, SObject duplicate)\tDatabase.MergeResult" : "merge($0)",
        "[M]convertLead(Database.LeadConvert leadConvert)\tDatabase.LeadConvertResult" : "convertLead($0)",
        "[M]undelete(Id id, Boolean allOrNothing)\tDatabase.UndeleteResult" : "undelete($0)",
        "[M]getQueryLocator(LIST<SObject> query)\tDatabase.QueryLocator" : "getQueryLocator($0)",
        "[M]query(String query)\tLIST<SObject>" : "query($0)",
        "[M]convertLead(Database.LeadConvert leadConvert, Boolean allOrNothing)\tDatabase.LeadConvertResult" : "convertLead($0)",
        "[M]upsert(SObject sobject)\tDatabase.UpsertResult" : "upsert($0)",
        "[M]upsert(SObject sobject, Schema.SObjectField field)\tDatabase.UpsertResult" : "upsert($0)",
        "[M]insert(SObject sobject, APEX_OBJECT DmlOptions)\tDatabase.SaveResult" : "insert($0)",
        "[M]merge(SObject master, LIST<SObject> duplicates, Boolean allOrNothing)\tLIST<Database.MergeResult>" : "merge($0)",
        "[M]delete(LIST<Id> ids)\tLIST<Database.DeleteResult>" : "delete($0)",
        "[M]insert(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult" : "insert($0)",
        "[M]delete(LIST<SObject> sobjects)\tLIST<Database.DeleteResult>" : "delete($0)",
        "[M]merge(SObject master, LIST<Id> duplicates)\tLIST<Database.MergeResult>" : "merge($0)",
        "[M]delete(SObject sobject, Boolean allOrNothing)\tDatabase.DeleteResult" : "delete($0)",
        "[M]delete(Id id)\tDatabase.DeleteResult" : "delete($0)",
        "[M]update(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult" : "update($0)",
        "[M]insert(SObject sobject)\tDatabase.SaveResult" : "insert($0)",
        "[M]upsert(LIST<SObject> sobjects, Schema.SObjectField field, Boolean allOrNothing)\tLIST<Database.UpsertResult>" : "upsert($0)"
    },
    "GetDeletedResult" : {
        "[M]getDeletedRecords()\tLIST<Database.DeletedRecord>" : "getDeletedRecords()$0",
        "[M]getLatestDateCovered()\tDate" : "getLatestDateCovered()$0",
        "[M]getEarliestDateAvailable()\tDate" : "getEarliestDateAvailable()$0"
    },
    "UnsupportedOperationException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "FollowerPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]followers" : "followers$0",
        "[P]total" : "total$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "AbstractRecordView" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)"
    },
    "XmlStreamReader" : {
        "[M]getVersion()\tString" : "getVersion()$0",
        "[M]getAttributePrefix(Integer index)\tString" : "getAttributePrefix($0)",
        "[M]getNamespaceURI(String prefix)\tString" : "getNamespaceURI($0)",
        "[M]getNamespacePrefix(Integer index)\tString" : "getNamespacePrefix($0)",
        "[M]getNamespace()\tString" : "getNamespace()$0",
        "[M]isEndElement()\tBoolean" : "isEndElement()$0",
        "[M]getAttributeValueAt(Integer index)\tString" : "getAttributeValueAt($0)",
        "[M]getPIData()\tString" : "getPIData()$0",
        "[M]isWhitespace()\tBoolean" : "isWhitespace()$0",
        "[M]getAttributeCount()\tInteger" : "getAttributeCount()$0",
        "[M]getLocation()\tString" : "getLocation()$0",
        "[M]getPrefix()\tString" : "getPrefix()$0",
        "[M]isCharacters()\tBoolean" : "isCharacters()$0",
        "[M]getText()\tString" : "getText()$0",
        "[M]isStartElement()\tBoolean" : "isStartElement()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]hasName()\tBoolean" : "hasName()$0",
        "[M]setCoalescing(Boolean flag)\tvoid" : "setCoalescing($0)",
        "[M]getLocalName()\tString" : "getLocalName()$0",
        "[M]nextTag()\tInteger" : "nextTag()$0",
        "[M]getAttributeNamespace(Integer index)\tString" : "getAttributeNamespace($0)",
        "[M]getEventType()\tsystem.XmlTag" : "getEventType()$0",
        "[M]setNamespaceAware(Boolean flag)\tvoid" : "setNamespaceAware($0)",
        "[M]getPITarget()\tString" : "getPITarget()$0",
        "[M]getAttributeLocalName(Integer index)\tString" : "getAttributeLocalName($0)",
        "[M]getAttributeType(Integer index)\tString" : "getAttributeType($0)",
        "[M]getAttributeValue(String namespaceURI, String localName)\tString" : "getAttributeValue($0)",
        "[M]next()\tInteger" : "next()$0",
        "[M]getNamespaceURIAt(Integer index)\tString" : "getNamespaceURIAt($0)",
        "[M]hasNext()\tBoolean" : "hasNext()$0",
        "[M]hasText()\tBoolean" : "hasText()$0",
        "[M]getNamespaceCount()\tInteger" : "getNamespaceCount()$0"
    },
    "PercentRecordField" : {
        "[P]value" : "value$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ReportTypeColumnCategory" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getColumns()\tMAP<String,reports.ReportTypeColumn>" : "getColumns()$0",
        "[M]setColumns(MAP<String,reports.ReportTypeColumn> columns)\tvoid" : "setColumns($0)",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "KnowledgeArticleVersionStandardController" : {
        "[M]getSourceId()\tString" : "getSourceId()$0",
        "[M]edit()\tSystem.PageReference" : "edit()$0",
        "[M]getRecord()\tSObject" : "getRecord()$0",
        "[M]delete()\tSystem.PageReference" : "delete()$0",
        "[M]view()\tSystem.PageReference" : "view()$0",
        "[M]reset()\tvoid" : "reset()$0",
        "[M]addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "[M]cancel()\tSystem.PageReference" : "cancel()$0",
        "[M]save()\tSystem.PageReference" : "save()$0",
        "[M]selectDataCategory(String categoryGroup, String category)\tvoid" : "selectDataCategory($0)",
        "[M]getId()\tString" : "getId()$0",
        "[M]getSubject()\tSObject" : "getSubject()$0"
    },
    "FeedItemTopicPage" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]canAssignTopics" : "canAssignTopics$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]topics" : "topics$0"
    },
    "Batchable" : {
        "[M]start(Database.BatchableContext param1)\tsystem.Iterable" : "start($0)",
        "[M]finish(Database.BatchableContext param1)\tvoid" : "finish($0)",
        "[M]execute(Database.BatchableContext param1, LIST<ANY> param2)\tvoid" : "execute($0)"
    },
    "WorkflowProcessStatus" : {
        "[P]Fault" : "Fault$0",
        "[P]Started" : "Started$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Removed" : "Removed$0",
        "[P]Rejected" : "Rejected$0",
        "[M]values()\tLIST<ConnectApi.WorkflowProcessStatus>" : "values()$0",
        "[P]Held" : "Held$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Reassigned" : "Reassigned$0",
        "[P]Approved" : "Approved$0",
        "[P]NoResponse" : "NoResponse$0",
        "[P]Pending" : "Pending$0"
    },
    "Time" : {
        "[M]addMilliseconds(Integer milliseconds)\tTime" : "addMilliseconds($0)",
        "[M]hour()\tInteger" : "hour()$0",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addMinutes(Integer minutes)\tTime" : "addMinutes($0)",
        "[M]minute()\tInteger" : "minute()$0",
        "[M]second()\tInteger" : "second()$0",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]newInstance(Integer hour, Integer minute, Integer second, Integer millisecond)\tTime" : "newInstance($0)",
        "[M]addHours(Integer hours)\tTime" : "addHours($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]millisecond()\tInteger" : "millisecond()$0",
        "[M]addSeconds(Integer seconds)\tTime" : "addSeconds($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "LinkSegmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]url" : "url$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "SparkPlugParameter" : {
        "[P]required" : "required$0",
        "[P]name" : "name$0",
        "[P]parameterType" : "parameterType$0"
    },
    "MergeRequest" : {
        "[M]getMasterRecord()\tSObject" : "getMasterRecord()$0",
        "[M]getRecordToMergeIds()\tLIST<String>" : "getRecordToMergeIds()$0",
        "[M]setRecordToMergeIds(LIST<String> param1)\tvoid" : "setRecordToMergeIds($0)",
        "[M]setMasterRecord(SObject param1)\tvoid" : "setMasterRecord($0)"
    },
    "VisualforceException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "EmailTemplateSelector" : {
        "[M]getDefaultEmailTemplateId(Id param1)\tId" : "getDefaultEmailTemplateId($0)"
    },
    "LiveChatRoutingResult" : {
        "[M]getChatKey()\tString" : "getChatKey()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0"
    },
    "ProcessSubmitRequest" : {
        "[M]getObjectId()\tString" : "getObjectId()$0",
        "[M]setObjectId(String param1)\tvoid" : "setObjectId($0)"
    },
    "PhotoInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]versionNumber" : "versionNumber$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]cropSize" : "cropSize$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]cropX" : "cropX$0",
        "[P]fileId" : "fileId$0",
        "[P]cropY" : "cropY$0"
    },
    "GroupMembershipRequestStatus" : {
        "[M]values()\tLIST<ConnectApi.GroupMembershipRequestStatus>" : "values()$0",
        "[P]Accepted" : "Accepted$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Pending" : "Pending$0",
        "[P]Declined" : "Declined$0"
    },
    "DescribeLayoutSection" : {
        "[M]getHeading()\tString" : "getHeading()$0",
        "[M]isUseHeading()\tBoolean" : "isUseHeading()$0",
        "[M]getRows()\tInteger" : "getRows()$0",
        "[M]getColumns()\tInteger" : "getColumns()$0",
        "[M]isUseCollapsibleSection()\tBoolean" : "isUseCollapsibleSection()$0",
        "[M]getLayoutRows()\tLIST<QuickAction.DescribeLayoutRow>" : "getLayoutRows()$0"
    },
    "HttpRequest" : {
        "[M]setHeader(String key, String value)\tvoid" : "setHeader($0)",
        "[M]getBodyAsBlob()\tBlob" : "getBodyAsBlob()$0",
        "[M]getEndpoint()\tString" : "getEndpoint()$0",
        "[M]setBody(String body)\tvoid" : "setBody($0)",
        "[M]setBodyDocument(ANY body)\tvoid" : "setBodyDocument($0)",
        "[M]getCompressed()\tBoolean" : "getCompressed()$0",
        "[M]getHeader(String key)\tString" : "getHeader($0)",
        "[M]setBodyAsBlob(Blob body)\tvoid" : "setBodyAsBlob($0)",
        "[M]setTimeout(Integer timeout)\tvoid" : "setTimeout($0)",
        "[M]setMethod(String method)\tvoid" : "setMethod($0)",
        "[M]setCompressed(Boolean compressed)\tvoid" : "setCompressed($0)",
        "[M]getMethod()\tString" : "getMethod()$0",
        "[M]getBodyDocument()\tdom.Document" : "getBodyDocument()$0",
        "[M]setClientCertificateName(String certDevName)\tvoid" : "setClientCertificateName($0)",
        "[M]toString()\tString" : "toString()$0",
        "[M]setClientCertificate(String clientCert, String password)\tvoid" : "setClientCertificate($0)",
        "[M]setEndpoint(String endpoint)\tvoid" : "setEndpoint($0)",
        "[M]getBody()\tString" : "getBody()$0"
    },
    "RecordViewSection" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]columnCount" : "columnCount$0",
        "[P]columnOrder" : "columnOrder$0",
        "[P]heading" : "heading$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]isCollapsible" : "isCollapsible$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]fields" : "fields$0"
    },
    "Type" : {
        "[M]getName()\tString" : "getName()$0",
        "[M]newInstance()\tObject" : "newInstance()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]forName(String clsName)\tsystem.Type" : "forName($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]forName(String namespace, String clsName)\tsystem.Type" : "forName($0)",
        "[M]equals(Object o)\tBoolean" : "equals($0)"
    },
    "Id" : {
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]getSobjectType()\tSchema.SObjectType" : "getSobjectType()$0",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]valueOf(String str)\tId" : "valueOf($0)",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)"
    },
    "CalloutException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "FeedItemAttachment" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ZoneSearchResultType" : {
        "[M]values()\tLIST<ConnectApi.ZoneSearchResultType>" : "values()$0",
        "[P]Article" : "Article$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Question" : "Question$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "MultiStaticResourceCalloutMock" : {
        "[M]setStatusCode(Integer code)\tvoid" : "setStatusCode($0)",
        "[M]respond(System.HttpRequest request)\tSystem.HttpResponse" : "respond($0)",
        "[M]setStatus(String status)\tvoid" : "setStatus($0)",
        "[M]setStaticResource(String url, String staticResourceName)\tvoid" : "setStaticResource($0)",
        "[M]setHeader(String key, String val)\tvoid" : "setHeader($0)"
    },
    "LeadConvertResult" : {
        "[M]getContactId()\tId" : "getContactId()$0",
        "[M]getAccountId()\tId" : "getAccountId()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0",
        "[M]getLeadId()\tId" : "getLeadId()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]getOpportunityId()\tId" : "getOpportunityId()$0"
    },
    "UserType" : {
        "[P]System" : "System$0",
        "[M]values()\tLIST<ConnectApi.UserType>" : "values()$0",
        "[P]ChatterGuest" : "ChatterGuest$0",
        "[P]Portal" : "Portal$0",
        "[P]Internal" : "Internal$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]Guest" : "Guest$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Undefined" : "Undefined$0",
        "[P]ChatterOnly" : "ChatterOnly$0"
    },
    "DescribeDataCategoryGroupResult" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]getName()\tString" : "getName()$0",
        "[M]getDescription()\tString" : "getDescription()$0",
        "[M]getCategoryCount()\tInteger" : "getCategoryCount()$0",
        "[M]getSobject()\tString" : "getSobject()$0"
    },
    "OutputParameter" : {
        "[P]description" : "description$0",
        "[P]name" : "name$0",
        "[P]parameterType" : "parameterType$0"
    },
    "Exception" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ReportDetailRow" : {
        "[M]getDataCells()\tLIST<reports.ReportDataCell>" : "getDataCells()$0",
        "[M]setDataCells(LIST<reports.ReportDataCell> dataCells)\tvoid" : "setDataCells($0)"
    },
    "ChildRelationship" : {
        "[M]isRestrictedDelete()\tBoolean" : "isRestrictedDelete()$0",
        "[M]isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0",
        "[M]getField()\tSchema.SObjectField" : "getField()$0",
        "[M]isCascadeDelete()\tBoolean" : "isCascadeDelete()$0",
        "[M]getRelationshipName()\tString" : "getRelationshipName()$0",
        "[M]getChildSObject()\tSchema.SObjectType" : "getChildSObject()$0"
    },
    "TopicSuggestionPage" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]toString()\tString" : "toString()$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]topicSuggestions" : "topicSuggestions$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "ReportExtendedMetadata" : {
        "[M]getDetailColumnInfo()\tMAP<String,reports.DetailColumn>" : "getDetailColumnInfo()$0",
        "[M]setGroupingColumnInfo(MAP<String,reports.GroupingColumn> groupingColumnInfo)\tvoid" : "setGroupingColumnInfo($0)",
        "[M]setAggregateColumnInfo(MAP<String,reports.AggregateColumn> aggregateColumnInfo)\tvoid" : "setAggregateColumnInfo($0)",
        "[M]setDetailColumnInfo(MAP<String,reports.DetailColumn> detailColumnInfo)\tvoid" : "setDetailColumnInfo($0)",
        "[M]getAggregateColumnInfo()\tMAP<String,reports.AggregateColumn>" : "getAggregateColumnInfo()$0",
        "[M]getGroupingColumnInfo()\tMAP<String,reports.GroupingColumn>" : "getGroupingColumnInfo()$0"
    },
    "DocsController" : {},
    "MergeResult" : {
        "[M]getId()\tId" : "getId()$0",
        "[M]getMergedRecordIds()\tLIST<String>" : "getMergedRecordIds()$0",
        "[M]getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "[M]isSuccess()\tBoolean" : "isSuccess()$0",
        "[M]getUpdatedRelatedIds()\tLIST<String>" : "getUpdatedRelatedIds()$0"
    },
    "FinalException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ProcedureException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "DescribeLayoutRow" : {
        "[M]getNumItems()\tInteger" : "getNumItems()$0",
        "[M]getLayoutItems()\tLIST<QuickAction.DescribeLayoutItem>" : "getLayoutItems()$0"
    },
    "MetadataException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "PageReference" : {
        "[M]getParameters()\tMAP<String,String>" : "getParameters()$0",
        "[M]getCookies()\tMAP<String,System.Cookie>" : "getCookies()$0",
        "[M]getContentAsPDF()\tBlob" : "getContentAsPDF()$0",
        "[M]setCookies(LIST<System.Cookie> cookies)\tvoid" : "setCookies($0)",
        "[M]setAnchor(String anchor)\tSystem.PageReference" : "setAnchor($0)",
        "[M]getHeaders()\tMAP<String,String>" : "getHeaders()$0",
        "[M]getUrl()\tString" : "getUrl()$0",
        "[M]getContent()\tBlob" : "getContent()$0",
        "[M]getAnchor()\tString" : "getAnchor()$0",
        "[M]getRedirect()\tBoolean" : "getRedirect()$0",
        "[M]setRedirect(Boolean redirect)\tSystem.PageReference" : "setRedirect($0)"
    },
    "Messaging" : {
        "[M]sendEmail(LIST<Messaging.Email> emailMessages)\tLIST<Messaging.SendEmailResult>" : "sendEmail($0)",
        "[M]sendEmailMessage(LIST<Id> emailMessagesIds)\tLIST<Messaging.SendEmailResult>" : "sendEmailMessage($0)",
        "[M]reserveMassEmailCapacity(Integer count)\tvoid" : "reserveMassEmailCapacity($0)",
        "[M]sendEmail(LIST<Messaging.Email> emailMessages, Boolean allOrNothing)\tLIST<Messaging.SendEmailResult>" : "sendEmail($0)",
        "[M]reserveSingleEmailCapacity(Integer count)\tvoid" : "reserveSingleEmailCapacity($0)",
        "[M]sendEmailMessage(LIST<Id> emailMessagesIds, Boolean allOrNothing)\tLIST<Messaging.SendEmailResult>" : "sendEmailMessage($0)"
    },
    "InvalidReadOnlyUserDmlException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "MentionSegment" : {
        "[P]user" : "user$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]accessible" : "accessible$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]record" : "record$0"
    },
    "ComponentIteration" : {
        "[M]getComponentById(String id)\tApexPages.Component" : "getComponentById($0)",
        "[P]iterationValue" : "iterationValue$0",
        "[P]childComponents" : "childComponents$0",
        "[P]parent" : "parent$0"
    },
    "InvalidFilterException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0",
        "[M]getFilterErrorMap()\tMAP<String,String>" : "getFilterErrorMap()$0"
    },
    "Community" : {
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[P]sendWelcomeEmail" : "sendWelcomeEmail$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]urlPathPrefix" : "urlPathPrefix$0",
        "[P]description" : "description$0",
        "[P]status" : "status$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]id" : "id$0",
        "[P]invitationsEnabled" : "invitationsEnabled$0",
        "[P]url" : "url$0"
    },
    "ApprovalPostTemplateField" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]displayValue" : "displayValue$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]record" : "record$0",
        "[P]displayName" : "displayName$0"
    },
    "RestResponse" : {
        "[P]responseBody" : "responseBody$0",
        "[P]headers" : "headers$0",
        "[M]addHeader(String name, String value)\tvoid" : "addHeader($0)",
        "[P]statusCode" : "statusCode$0"
    },
    "Component" : {
        "[M]getComponentById(String id)\tApexPages.Component" : "getComponentById($0)",
        "[P]rendered" : "rendered$0",
        "[P]childComponents" : "childComponents$0",
        "[P]id" : "id$0",
        "[P]facets" : "facets$0",
        "[P]componentIterations" : "componentIterations$0",
        "[P]expressions" : "expressions$0",
        "[P]parent" : "parent$0"
    },
    "GroupInformationInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]text" : "text$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0"
    },
    "UserSummary" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]isActive" : "isActive$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "FeedSortOrder" : {
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]CreatedDateDesc" : "CreatedDateDesc$0",
        "[P]LastModifiedDateDesc" : "LastModifiedDateDesc$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]values()\tLIST<ConnectApi.FeedSortOrder>" : "values()$0"
    },
    "ChatterMessage" : {
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]body" : "body$0",
        "[P]recipients" : "recipients$0",
        "[P]sender" : "sender$0",
        "[P]sentDate" : "sentDate$0",
        "[P]id" : "id$0",
        "[P]conversationUrl" : "conversationUrl$0",
        "[P]conversationId" : "conversationId$0",
        "[P]url" : "url$0"
    },
    "SparkPlugDescribeResult" : {
        "[P]inputParameters" : "inputParameters$0",
        "[P]outputParameters" : "outputParameters$0",
        "[P]name" : "name$0"
    },
    "ParameterType" : {
        "[P]STRING" : "STRING$0",
        "[P]LONG" : "LONG$0",
        "[P]DOUBLE" : "DOUBLE$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]FLOAT" : "FLOAT$0",
        "[P]DATETIME" : "DATETIME$0",
        "[P]INTEGER" : "INTEGER$0",
        "[P]DATE" : "DATE$0",
        "[M]values()\tLIST<Process.PluginDescribeResult.ParameterType>" : "values()$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]ID" : "ID$0",
        "[P]BOOLEAN" : "BOOLEAN$0",
        "[P]DECIMAL" : "DECIMAL$0"
    },
    "MentionCompletionType" : {
        "[P]User" : "User$0",
        "[M]values()\tLIST<ConnectApi.MentionCompletionType>" : "values()$0",
        "[P]All" : "All$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Group" : "Group$0"
    },
    "Header" : {
        "[P]value" : "value$0",
        "[P]name" : "name$0"
    },
    "InboundSocialPostHandlerImpl" : {
        "[M]handleInboundSocialPost(SocialPost post, SocialPersona persona, MAP<String,ANY> rawData)\tSocial.InboundSocialPostResult" : "handleInboundSocialPost($0)",
        "[M]usePersonAccount()\tBoolean" : "usePersonAccount()$0",
        "[M]getDefaultAccountId()\tString" : "getDefaultAccountId()$0",
        "[M]getMaxNumberOfDaysClosedToReopenCase()\tInteger" : "getMaxNumberOfDaysClosedToReopenCase()$0"
    },
    "EmailToSalesforceHandler" : {},
    "Set" : {
        "[M]isEmpty()\tBoolean" : "isEmpty()$0",
        "[M]size()\tInteger" : "size()$0",
        "[M]add(ANY element)\tBoolean" : "add($0)",
        "[M]containsAll(LIST elements)\tBoolean" : "containsAll($0)",
        "[M]equals(ANY obj)\tBoolean" : "equals($0)",
        "[M]contains(ANY element)\tBoolean" : "contains($0)",
        "[M]remove(ANY element)\tBoolean" : "remove($0)",
        "[M]retainAll(LIST elements)\tBoolean" : "retainAll($0)",
        "[M]retainAll(SET elements)\tBoolean" : "retainAll($0)",
        "[M]addAll(SET elements)\tBoolean" : "addAll($0)",
        "[M]containsAll(SET elements)\tBoolean" : "containsAll($0)",
        "[M]addAll(LIST elements)\tBoolean" : "addAll($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]iterator()\tsystem.ListIterator" : "iterator()$0",
        "[M]removeAll(SET elements)\tBoolean" : "removeAll($0)",
        "[M]clear()\tvoid" : "clear()$0",
        "[M]removeAll(LIST elements)\tBoolean" : "removeAll($0)",
        "[M]clone()\tSET<String>" : "clone()$0"
    },
    "Schedulable" : {
        "[M]execute(system.SchedulableContext param1)\tvoid" : "execute($0)"
    },
    "Feed" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]feedItemsUrl" : "feedItemsUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]isModifiedUrl" : "isModifiedUrl$0"
    },
    "LinkAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]urlName" : "urlName$0",
        "[P]url" : "url$0"
    },
    "PicklistEntry" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]isActive()\tBoolean" : "isActive()$0",
        "[M]getValue()\tString" : "getValue()$0",
        "[M]isDefaultValue()\tBoolean" : "isDefaultValue()$0"
    },
    "JSONException" : {
        "[M]initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "[M]getLineNumber()\tInteger" : "getLineNumber()$0",
        "[M]getMessage()\tString" : "getMessage()$0",
        "[M]setMessage(String message)\tvoid" : "setMessage($0)",
        "[M]getCause()\tException" : "getCause()$0",
        "[M]getStackTraceString()\tString" : "getStackTraceString()$0",
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ChatterLike" : {
        "[P]user" : "user$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]likedItem" : "likedItem$0",
        "[P]url" : "url$0"
    },
    "ReportRunException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "ReportResults" : {
        "[M]getGroupingsAcross()\treports.Dimension" : "getGroupingsAcross()$0",
        "[M]setAllData(Boolean allData)\tvoid" : "setAllData($0)",
        "[M]setGroupingsAcross(reports.Dimension groupingsAcross)\tvoid" : "setGroupingsAcross($0)",
        "[M]getGroupingsDown()\treports.Dimension" : "getGroupingsDown()$0",
        "[M]setGroupingsDown(reports.Dimension groupingsDown)\tvoid" : "setGroupingsDown($0)",
        "[M]getReportExtendedMetadata()\treports.ReportExtendedMetadata" : "getReportExtendedMetadata()$0",
        "[M]setFactMap(MAP<String,reports.ReportFact> factMap)\tvoid" : "setFactMap($0)",
        "[M]setHasDetailRows(Boolean hasDetailRows)\tvoid" : "setHasDetailRows($0)",
        "[M]getReportMetadata()\treports.ReportMetadata" : "getReportMetadata()$0",
        "[M]setReportExtendedMetadata(reports.ReportExtendedMetadata reportExtendedMetadata)\tvoid" : "setReportExtendedMetadata($0)",
        "[M]setReportMetadata(reports.ReportMetadata reportMetadata)\tvoid" : "setReportMetadata($0)",
        "[M]getHasDetailRows()\tBoolean" : "getHasDetailRows()$0",
        "[M]getFactMap()\tMAP<String,reports.ReportFact>" : "getFactMap()$0",
        "[M]setAttributes(MAP<String,String> attributes)\tvoid" : "setAttributes($0)",
        "[M]getAttributes()\tMAP<String,String>" : "getAttributes()$0",
        "[M]getAllData()\tBoolean" : "getAllData()$0"
    },
    "Message" : {
        "[M]getSeverity()\tApexPages.Severity" : "getSeverity()$0",
        "[M]getSummary()\tString" : "getSummary()$0",
        "[M]getDetail()\tString" : "getDetail()$0",
        "[M]getComponentLabel()\tString" : "getComponentLabel()$0"
    },
    "Comment" : {
        "[P]feedItem" : "feedItem$0",
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]parent" : "parent$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]createdDate" : "createdDate$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]likes" : "likes$0",
        "[P]body" : "body$0",
        "[P]user" : "user$0",
        "[P]relativeCreatedDate" : "relativeCreatedDate$0",
        "[P]moderationFlags" : "moderationFlags$0",
        "[P]myLike" : "myLike$0",
        "[P]isDeleteRestricted" : "isDeleteRestricted$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]attachment" : "attachment$0",
        "[P]likesMessage" : "likesMessage$0",
        "[P]id" : "id$0",
        "[P]clientInfo" : "clientInfo$0",
        "[P]url" : "url$0"
    },
    "DescribeLayoutComponent" : {
        "[M]getDisplayLines()\tInteger" : "getDisplayLines()$0",
        "[M]getValue()\tString" : "getValue()$0",
        "[M]getTabOrder()\tInteger" : "getTabOrder()$0",
        "[M]getType()\tString" : "getType()$0"
    },
    "UserGroupPage" : {
        "[P]nextPageUrl" : "nextPageUrl$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]total" : "total$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]currentPageUrl" : "currentPageUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]groups" : "groups$0",
        "[P]previousPageUrl" : "previousPageUrl$0"
    },
    "CommunityPage" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]communities" : "communities$0",
        "[P]total" : "total$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "Pattern" : {
        "[M]pattern()\tString" : "pattern()$0",
        "[M]matches(String regex, String input)\tBoolean" : "matches($0)",
        "[M]compile(String regex)\tsystem.Pattern" : "compile($0)",
        "[M]quote(String s)\tString" : "quote($0)",
        "[M]matcher(String input)\tsystem.Matcher" : "matcher($0)",
        "[M]split(String input, Integer n)\tLIST<String>" : "split($0)",
        "[M]split(String input)\tLIST<String>" : "split($0)"
    },
    "Site" : {
        "[M]getOriginalUrl()\tString" : "getOriginalUrl()$0",
        "[M]getAdminId()\tId" : "getAdminId()$0",
        "[M]createPortalUser(SObject user, String accountId)\tId" : "createPortalUser($0)",
        "[M]createPortalUser(SObject user, String accountId, String password)\tId" : "createPortalUser($0)",
        "[M]createPersonAccountPortalUser(SObject user, String ownerId, String recordTypeId, String password)\tId" : "createPersonAccountPortalUser($0)",
        "[M]getDomain()\tString" : "getDomain()$0",
        "[M]isPasswordExpired()\tBoolean" : "isPasswordExpired()$0",
        "[M]changePassword(String newPassword, String verifyNewPassword)\tSystem.PageReference" : "changePassword($0)",
        "[M]getPrefix()\tString" : "getPrefix()$0",
        "[M]getAnalyticsTrackingCode()\tString" : "getAnalyticsTrackingCode()$0",
        "[M]getCustomWebAddress()\tString" : "getCustomWebAddress()$0",
        "[M]isLoginEnabled()\tBoolean" : "isLoginEnabled()$0",
        "[M]createPortalUser(SObject user, String accountId, String password, Boolean sendEmailConfirmation)\tId" : "createPortalUser($0)",
        "[M]getCurrentSiteUrl()\tString" : "getCurrentSiteUrl()$0",
        "[M]createPersonAccountPortalUser(SObject user, String ownerId, String password)\tId" : "createPersonAccountPortalUser($0)",
        "[M]getErrorMessage()\tString" : "getErrorMessage()$0",
        "[M]getTemplate()\tSystem.PageReference" : "getTemplate()$0",
        "[M]login(String username, String password, String startUrl)\tSystem.PageReference" : "login($0)",
        "[M]getErrorDescription()\tString" : "getErrorDescription()$0",
        "[M]setPortalUserAsAuthProvider(SObject user, String accountId)\tvoid" : "setPortalUserAsAuthProvider($0)",
        "[M]getName()\tString" : "getName()$0",
        "[M]forgotPassword(String username)\tBoolean" : "forgotPassword($0)",
        "[M]isRegistrationEnabled()\tBoolean" : "isRegistrationEnabled()$0",
        "[M]getAdminEmail()\tString" : "getAdminEmail()$0",
        "[M]changePassword(String newPassword, String verifyNewPassword, String oldPassword)\tSystem.PageReference" : "changePassword($0)"
    },
    "Dimension" : {
        "[M]getGroupings()\tLIST<reports.GroupingValue>" : "getGroupings()$0",
        "[M]setGroupings(LIST<reports.GroupingValue> groupings)\tvoid" : "setGroupings($0)"
    },
    "BinaryAttachment" : {
        "[P]mimeTypeSubType" : "mimeTypeSubType$0",
        "[P]body" : "body$0",
        "[P]fileName" : "fileName$0"
    },
    "Photo" : {
        "[P]photoVersionId" : "photoVersionId$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]fullEmailPhotoUrl" : "fullEmailPhotoUrl$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]smallPhotoUrl" : "smallPhotoUrl$0",
        "[P]standardEmailPhotoUrl" : "standardEmailPhotoUrl$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]largePhotoUrl" : "largePhotoUrl$0",
        "[P]url" : "url$0"
    },
    "MentionValidation" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]recordId" : "recordId$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]validationStatus" : "validationStatus$0"
    },
    "NotFoundException" : {
        "[M]getTypeName()\tString" : "getTypeName()$0"
    },
    "HashtagSegmentInput" : {
        "[P]tag" : "tag$0",
        "[M]toString()\tString" : "toString()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "NewFileAttachmentInput" : {
        "[M]toString()\tString" : "toString()$0",
        "[M]convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0",
        "[P]description" : "description$0"
    },
    "ColumnSortOrder" : {
        "[P]ASCENDING" : "ASCENDING$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]values()\tLIST<reports.ColumnSortOrder>" : "values()$0",
        "[P]DESCENDING" : "DESCENDING$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "User" : {
        "[P]companyName" : "companyName$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]lastName" : "lastName$0",
        "[P]photo" : "photo$0",
        "[P]isInThisCommunity" : "isInThisCommunity$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]userType" : "userType$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]title" : "title$0",
        "[P]firstName" : "firstName$0"
    },
    "ApprovalAttachment" : {
        "[M]toString()\tString" : "toString()$0",
        "[P]postTemplateFields" : "postTemplateFields$0",
        "[P]status" : "status$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]id" : "id$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "SummaryValue" : {
        "[M]getLabel()\tString" : "getLabel()$0",
        "[M]setValue(Object value)\tvoid" : "setValue($0)",
        "[M]getValue()\tObject" : "getValue()$0",
        "[M]setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "OrganizationSettings" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[P]accessTimeout" : "accessTimeout$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]features" : "features$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]userSettings" : "userSettings$0",
        "[P]orgId" : "orgId$0"
    },
    "GroupEmailFrequency" : {
        "[P]EachPost" : "EachPost$0",
        "[P]DailyDigest" : "DailyDigest$0",
        "[M]values()\tLIST<ConnectApi.GroupEmailFrequency>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]WeeklyDigest" : "WeeklyDigest$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]Never" : "Never$0",
        "[P]UseDefault" : "UseDefault$0"
    },
    "FeedDensity" : {
        "[P]AllUpdates" : "AllUpdates$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]values()\tLIST<ConnectApi.FeedDensity>" : "values()$0",
        "[P]FewerUpdates" : "FewerUpdates$0",
        "[M]hashCode()\tInteger" : "hashCode()$0"
    },
    "XmlTag" : {
        "[P]DTD" : "DTD$0",
        "[P]CDATA" : "CDATA$0",
        "[P]ENTITY_DECLARATION" : "ENTITY_DECLARATION$0",
        "[M]values()\tLIST<system.XmlTag>" : "values()$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]CHARACTERS" : "CHARACTERS$0",
        "[P]SPACE" : "SPACE$0",
        "[P]END_ELEMENT" : "END_ELEMENT$0",
        "[P]NAMESPACE" : "NAMESPACE$0",
        "[P]NOTATION_DECLARATION" : "NOTATION_DECLARATION$0",
        "[P]PROCESSING_INSTRUCTION" : "PROCESSING_INSTRUCTION$0",
        "[P]ENTITY_REFERENCE" : "ENTITY_REFERENCE$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]START_DOCUMENT" : "START_DOCUMENT$0",
        "[P]COMMENT" : "COMMENT$0",
        "[P]START_ELEMENT" : "START_ELEMENT$0",
        "[P]END_DOCUMENT" : "END_DOCUMENT$0",
        "[P]ATTRIBUTE" : "ATTRIBUTE$0"
    },
    "SingleEmailMessage" : {
        "[M]getUseSignature()\tBoolean" : "getUseSignature()$0",
        "[M]getTargetObjectId()\tId" : "getTargetObjectId()$0",
        "[M]setPlainTextBody(String param1)\tvoid" : "setPlainTextBody($0)",
        "[M]setSubject(String param1)\tvoid" : "setSubject($0)",
        "[M]setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "[M]setToAddresses(LIST<String> param1)\tvoid" : "setToAddresses($0)",
        "[M]getToAddresses()\tLIST<String>" : "getToAddresses()$0",
        "[M]setTargetObjectId(Id param1)\tvoid" : "setTargetObjectId($0)",
        "[M]setInReplyTo(String param1)\tvoid" : "setInReplyTo($0)",
        "[M]getTemplateId()\tId" : "getTemplateId()$0",
        "[M]setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "[M]setDocumentAttachments(LIST<String> param1)\tvoid" : "setDocumentAttachments($0)",
        "[M]setCcAddresses(LIST<String> param1)\tvoid" : "setCcAddresses($0)",
        "[M]setHtmlBody(String param1)\tvoid" : "setHtmlBody($0)",
        "[M]setFileAttachments(LIST<Messaging.EmailFileAttachment> param1)\tvoid" : "setFileAttachments($0)",
        "[M]setReplyTo(String param1)\tvoid" : "setReplyTo($0)",
        "[M]setReferences(String param1)\tvoid" : "setReferences($0)",
        "[M]getPlainTextBody()\tString" : "getPlainTextBody()$0",
        "[M]getHtmlBody()\tString" : "getHtmlBody()$0",
        "[M]setOrgWideEmailAddressId(Id param1)\tvoid" : "setOrgWideEmailAddressId($0)",
        "[M]getSubject()\tString" : "getSubject()$0",
        "[M]getBccAddresses()\tLIST<String>" : "getBccAddresses()$0",
        "[M]setBccAddresses(LIST<String> param1)\tvoid" : "setBccAddresses($0)",
        "[M]getFileAttachments()\tLIST<Messaging.EmailFileAttachment>" : "getFileAttachments()$0",
        "[M]getInReplyTo()\tString" : "getInReplyTo()$0",
        "[M]getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "[M]getCcAddresses()\tLIST<String>" : "getCcAddresses()$0",
        "[M]getReplyTo()\tString" : "getReplyTo()$0",
        "[M]getReferences()\tString" : "getReferences()$0",
        "[M]getCharset()\tString" : "getCharset()$0",
        "[M]getWhatId()\tId" : "getWhatId()$0",
        "[M]setTemplateId(Id param1)\tvoid" : "setTemplateId($0)",
        "[M]setWhatId(Id param1)\tvoid" : "setWhatId($0)",
        "[M]getDocumentAttachments()\tLIST<String>" : "getDocumentAttachments()$0",
        "[M]setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "[M]setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "[M]setCharset(String param1)\tvoid" : "setCharset($0)",
        "[M]getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "[M]setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "[M]getEmailPriority()\tString" : "getEmailPriority()$0",
        "[M]isUserMail()\tBoolean" : "isUserMail()$0",
        "[M]getBccSender()\tBoolean" : "getBccSender()$0",
        "[M]getOrgWideEmailAddressId()\tId" : "getOrgWideEmailAddressId()$0"
    },
    "GlobalInfluence" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]rank" : "rank$0",
        "[P]percentile" : "percentile$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "Math" : {
        "[M]max(Long x, Long y)\tLong" : "max($0)",
        "[M]atan2(Decimal x, Decimal y)\tDecimal" : "atan2($0)",
        "[M]asin(Decimal x)\tDecimal" : "asin($0)",
        "[M]acos(Decimal x)\tDecimal" : "acos($0)",
        "[M]log(Double x)\tDouble" : "log($0)",
        "[M]atan(Decimal x)\tDecimal" : "atan($0)",
        "[M]cos(Double x)\tDouble" : "cos($0)",
        "[M]abs(Double x)\tDouble" : "abs($0)",
        "[M]min(Long x, Long y)\tLong" : "min($0)",
        "[M]sqrt(Double x)\tDouble" : "sqrt($0)",
        "[M]rint(Double x)\tDouble" : "rint($0)",
        "[M]round(Double x)\tInteger" : "round($0)",
        "[M]roundToLong(Double x)\tLong" : "roundToLong($0)",
        "[M]log(Decimal x)\tDecimal" : "log($0)",
        "[M]cbrt(Double x)\tDouble" : "cbrt($0)",
        "[M]ceil(Decimal x)\tDecimal" : "ceil($0)",
        "[M]cos(Decimal x)\tDecimal" : "cos($0)",
        "[M]atan2(Double x, Double y)\tDouble" : "atan2($0)",
        "[M]mod(Integer x, Integer y)\tInteger" : "mod($0)",
        "[M]log10(Decimal x)\tDecimal" : "log10($0)",
        "[M]asin(Double x)\tDouble" : "asin($0)",
        "[M]max(Double x, Double y)\tDouble" : "max($0)",
        "[M]ceil(Double x)\tDouble" : "ceil($0)",
        "[M]tanh(Double x)\tDouble" : "tanh($0)",
        "[M]abs(Integer x)\tInteger" : "abs($0)",
        "[M]atan(Double x)\tDouble" : "atan($0)",
        "[M]sin(Double x)\tDouble" : "sin($0)",
        "[M]tanh(Decimal x)\tDecimal" : "tanh($0)",
        "[M]abs(Long x)\tLong" : "abs($0)",
        "[M]max(Decimal x, Decimal y)\tDecimal" : "max($0)",
        "[M]min(Integer x, Integer y)\tInteger" : "min($0)",
        "[M]abs(Decimal x)\tDecimal" : "abs($0)",
        "[M]signum(Decimal x)\tDecimal" : "signum($0)",
        "[M]tan(Double x)\tDouble" : "tan($0)",
        "[M]random()\tDouble" : "random()$0",
        "[M]sin(Decimal x)\tDecimal" : "sin($0)",
        "[M]min(Decimal x, Decimal y)\tDecimal" : "min($0)",
        "[M]pow(Double base, Double exp)\tDouble" : "pow($0)",
        "[M]floor(Decimal x)\tDecimal" : "floor($0)",
        "[M]signum(Double x)\tDouble" : "signum($0)",
        "[M]cbrt(Decimal x)\tDecimal" : "cbrt($0)",
        "[M]exp(Decimal x)\tDecimal" : "exp($0)",
        "[M]rint(Decimal x)\tDecimal" : "rint($0)",
        "[M]mod(Long x, Long y)\tLong" : "mod($0)",
        "[M]log10(Double x)\tDouble" : "log10($0)",
        "[M]sqrt(Decimal x)\tDecimal" : "sqrt($0)",
        "[M]cosh(Double x)\tDouble" : "cosh($0)",
        "[M]round(Decimal x)\tInteger" : "round($0)",
        "[M]sinh(Decimal x)\tDecimal" : "sinh($0)",
        "[M]floor(Double x)\tDouble" : "floor($0)",
        "[M]roundToLong(Decimal x)\tLong" : "roundToLong($0)",
        "[M]max(Integer x, Integer y)\tInteger" : "max($0)",
        "[M]acos(Double x)\tDouble" : "acos($0)",
        "[M]sinh(Double x)\tDouble" : "sinh($0)",
        "[M]min(Double x, Double y)\tDouble" : "min($0)",
        "[M]tan(Decimal x)\tDecimal" : "tan($0)",
        "[M]cosh(Decimal x)\tDecimal" : "cosh($0)",
        "[M]exp(Double x)\tDouble" : "exp($0)"
    },
    "Schema" : {
        "[M]getAppDescribe(String appName)\tMAP<String,Schema.SObjectType>" : "getAppDescribe($0)",
        "[M]getGlobalDescribe()\tMAP<String,Schema.SObjectType>" : "getGlobalDescribe()$0",
        "[M]describeTabs()\tLIST<Schema.DescribeTabSetResult>" : "describeTabs()$0",
        "[M]describeDataCategoryGroupStructures(LIST<Schema.DataCategoryGroupSobjectTypePair> pairs, Boolean topCategoriesOnly)\tLIST<Schema.DescribeDataCategoryGroupStructureResult>" : "describeDataCategoryGroupStructures($0)",
        "[M]describeDataCategoryGroups(LIST<String> sobjects)\tLIST<Schema.DescribeDataCategoryGroupResult>" : "describeDataCategoryGroups($0)",
        "[M]describeSObjects(LIST<String> types)\tLIST<Schema.DescribeSObjectResult>" : "describeSObjects($0)",
        "[M]getModuleDescribe()\tMAP<String,Schema.SObjectType>" : "getModuleDescribe()$0",
        "[M]getModuleDescribe(String moduleName)\tMAP<String,Schema.SObjectType>" : "getModuleDescribe($0)"
    },
    "FeedItem" : {
        "[P]type" : "type$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]id" : "id$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "[P]actor" : "actor$0",
        "[P]isLikedByCurrentUser" : "isLikedByCurrentUser$0",
        "[P]canShare" : "canShare$0",
        "[P]topics" : "topics$0",
        "[P]preamble" : "preamble$0",
        "[P]attachment" : "attachment$0",
        "[P]comments" : "comments$0",
        "[P]event" : "event$0",
        "[P]visibility" : "visibility$0",
        "[P]photoUrl" : "photoUrl$0",
        "[P]url" : "url$0",
        "[P]modifiedDate" : "modifiedDate$0",
        "[P]originalFeedItemActor" : "originalFeedItemActor$0",
        "[P]createdDate" : "createdDate$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]body" : "body$0",
        "[P]originalFeedItem" : "originalFeedItem$0",
        "[P]likesMessage" : "likesMessage$0",
        "[P]relativeCreatedDate" : "relativeCreatedDate$0",
        "[P]myLike" : "myLike$0",
        "[P]isDeleteRestricted" : "isDeleteRestricted$0",
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[P]likes" : "likes$0",
        "[P]isBookmarkedByCurrentUser" : "isBookmarkedByCurrentUser$0",
        "[P]moderationFlags" : "moderationFlags$0",
        "[P]clientInfo" : "clientInfo$0",
        "[P]parent" : "parent$0"
    },
    "TopicSuggestion" : {
        "[M]hashCode()\tInteger" : "hashCode()$0",
        "[M]toString()\tString" : "toString()$0",
        "[P]name" : "name$0",
        "[M]equals(Object obj)\tBoolean" : "equals($0)",
        "[P]existingTopic" : "existingTopic$0",
        "[M]getBuildVersion()\tDouble" : "getBuildVersion()$0"
    },
    "ProcessWorkitemRequest" : {
        "[M]getAction()\tString" : "getAction()$0",
        "[M]setAction(String param1)\tvoid" : "setAction($0)",
        "[M]getWorkitemId()\tString" : "getWorkitemId()$0",
        "[M]setWorkitemId(String param1)\tvoid" : "setWorkitemId($0)"
    },
    "Action" : {
        "[M]getExpression()\tString" : "getExpression()$0",
        "[M]invoke()\tSystem.PageReference" : "invoke()$0"
    },
    "Datetime" : {
        "[M]parse(String str)\tDatetime" : "parse($0)",
        "[M]timeGmt()\tTime" : "timeGmt()$0",
        "[M]formatGmt(String dateformat)\tString" : "formatGmt($0)",
        "[M]addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]time()\tTime" : "time()$0",
        "[M]dateGmt()\tDate" : "dateGmt()$0",
        "[M]month()\tInteger" : "month()$0",
        "[M]hourGmt()\tInteger" : "hourGmt()$0",
        "[M]newInstanceGmt(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime" : "newInstanceGmt($0)",
        "[M]valueOf(Object o)\tDatetime" : "valueOf($0)",
        "[M]addMonths(Integer months)\tDatetime" : "addMonths($0)",
        "[M]millisecond()\tInteger" : "millisecond()$0",
        "[M]now()\tDatetime" : "now()$0",
        "[M]yearGmt()\tInteger" : "yearGmt()$0",
        "[M]addHours(Integer hours)\tDatetime" : "addHours($0)",
        "[M]getTime()\tLong" : "getTime()$0",
        "[M]format(String dateformat)\tString" : "format($0)",
        "[M]addMinutes(Integer minutes)\tDatetime" : "addMinutes($0)",
        "[M]newInstance(Long time)\tDatetime" : "newInstance($0)",
        "[M]date()\tDate" : "date()$0",
        "[M]minute()\tInteger" : "minute()$0",
        "[M]isSameDay(Datetime other)\tBoolean" : "isSameDay($0)",
        "[M]formatLong()\tString" : "formatLong()$0",
        "[M]secondGmt()\tInteger" : "secondGmt()$0",
        "[M]year()\tInteger" : "year()$0",
        "[M]valueOf(String str)\tDatetime" : "valueOf($0)",
        "[M]addSeconds(Integer seconds)\tDatetime" : "addSeconds($0)",
        "[M]addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "[M]valueOfGmt(String str)\tDatetime" : "valueOfGmt($0)",
        "[M]format()\tString" : "format()$0",
        "[M]newInstanceGmt(Integer year, Integer month, Integer day)\tDatetime" : "newInstanceGmt($0)",
        "[M]day()\tInteger" : "day()$0",
        "[M]addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "[M]hour()\tInteger" : "hour()$0",
        "[M]newInstance(Integer year, Integer month, Integer day)\tDatetime" : "newInstance($0)",
        "[M]newInstance(Date date, Time time)\tDatetime" : "newInstance($0)",
        "[M]addYears(Integer years)\tDatetime" : "addYears($0)",
        "[M]millisecondGmt()\tInteger" : "millisecondGmt()$0",
        "[M]format(String dateformat, String timezone)\tString" : "format($0)",
        "[M]addError(String msg)\tvoid" : "addError($0)",
        "[M]monthGmt()\tInteger" : "monthGmt()$0",
        "[M]second()\tInteger" : "second()$0",
        "[M]dayOfYear()\tInteger" : "dayOfYear()$0",
        "[M]dayOfYearGmt()\tInteger" : "dayOfYearGmt()$0",
        "[M]addDays(Integer days)\tDatetime" : "addDays($0)",
        "[M]newInstance(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime" : "newInstance($0)",
        "[M]dayGmt()\tInteger" : "dayGmt()$0",
        "[M]minuteGmt()\tInteger" : "minuteGmt()$0",
        "[M]newInstanceGmt(Date date, Time time)\tDatetime" : "newInstanceGmt($0)"
    },
    "ApexPages" : {
        "[M]currentPage()\tSystem.PageReference" : "currentPage()$0",
        "[M]addMessage(ApexPages.Message message)\tvoid" : "addMessage($0)",
        "[M]hasMessages(ApexPages.Severity severity)\tBoolean" : "hasMessages($0)",
        "[M]addMessages(APEX_OBJECT ex)\tvoid" : "addMessages($0)",
        "[M]getMessages()\tLIST<ApexPages.Message>" : "getMessages()$0",
        "[M]hasMessages()\tBoolean" : "hasMessages()$0"
    }
}
