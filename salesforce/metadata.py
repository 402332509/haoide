apex_completions = {
    "communitypage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "communities" : "communities$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "cases" : {
        "getCaseIdFromEmailThreadId(String emailThreadId)\tId" : "getCaseIdFromEmailThreadId($0)"
    },
    "photo" : {
        "photoVersionId" : "photoVersionId$0",
        "fullEmailPhotoUrl" : "fullEmailPhotoUrl$0",
        "smallPhotoUrl" : "smallPhotoUrl$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "largePhotoUrl" : "largePhotoUrl$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "standardEmailPhotoUrl" : "standardEmailPhotoUrl$0",
        "toString()\tString" : "toString()$0"
    },
    "assertexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "plugin" : {
        "invoke(Process.PluginRequest param1)\tProcess.PluginResult" : "invoke($0)",
        "describe()\tProcess.PluginDescribeResult" : "describe()$0"
    },
    "canvasattachmentinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "namespacePrefix" : "namespacePrefix$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "thumbnailUrl" : "thumbnailUrl$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "height" : "height$0",
        "parameters" : "parameters$0",
        "title" : "title$0",
        "developerName" : "developerName$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "network" : {
        "getNetworkId()\tString" : "getNetworkId()$0",
        "forwardToAuthPage(String startUrl, String displayType)\tSystem.PageReference" : "forwardToAuthPage($0)",
        "communitiesLanding()\tSystem.PageReference" : "communitiesLanding()$0",
        "forwardToAuthPage(String startUrl)\tSystem.PageReference" : "forwardToAuthPage($0)"
    },
    "string" : {
        "escapeHtml3()\tString" : "escapeHtml3()$0",
        "getCommonPrefix(LIST strings)\tString" : "getCommonPrefix($0)",
        "indexOfAnyBut(String searchChars)\tInteger" : "indexOfAnyBut($0)",
        "valueOfGmt(Datetime dt)\tString" : "valueOfGmt($0)",
        "substringAfterLast(String separator)\tString" : "substringAfterLast($0)",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "isAlphaSpace()\tBoolean" : "isAlphaSpace()$0",
        "valueOf(Date d)\tString" : "valueOf($0)",
        "escapeSingleQuotes(String s)\tString" : "escapeSingleQuotes($0)",
        "isNotEmpty(String str)\tBoolean" : "isNotEmpty($0)",
        "remove(String toRemove)\tString" : "remove($0)",
        "trim()\tString" : "trim()$0",
        "escapeEcmaScript()\tString" : "escapeEcmaScript()$0",
        "substringBetween(String open, String close)\tString" : "substringBetween($0)",
        "toLowerCase(String locale)\tString" : "toLowerCase($0)",
        "replaceAll(String regex, String replacement)\tString" : "replaceAll($0)",
        "reverse()\tString" : "reverse()$0",
        "replace(String target, String replacement)\tString" : "replace($0)",
        "mid(Integer pos, Integer len)\tString" : "mid($0)",
        "stripHtmlTags()\tString" : "stripHtmlTags()$0",
        "containsAny(String validChars)\tBoolean" : "containsAny($0)",
        "unescapeXml()\tString" : "unescapeXml()$0",
        "equals(String other)\tBoolean" : "equals($0)",
        "unescapeHtml4()\tString" : "unescapeHtml4()$0",
        "rightPad(Integer len)\tString" : "rightPad($0)",
        "capitalize()\tString" : "capitalize()$0",
        "escapeXml()\tString" : "escapeXml()$0",
        "indexOf(String str)\tInteger" : "indexOf($0)",
        "indexOfDifference(String other)\tInteger" : "indexOfDifference($0)",
        "getLevenshteinDistance(String other)\tInteger" : "getLevenshteinDistance($0)",
        "repeat(Integer numTimes)\tString" : "repeat($0)",
        "contains(String str)\tBoolean" : "contains($0)",
        "substringBeforeLast(String separator)\tString" : "substringBeforeLast($0)",
        "isEmpty(String str)\tBoolean" : "isEmpty($0)",
        "isAlphanumericSpace()\tBoolean" : "isAlphanumericSpace()$0",
        "valueOf(Datetime dt)\tString" : "valueOf($0)",
        "normalizeSpace()\tString" : "normalizeSpace()$0",
        "center(Integer size, String padStr)\tString" : "center($0)",
        "valueOf(Long l)\tString" : "valueOf($0)",
        "removeStart(String toRemove)\tString" : "removeStart($0)",
        "escapeHtml4()\tString" : "escapeHtml4()$0",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "countMatches(String searchStr)\tInteger" : "countMatches($0)",
        "lastIndexOfIgnoreCase(String searchStr, Integer startPos)\tInteger" : "lastIndexOfIgnoreCase($0)",
        "splitByCharacterTypeCamelCase()\tLIST<String>" : "splitByCharacterTypeCamelCase()$0",
        "substringBetween(String tag)\tString" : "substringBetween($0)",
        "deleteWhitespace()\tString" : "deleteWhitespace()$0",
        "isNotBlank(String str)\tBoolean" : "isNotBlank($0)",
        "indexOfIgnoreCase(String searchStr, Integer startPos)\tInteger" : "indexOfIgnoreCase($0)",
        "isWhitespace()\tBoolean" : "isWhitespace()$0",
        "endsWithIgnoreCase(String suffix)\tBoolean" : "endsWithIgnoreCase($0)",
        "compareTo(String str)\tInteger" : "compareTo($0)",
        "indexOfAny(String searchChars)\tInteger" : "indexOfAny($0)",
        "indexOf(String str, Integer startPos)\tInteger" : "indexOf($0)",
        "isBlank(String str)\tBoolean" : "isBlank($0)",
        "removeStartIgnoreCase(String toRemove)\tString" : "removeStartIgnoreCase($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "equalsIgnoreCase(String other)\tBoolean" : "equalsIgnoreCase($0)",
        "isAlpha()\tBoolean" : "isAlpha()$0",
        "isAsciiPrintable()\tBoolean" : "isAsciiPrintable()$0",
        "length()\tInteger" : "length()$0",
        "left(Integer len)\tString" : "left($0)",
        "format(String format, LIST<String> arguments)\tString" : "format($0)",
        "unescapeEcmaScript()\tString" : "unescapeEcmaScript()$0",
        "splitByCharacterType()\tLIST<String>" : "splitByCharacterType()$0",
        "overlay(String overlay, Integer start, Integer end)\tString" : "overlay($0)",
        "isNumeric()\tBoolean" : "isNumeric()$0",
        "removeEnd(String toRemove)\tString" : "removeEnd($0)",
        "containsIgnoreCase(String searchStr)\tBoolean" : "containsIgnoreCase($0)",
        "valueOf(Decimal d)\tString" : "valueOf($0)",
        "containsWhitespace()\tBoolean" : "containsWhitespace()$0",
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "rightPad(Integer len, String padStr)\tString" : "rightPad($0)",
        "unescapeHtml3()\tString" : "unescapeHtml3()$0",
        "uncapitalize()\tString" : "uncapitalize()$0",
        "toUpperCase()\tString" : "toUpperCase()$0",
        "lastIndexOf(String searchStr, Integer startPos)\tInteger" : "lastIndexOf($0)",
        "endsWith(String str)\tBoolean" : "endsWith($0)",
        "leftPad(Integer len)\tString" : "leftPad($0)",
        "join(APEX_OBJECT iterableObj, String separator)\tString" : "join($0)",
        "containsNone(String invalidChars)\tBoolean" : "containsNone($0)",
        "removeEndIgnoreCase(String toRemove)\tString" : "removeEndIgnoreCase($0)",
        "isAllLowerCase()\tBoolean" : "isAllLowerCase()$0",
        "lastIndexOf(String str)\tInteger" : "lastIndexOf($0)",
        "right(Integer len)\tString" : "right($0)",
        "difference(String other)\tString" : "difference($0)",
        "getLevenshteinDistance(String other, Integer threshold)\tInteger" : "getLevenshteinDistance($0)",
        "valueOf(Integer i)\tString" : "valueOf($0)",
        "isAlphanumeric()\tBoolean" : "isAlphanumeric()$0",
        "split(String regex, Integer limit)\tLIST<String>" : "split($0)",
        "split(String regex)\tLIST<String>" : "split($0)",
        "unescapeCsv()\tString" : "unescapeCsv()$0",
        "substringBefore(String separator)\tString" : "substringBefore($0)",
        "valueOf(Object o)\tString" : "valueOf($0)",
        "isAllUpperCase()\tBoolean" : "isAllUpperCase()$0",
        "abbreviate(Integer maxWidth, Integer offset)\tString" : "abbreviate($0)",
        "substring(Integer start)\tString" : "substring($0)",
        "indexOfIgnoreCase(String searchStr)\tInteger" : "indexOfIgnoreCase($0)",
        "abbreviate(Integer maxWidth)\tString" : "abbreviate($0)",
        "swapCase()\tString" : "swapCase()$0",
        "startsWith(String str)\tBoolean" : "startsWith($0)",
        "leftPad(Integer len, String padStr)\tString" : "leftPad($0)",
        "startsWithIgnoreCase(String prefix)\tBoolean" : "startsWithIgnoreCase($0)",
        "lastIndexOfIgnoreCase(String searchStr)\tInteger" : "lastIndexOfIgnoreCase($0)",
        "isNumericSpace()\tBoolean" : "isNumericSpace()$0",
        "addError(String msg)\tvoid" : "addError($0)",
        "fromCharArray(LIST<Integer> charArr)\tString" : "fromCharArray($0)",
        "substring(Integer start, Integer end)\tString" : "substring($0)",
        "containsOnly(String validChars)\tBoolean" : "containsOnly($0)",
        "repeat(String separator, Integer numTimes)\tString" : "repeat($0)",
        "substringAfter(String separator)\tString" : "substringAfter($0)",
        "toUpperCase(String locale)\tString" : "toUpperCase($0)",
        "escapeCsv()\tString" : "escapeCsv()$0",
        "center(Integer size)\tString" : "center($0)",
        "replaceFirst(String regex, String replacement)\tString" : "replaceFirst($0)",
        "toLowerCase()\tString" : "toLowerCase()$0",
        "valueOf(Double d)\tString" : "valueOf($0)"
    },
    "displaytype" : {
        "DATETIME" : "DATETIME$0",
        "EMAIL" : "EMAIL$0",
        "PHONE" : "PHONE$0",
        "TEXTAREA" : "TEXTAREA$0",
        "LOCATION" : "LOCATION$0",
        "CURRENCY" : "CURRENCY$0",
        "DOUBLE" : "DOUBLE$0",
        "MULTIPICKLIST" : "MULTIPICKLIST$0",
        "REFERENCE" : "REFERENCE$0",
        "values()\tLIST<Schema.DisplayType>" : "values()$0",
        "COMPLEXVALUE" : "COMPLEXVALUE$0",
        "PERCENT" : "PERCENT$0",
        "ANYTYPE" : "ANYTYPE$0",
        "PICKLIST" : "PICKLIST$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "ENCRYPTEDSTRING" : "ENCRYPTEDSTRING$0",
        "STRING" : "STRING$0",
        "BASE64" : "BASE64$0",
        "INTEGER" : "INTEGER$0",
        "ID" : "ID$0",
        "DATE" : "DATE$0",
        "TIME" : "TIME$0",
        "DATACATEGORYGROUPREFERENCE" : "DATACATEGORYGROUPREFERENCE$0",
        "COMBOBOX" : "COMBOBOX$0",
        "URL" : "URL$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "BOOLEAN" : "BOOLEAN$0"
    },
    "applauncherapexcontroller" : {
        "getApps()\tLIST<AppMenuItem>" : "getApps()$0"
    },
    "document" : {
        "getRootElement()\tdom.XmlNode" : "getRootElement()$0",
        "createRootElement(String name, String namespace, String prefix)\tdom.XmlNode" : "createRootElement($0)",
        "load(String xml)\tvoid" : "load($0)",
        "toXmlString()\tString" : "toXmlString()$0"
    },
    "recordsummary" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "dategranularity" : {
        "FISCAL_PERIOD" : "FISCAL_PERIOD$0",
        "MONTH" : "MONTH$0",
        "FISCAL_QUARTER" : "FISCAL_QUARTER$0",
        "values()\tLIST<reports.DateGranularity>" : "values()$0",
        "NONE" : "NONE$0",
        "QUARTER" : "QUARTER$0",
        "FISCAL_WEEK" : "FISCAL_WEEK$0",
        "DAY" : "DAY$0",
        "WEEK" : "WEEK$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "YEAR" : "YEAR$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "FISCAL_YEAR" : "FISCAL_YEAR$0",
        "DAY_IN_MONTH" : "DAY_IN_MONTH$0",
        "MONTH_IN_YEAR" : "MONTH_IN_YEAR$0"
    },
    "getupdatedresult" : {
        "getIds()\tLIST<Id>" : "getIds()$0",
        "getLatestDateCovered()\tDate" : "getLatestDateCovered()$0"
    },
    "blankrecordfield" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "invalidparametervalueexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "reportfact" : {
        "setKey(String key)\tvoid" : "setKey($0)",
        "setAggregates(LIST<reports.SummaryValue> aggregates)\tvoid" : "setAggregates($0)",
        "getAggregates()\tLIST<reports.SummaryValue>" : "getAggregates()$0",
        "getKey()\tString" : "getKey()$0"
    },
    "processworkitemrequest" : {
        "setAction(String param1)\tvoid" : "setAction($0)",
        "setWorkitemId(String param1)\tvoid" : "setWorkitemId($0)",
        "getAction()\tString" : "getAction()$0",
        "getWorkitemId()\tString" : "getWorkitemId()$0"
    },
    "chattergroupinput" : {
        "owner" : "owner$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "description" : "description$0",
        "toString()\tString" : "toString()$0",
        "isArchived" : "isArchived$0",
        "name" : "name$0",
        "information" : "information$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "canHaveChatterGuests" : "canHaveChatterGuests$0",
        "isAutoArchiveDisabled" : "isAutoArchiveDisabled$0",
        "visibility" : "visibility$0"
    },
    "morechangessegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "moreChanges" : "moreChanges$0",
        "moreChangesCount" : "moreChangesCount$0",
        "toString()\tString" : "toString()$0"
    },
    "filepublishstatus" : {
        "values()\tLIST<ConnectApi.FilePublishStatus>" : "values()$0",
        "PendingAccess" : "PendingAccess$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "PublicAccess" : "PublicAccess$0",
        "PrivateAccess" : "PrivateAccess$0"
    },
    "emailaddress" : {
        "emailAddress" : "emailAddress$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "displayName" : "displayName$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "logginglevel" : {
        "INFO" : "INFO$0",
        "WARN" : "WARN$0",
        "DEBUG" : "DEBUG$0",
        "ERROR" : "ERROR$0",
        "INTERNAL" : "INTERNAL$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "FINEST" : "FINEST$0",
        "FINER" : "FINER$0",
        "values()\tLIST<system.LoggingLevel>" : "values()$0",
        "FINE" : "FINE$0"
    },
    "chattermessage" : {
        "conversationUrl" : "conversationUrl$0",
        "sentDate" : "sentDate$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "conversationId" : "conversationId$0",
        "recipients" : "recipients$0",
        "id" : "id$0",
        "body" : "body$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "sender" : "sender$0"
    },
    "mobilepushnotification" : {
        "setPayload(MAP<String,ANY> payload)\tvoid" : "setPayload($0)",
        "send(String application, SET<String> users)\tvoid" : "send($0)",
        "setTtl(Integer ttl)\tvoid" : "setTtl($0)"
    },
    "json" : {
        "createGenerator(Boolean pretty)\tsystem.JSONGenerator" : "createGenerator($0)",
        "createParser(String jsonString)\tsystem.JSONParser" : "createParser($0)",
        "serializePretty(Object o)\tString" : "serializePretty($0)",
        "deserialize(String jsonString, system.Type apexType)\tObject" : "deserialize($0)",
        "serialize(Object o)\tString" : "serialize($0)",
        "deserializeStrict(String jsonString, system.Type apexType)\tObject" : "deserializeStrict($0)",
        "deserializeUntyped(String jsonString)\tObject" : "deserializeUntyped($0)"
    },
    "reportinstance" : {
        "setReportId(Id reportId)\tvoid" : "setReportId($0)",
        "getUrl()\tString" : "getUrl()$0",
        "setUrl(String url)\tvoid" : "setUrl($0)",
        "getReportId()\tId" : "getReportId()$0"
    },
    "id" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "getSobjectType()\tSchema.SObjectType" : "getSobjectType()$0",
        "valueOf(String str)\tId" : "valueOf($0)",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)"
    },
    "context" : {
        "sobjects" : "sobjects$0"
    },
    "time" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "minute()\tInteger" : "minute()$0",
        "addMinutes(Integer minutes)\tTime" : "addMinutes($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "addMilliseconds(Integer milliseconds)\tTime" : "addMilliseconds($0)",
        "millisecond()\tInteger" : "millisecond()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "addSeconds(Integer seconds)\tTime" : "addSeconds($0)",
        "newInstance(Integer hour, Integer minute, Integer second, Integer millisecond)\tTime" : "newInstance($0)",
        "hour()\tInteger" : "hour()$0",
        "second()\tInteger" : "second()$0",
        "addHours(Integer hours)\tTime" : "addHours($0)"
    },
    "photoinput" : {
        "cropSize" : "cropSize$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "cropY" : "cropY$0",
        "cropX" : "cropX$0",
        "fileId" : "fileId$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "versionNumber" : "versionNumber$0",
        "toString()\tString" : "toString()$0"
    },
    "zonesearchpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "currentPageToken" : "currentPageToken$0",
        "items" : "items$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "phonenumber" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "type" : "type$0",
        "phoneNumber" : "phoneNumber$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "describequickactiondefaultvalue" : {
        "getDefaultValue()\tString" : "getDefaultValue()$0",
        "getField()\tString" : "getField()$0"
    },
    "feeditemattachment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "type" : "type$0",
        "toString()\tString" : "toString()$0"
    },
    "referencewithdaterecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "reference" : "reference$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "dateValue" : "dateValue$0",
        "toString()\tString" : "toString()$0"
    },
    "ideas" : {
        "getAllRecentReplies(String userId, String communityId)\tLIST<Id>" : "getAllRecentReplies($0)",
        "markRead(String ideaId)\tvoid" : "markRead($0)",
        "findSimilar(SObject idea)\tLIST<Id>" : "findSimilar($0)",
        "getUnreadRecentReplies(String userId, String communityId)\tLIST<Id>" : "getUnreadRecentReplies($0)",
        "getReadRecentReplies(String userId, String communityId)\tLIST<Id>" : "getReadRecentReplies($0)"
    },
    "mentions" : {
        "setTestGetMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionPage result)\tvoid" : "setTestGetMentionCompletions($0)",
        "getMentionCompletions(String communityId, String q, String contextId)\tConnectApi.MentionCompletionPage" : "getMentionCompletions($0)",
        "getMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize)\tConnectApi.MentionCompletionPage" : "getMentionCompletions($0)",
        "getMentionValidations(String communityId, String parentId, LIST<String> recordIds, ConnectApi.FeedItemVisibilityType visibility)\tConnectApi.MentionValidations" : "getMentionValidations($0)",
        "setTestGetMentionCompletions(String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize, ConnectApi.MentionCompletionPage result)\tvoid" : "setTestGetMentionCompletions($0)"
    },
    "datetime" : {
        "secondGmt()\tInteger" : "secondGmt()$0",
        "month()\tInteger" : "month()$0",
        "dayGmt()\tInteger" : "dayGmt()$0",
        "millisecond()\tInteger" : "millisecond()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "dayOfYearGmt()\tInteger" : "dayOfYearGmt()$0",
        "getTime()\tLong" : "getTime()$0",
        "isSameDay(Datetime other)\tBoolean" : "isSameDay($0)",
        "dateGmt()\tDate" : "dateGmt()$0",
        "newInstance(Integer year, Integer month, Integer day)\tDatetime" : "newInstance($0)",
        "yearGmt()\tInteger" : "yearGmt()$0",
        "hourGmt()\tInteger" : "hourGmt()$0",
        "hour()\tInteger" : "hour()$0",
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "second()\tInteger" : "second()$0",
        "valueOf(Object o)\tDatetime" : "valueOf($0)",
        "addMinutes(Integer minutes)\tDatetime" : "addMinutes($0)",
        "addDays(Integer days)\tDatetime" : "addDays($0)",
        "newInstanceGmt(Date date, Time time)\tDatetime" : "newInstanceGmt($0)",
        "newInstance(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime" : "newInstance($0)",
        "year()\tInteger" : "year()$0",
        "addHours(Integer hours)\tDatetime" : "addHours($0)",
        "time()\tTime" : "time()$0",
        "format()\tString" : "format()$0",
        "minute()\tInteger" : "minute()$0",
        "dayOfYear()\tInteger" : "dayOfYear()$0",
        "millisecondGmt()\tInteger" : "millisecondGmt()$0",
        "date()\tDate" : "date()$0",
        "monthGmt()\tInteger" : "monthGmt()$0",
        "minuteGmt()\tInteger" : "minuteGmt()$0",
        "newInstanceGmt(Integer year, Integer month, Integer day)\tDatetime" : "newInstanceGmt($0)",
        "formatLong()\tString" : "formatLong()$0",
        "addSeconds(Integer seconds)\tDatetime" : "addSeconds($0)",
        "formatGmt(String dateformat)\tString" : "formatGmt($0)",
        "newInstance(Date date, Time time)\tDatetime" : "newInstance($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "valueOfGmt(String str)\tDatetime" : "valueOfGmt($0)",
        "format(String dateformat, String timezone)\tString" : "format($0)",
        "addMonths(Integer months)\tDatetime" : "addMonths($0)",
        "now()\tDatetime" : "now()$0",
        "day()\tInteger" : "day()$0",
        "timeGmt()\tTime" : "timeGmt()$0",
        "newInstanceGmt(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime" : "newInstanceGmt($0)",
        "format(String dateformat)\tString" : "format($0)",
        "valueOf(String str)\tDatetime" : "valueOf($0)",
        "newInstance(Long time)\tDatetime" : "newInstance($0)",
        "addYears(Integer years)\tDatetime" : "addYears($0)",
        "parse(String str)\tDatetime" : "parse($0)"
    },
    "feeditemtype" : {
        "ApprovalPost" : "ApprovalPost$0",
        "BasicTemplateFeedItem" : "BasicTemplateFeedItem$0",
        "CallLogPost" : "CallLogPost$0",
        "DashboardComponentSnapshot" : "DashboardComponentSnapshot$0",
        "ChangeStatusPost" : "ChangeStatusPost$0",
        "CollaborationGroupCreated" : "CollaborationGroupCreated$0",
        "PollPost" : "PollPost$0",
        "DashboardComponentAlert" : "DashboardComponentAlert$0",
        "AttachArticleEvent" : "AttachArticleEvent$0",
        "CreateRecordEvent" : "CreateRecordEvent$0",
        "values()\tLIST<ConnectApi.FeedItemType>" : "values()$0",
        "ActivityEvent" : "ActivityEvent$0",
        "TrackedChange" : "TrackedChange$0",
        "EmailMessageEvent" : "EmailMessageEvent$0",
        "ChatTranscriptPost" : "ChatTranscriptPost$0",
        "ContentPost" : "ContentPost$0",
        "FacebookPost" : "FacebookPost$0",
        "CanvasPost" : "CanvasPost$0",
        "CaseCommentPost" : "CaseCommentPost$0",
        "AnnouncementPost" : "AnnouncementPost$0",
        "CollaborationGroupUnarchived" : "CollaborationGroupUnarchived$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "RypplePost" : "RypplePost$0",
        "MilestoneEvent" : "MilestoneEvent$0",
        "SocialPost" : "SocialPost$0",
        "LinkPost" : "LinkPost$0",
        "UserStatus" : "UserStatus$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "TextPost" : "TextPost$0",
        "ReplyPost" : "ReplyPost$0"
    },
    "mobilepushpayload" : {
        "apple(String alert, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>" : "apple($0)",
        "apple(String alertBody, String actionLocKey, String locKey, LIST<String> locArgs, String launchImage, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>" : "apple($0)"
    },
    "abstractrecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "type" : "type$0",
        "toString()\tString" : "toString()$0"
    },
    "emptystackexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "severity" : {
        "FATAL" : "FATAL$0",
        "INFO" : "INFO$0",
        "ERROR" : "ERROR$0",
        "WARNING" : "WARNING$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "CONFIRM" : "CONFIRM$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ApexPages.Severity>" : "values()$0"
    },
    "sendemailerror" : {
        "getFields()\tLIST<String>" : "getFields()$0",
        "getMessage()\tString" : "getMessage()$0",
        "getStatusCode()\tsystem.StatusCode" : "getStatusCode()$0",
        "getTargetObjectId()\tString" : "getTargetObjectId()$0"
    },
    "entitylinksegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "reference" : "reference$0",
        "motif" : "motif$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "resourcelinksegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "url" : "url$0",
        "toString()\tString" : "toString()$0"
    },
    "reportfactwithsummaries" : {},
    "chatterfeeds" : {
        "deleteFeedItem(String communityId, String feedItemId)\tvoid" : "deleteFeedItem($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "getFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFilterFeed($0)",
        "getFeedPoll(String communityId, String feedItemId)\tConnectApi.FeedPoll" : "getFeedPoll($0)",
        "setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)",
        "updateBookmark(String communityId, String feedItemId, Boolean isBookmarkedByCurrentUser)\tConnectApi.FeedItem" : "updateBookmark($0)",
        "getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFeed($0)",
        "postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemInput feedItem, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.FeedItem" : "postFeedItem($0)",
        "getCommentsForFeedItem(String communityId, String feedItemId)\tConnectApi.CommentPage" : "getCommentsForFeedItem($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "getFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.Feed" : "getFeed($0)",
        "postComment(String communityId, String feedItemId, ConnectApi.CommentInput comment, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.Comment" : "postComment($0)",
        "postComment(String communityId, String feedItemId, String text)\tConnectApi.Comment" : "postComment($0)",
        "setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "likeFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLike" : "likeFeedItem($0)",
        "likeComment(String communityId, String commentId)\tConnectApi.ChatterLike" : "likeComment($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "deleteLike(String communityId, String likeId)\tvoid" : "deleteLike($0)",
        "searchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "getLikesForFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLikePage" : "getLikesForFeedItem($0)",
        "setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "getFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.Feed" : "getFilterFeed($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "getLike(String communityId, String likeId)\tConnectApi.ChatterLike" : "getLike($0)",
        "isModified(String communityId, ConnectApi.FeedType feedType, String subjectId, String since)\tConnectApi.FeedModifiedInfo" : "isModified($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "shareFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String originalFeedItemId)\tConnectApi.FeedItem" : "shareFeedItem($0)",
        "getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "searchFeedItems(String communityId, String q, String pageParam, Integer pageSize)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "getLikesForComment(String communityId, String commentId)\tConnectApi.ChatterLikePage" : "getLikesForComment($0)",
        "searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "searchFeedItems(String communityId, String q)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "voteOnFeedPoll(String communityId, String feedItemId, String myChoiceId)\tConnectApi.FeedPoll" : "voteOnFeedPoll($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)",
        "setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "getFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed" : "getFeed($0)",
        "postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String text)\tConnectApi.FeedItem" : "postFeedItem($0)",
        "setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.Feed" : "getFeed($0)",
        "getComment(String communityId, String commentId)\tConnectApi.Comment" : "getComment($0)",
        "searchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.FeedItemPage" : "getFeedItemsFromFilterFeed($0)",
        "getLikesForFeedItem(String communityId, String feedItemId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage" : "getLikesForFeedItem($0)",
        "deleteComment(String communityId, String commentId)\tvoid" : "deleteComment($0)",
        "searchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "searchFeedItems($0)",
        "setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFilterFeed($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFilterFeed($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "getFeedItem(String communityId, String feedItemId)\tConnectApi.FeedItem" : "getFeedItem($0)",
        "setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItemsFromFeed($0)",
        "getLikesForComment(String communityId, String commentId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage" : "getLikesForComment($0)",
        "setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItemsInFeed($0)",
        "searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFilterFeed($0)",
        "setTestSearchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestSearchFeedItems($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.FeedItemPage" : "getFeedItemsFromFeed($0)",
        "searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage" : "searchFeedItemsInFeed($0)",
        "getCommentsForFeedItem(String communityId, String feedItemId, String pageParam, Integer pageSize)\tConnectApi.CommentPage" : "getCommentsForFeedItem($0)"
    },
    "site" : {
        "getErrorDescription()\tString" : "getErrorDescription()$0",
        "createPersonAccountPortalUser(SObject user, String ownerId, String password)\tId" : "createPersonAccountPortalUser($0)",
        "isPasswordExpired()\tBoolean" : "isPasswordExpired()$0",
        "getCurrentSiteUrl()\tString" : "getCurrentSiteUrl()$0",
        "getCustomWebAddress()\tString" : "getCustomWebAddress()$0",
        "setPortalUserAsAuthProvider(SObject user, String accountId)\tvoid" : "setPortalUserAsAuthProvider($0)",
        "createPortalUser(SObject user, String accountId, String password)\tId" : "createPortalUser($0)",
        "getPrefix()\tString" : "getPrefix()$0",
        "changePassword(String newPassword, String verifyNewPassword)\tSystem.PageReference" : "changePassword($0)",
        "getDomain()\tString" : "getDomain()$0",
        "getName()\tString" : "getName()$0",
        "getErrorMessage()\tString" : "getErrorMessage()$0",
        "getTemplate()\tSystem.PageReference" : "getTemplate()$0",
        "isLoginEnabled()\tBoolean" : "isLoginEnabled()$0",
        "getAnalyticsTrackingCode()\tString" : "getAnalyticsTrackingCode()$0",
        "isRegistrationEnabled()\tBoolean" : "isRegistrationEnabled()$0",
        "changePassword(String newPassword, String verifyNewPassword, String oldPassword)\tSystem.PageReference" : "changePassword($0)",
        "getAdminEmail()\tString" : "getAdminEmail()$0",
        "createPortalUser(SObject user, String accountId, String password, Boolean sendEmailConfirmation)\tId" : "createPortalUser($0)",
        "createPortalUser(SObject user, String accountId)\tId" : "createPortalUser($0)",
        "forgotPassword(String username)\tBoolean" : "forgotPassword($0)",
        "getAdminId()\tId" : "getAdminId()$0",
        "getOriginalUrl()\tString" : "getOriginalUrl()$0",
        "createPersonAccountPortalUser(SObject user, String ownerId, String recordTypeId, String password)\tId" : "createPersonAccountPortalUser($0)",
        "login(String username, String password, String startUrl)\tSystem.PageReference" : "login($0)"
    },
    "mentioncompletionpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "mentionCompletions" : "mentionCompletions$0",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "actiondml" : {
        "invoke()\tvoid" : "invoke()$0"
    },
    "trackedchangeitem" : {
        "newValue" : "newValue$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "oldValue" : "oldValue$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "fieldName" : "fieldName$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "emailtosalesforcehandler" : {},
    "restresponse" : {
        "responseBody" : "responseBody$0",
        "addHeader(String name, String value)\tvoid" : "addHeader($0)",
        "statusCode" : "statusCode$0",
        "headers" : "headers$0"
    },
    "datacategorygroupsobjecttypepair" : {
        "setSobject(String param1)\tvoid" : "setSobject($0)",
        "getSobject()\tString" : "getSobject()$0",
        "setDataCategoryGroupName(String param1)\tvoid" : "setDataCategoryGroupName($0)",
        "getDataCategoryGroupName()\tString" : "getDataCategoryGroupName()$0"
    },
    "hashtagsegmentinput" : {
        "tag" : "tag$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "schema" : {
        "describeTabs()\tLIST<Schema.DescribeTabSetResult>" : "describeTabs()$0",
        "describeDataCategoryGroups(LIST<String> sobjects)\tLIST<Schema.DescribeDataCategoryGroupResult>" : "describeDataCategoryGroups($0)",
        "describeDataCategoryGroupStructures(LIST<Schema.DataCategoryGroupSobjectTypePair> pairs, Boolean topCategoriesOnly)\tLIST<Schema.DescribeDataCategoryGroupStructureResult>" : "describeDataCategoryGroupStructures($0)",
        "getAppDescribe(String appName)\tMAP<String,Schema.SObjectType>" : "getAppDescribe($0)",
        "getModuleDescribe()\tMAP<String,Schema.SObjectType>" : "getModuleDescribe()$0",
        "describeSObjects(LIST<String> types)\tLIST<Schema.DescribeSObjectResult>" : "describeSObjects($0)",
        "getModuleDescribe(String moduleName)\tMAP<String,Schema.SObjectType>" : "getModuleDescribe($0)",
        "getGlobalDescribe()\tMAP<String,Schema.SObjectType>" : "getGlobalDescribe()$0"
    },
    "dashboardcomponentattachment" : {
        "dashboardBodyText" : "dashboardBodyText$0",
        "runningUser" : "runningUser$0",
        "lastRefreshDateDisplayText" : "lastRefreshDateDisplayText$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "componentName" : "componentName$0",
        "dashboardId" : "dashboardId$0",
        "toString()\tString" : "toString()$0",
        "lastRefreshDate" : "lastRefreshDate$0",
        "componentId" : "componentId$0",
        "fullSizeImageUrl" : "fullSizeImageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "thumbnailUrl" : "thumbnailUrl$0",
        "dashboardName" : "dashboardName$0"
    },
    "ideastandardcontroller" : {
        "getId()\tString" : "getId()$0",
        "delete()\tSystem.PageReference" : "delete()$0",
        "edit()\tSystem.PageReference" : "edit()$0",
        "save()\tSystem.PageReference" : "save()$0",
        "reset()\tvoid" : "reset()$0",
        "cancel()\tSystem.PageReference" : "cancel()$0",
        "getCommentList()\tLIST<IdeaComment>" : "getCommentList()$0",
        "addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "view()\tSystem.PageReference" : "view()$0",
        "getRecord()\tSObject" : "getRecord()$0",
        "getSubject()\tSObject" : "getSubject()$0"
    },
    "reporttypemetadata" : {
        "getCategories()\tLIST<reports.ReportTypeColumnCategory>" : "getCategories()$0",
        "setCategories(LIST<reports.ReportTypeColumnCategory> categories)\tvoid" : "setCategories($0)"
    },
    "describeiconresult" : {
        "getContentType()\tString" : "getContentType()$0",
        "getHeight()\tInteger" : "getHeight()$0",
        "getUrl()\tString" : "getUrl()$0",
        "getTheme()\tString" : "getTheme()$0",
        "getWidth()\tInteger" : "getWidth()$0"
    },
    "error" : {
        "getFields()\tLIST<String>" : "getFields()$0",
        "getMessage()\tString" : "getMessage()$0",
        "getStatusCode()\tsystem.StatusCode" : "getStatusCode()$0"
    },
    "reportinstanceattributes" : {
        "getId()\tId" : "getId()$0",
        "setId(Id id)\tvoid" : "setId($0)",
        "getRequestDate()\tString" : "getRequestDate()$0",
        "setStatus(String status)\tvoid" : "setStatus($0)",
        "getCompletionDate()\tString" : "getCompletionDate()$0",
        "setCompletionDate(String completionDate)\tvoid" : "setCompletionDate($0)",
        "getOwnerId()\tId" : "getOwnerId()$0",
        "setRequestDate(String requestDate)\tvoid" : "setRequestDate($0)",
        "getStatus()\tString" : "getStatus()$0",
        "setOwnerId(Id ownerId)\tvoid" : "setOwnerId($0)"
    },
    "groupinginfo" : {
        "getDateGranularity()\treports.DateGranularity" : "getDateGranularity()$0",
        "setSortOrder(String value)\tvoid" : "setSortOrder($0)",
        "setDateGranularity(reports.DateGranularity dateGranularity)\tvoid" : "setDateGranularity($0)",
        "getName()\tString" : "getName()$0",
        "getSortOrder()\treports.ColumnSortOrder" : "getSortOrder()$0",
        "setSortOrder(reports.ColumnSortOrder sortOrder)\tvoid" : "setSortOrder($0)",
        "setDateGranularity(String value)\tvoid" : "setDateGranularity($0)",
        "setName(String name)\tvoid" : "setName($0)"
    },
    "inboundemailresult" : {
        "message" : "message$0",
        "success" : "success$0"
    },
    "user" : {
        "lastName" : "lastName$0",
        "photo" : "photo$0",
        "title" : "title$0",
        "isInThisCommunity" : "isInThisCommunity$0",
        "companyName" : "companyName$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "firstName" : "firstName$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "userType" : "userType$0",
        "toString()\tString" : "toString()$0"
    },
    "reportfilter" : {
        "getOperator()\tString" : "getOperator()$0",
        "setValue(String value)\tvoid" : "setValue($0)",
        "setColumn(String column)\tvoid" : "setColumn($0)",
        "getColumn()\tString" : "getColumn()$0",
        "getValue()\tString" : "getValue()$0",
        "setOperator(String operator)\tvoid" : "setOperator($0)"
    },
    "queryexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "mentioncompletiontype" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "Group" : "Group$0",
        "values()\tLIST<ConnectApi.MentionCompletionType>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "All" : "All$0",
        "User" : "User$0"
    },
    "reportdatacell" : {
        "getValue()\tObject" : "getValue()$0",
        "setValue(Object value)\tvoid" : "setValue($0)",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "linksegmentinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "url" : "url$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "textattachment" : {
        "fileName" : "fileName$0",
        "mimeTypeSubType" : "mimeTypeSubType$0",
        "charset" : "charset$0",
        "body" : "body$0",
        "bodyIsTruncated" : "bodyIsTruncated$0"
    },
    "communitymoderation" : {
        "addFlagToComment(String communityId, String commentId)\tConnectApi.ModerationFlags" : "addFlagToComment($0)",
        "getFlagsOnFeedItem(String communityId, String feedItemId)\tConnectApi.ModerationFlags" : "getFlagsOnFeedItem($0)",
        "addFlagToFeedItem(String communityId, String feedItemId)\tConnectApi.ModerationFlags" : "addFlagToFeedItem($0)",
        "removeFlagFromComment(String communityId, String commentId, String userId)\tvoid" : "removeFlagFromComment($0)",
        "removeFlagFromFeedItem(String communityId, String feedItemId, String userId)\tvoid" : "removeFlagFromFeedItem($0)",
        "getFlagsOnComment(String communityId, String commentId)\tConnectApi.ModerationFlags" : "getFlagsOnComment($0)"
    },
    "casecomment" : {
        "text" : "text$0",
        "actorType" : "actorType$0",
        "eventType" : "eventType$0",
        "published" : "published$0",
        "createdDate" : "createdDate$0",
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "createdBy" : "createdBy$0",
        "toString()\tString" : "toString()$0"
    },
    "describetabresult" : {
        "getSobjectName()\tString" : "getSobjectName()$0",
        "getColors()\tLIST<Schema.DescribeColorResult>" : "getColors()$0",
        "getMiniIconUrl()\tString" : "getMiniIconUrl()$0",
        "getIconUrl()\tString" : "getIconUrl()$0",
        "getUrl()\tString" : "getUrl()$0",
        "getLabel()\tString" : "getLabel()$0",
        "isCustom()\tBoolean" : "isCustom()$0",
        "getIcons()\tLIST<Schema.DescribeIconResult>" : "getIcons()$0"
    },
    "restrequest" : {
        "requestURI" : "requestURI$0",
        "addHeader(String name, String value)\tvoid" : "addHeader($0)",
        "addParameter(String name, String value)\tvoid" : "addParameter($0)",
        "httpMethod" : "httpMethod$0",
        "remoteAddress" : "remoteAddress$0",
        "requestBody" : "requestBody$0",
        "resourcePath" : "resourcePath$0",
        "params" : "params$0",
        "headers" : "headers$0"
    },
    "binaryattachment" : {
        "fileName" : "fileName$0",
        "mimeTypeSubType" : "mimeTypeSubType$0",
        "body" : "body$0"
    },
    "feeditemvisibilitytype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "values()\tLIST<ConnectApi.FeedItemVisibilityType>" : "values()$0",
        "AllUsers" : "AllUsers$0",
        "InternalUsers" : "InternalUsers$0",
        "hashCode()\tInteger" : "hashCode()$0"
    },
    "dmlexception" : {
        "getDmlStatusCode(Integer index)\tString" : "getDmlStatusCode($0)",
        "getDmlType(Integer index)\tsystem.StatusCode" : "getDmlType($0)",
        "getDmlMessage(Integer index)\tString" : "getDmlMessage($0)",
        "getDmlId(Integer index)\tString" : "getDmlId($0)",
        "getCause()\tException" : "getCause()$0",
        "getNumDml()\tInteger" : "getNumDml()$0",
        "getDmlFieldNames(Integer index)\tLIST<String>" : "getDmlFieldNames($0)",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "getDmlIndex(Integer index)\tInteger" : "getDmlIndex($0)",
        "getDmlFields(Integer index)\tLIST<Schema.SObjectField>" : "getDmlFields($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "requiredfeaturemissingexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "sortorder" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "Ascending" : "Ascending$0",
        "Descending" : "Descending$0",
        "values()\tLIST<ConnectApi.SortOrder>" : "values()$0"
    },
    "sendemailresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getErrors()\tLIST<Messaging.SendEmailError>" : "getErrors()$0"
    },
    "reportrunexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "getdeletedresult" : {
        "getEarliestDateAvailable()\tDate" : "getEarliestDateAvailable()$0",
        "getDeletedRecords()\tLIST<Database.DeletedRecord>" : "getDeletedRecords()$0",
        "getLatestDateCovered()\tDate" : "getLatestDateCovered()$0"
    },
    "address" : {
        "state" : "state$0",
        "street" : "street$0",
        "city" : "city$0",
        "formattedAddress" : "formattedAddress$0",
        "country" : "country$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "zip" : "zip$0",
        "toString()\tString" : "toString()$0"
    },
    "exception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "feedmodifiedinfo" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0",
        "isModifiedToken" : "isModifiedToken$0",
        "isModified" : "isModified$0",
        "nextPollUrl" : "nextPollUrl$0"
    },
    "chatterlike" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "user" : "user$0",
        "likedItem" : "likedItem$0",
        "toString()\tString" : "toString()$0"
    },
    "knowledgearticleversionstandardcontroller" : {
        "save()\tSystem.PageReference" : "save()$0",
        "addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "selectDataCategory(String categoryGroup, String category)\tvoid" : "selectDataCategory($0)",
        "reset()\tvoid" : "reset()$0",
        "cancel()\tSystem.PageReference" : "cancel()$0",
        "getRecord()\tSObject" : "getRecord()$0",
        "getSubject()\tSObject" : "getSubject()$0",
        "delete()\tSystem.PageReference" : "delete()$0",
        "edit()\tSystem.PageReference" : "edit()$0",
        "getSourceId()\tString" : "getSourceId()$0",
        "view()\tSystem.PageReference" : "view()$0",
        "getId()\tString" : "getId()$0"
    },
    "textsegment" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "icon" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "width" : "width$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "height" : "height$0",
        "toString()\tString" : "toString()$0"
    },
    "userchattersettings" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "defaultGroupEmailFrequency" : "defaultGroupEmailFrequency$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "connectapiexception" : {
        "getErrorCode()\tString" : "getErrorCode()$0",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "iterable" : {
        "iterator()\tsystem.Iterator" : "iterator()$0"
    },
    "filteroperator" : {
        "setName(String name)\tvoid" : "setName($0)",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "topicsuggestionpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "topicSuggestions" : "topicSuggestions$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "usercapabilities" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "canViewFeed" : "canViewFeed$0",
        "isModerator" : "isModerator$0",
        "canEdit" : "canEdit$0",
        "canDirectMessage" : "canDirectMessage$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "canFollow" : "canFollow$0",
        "canChat" : "canChat$0",
        "canViewFullProfile" : "canViewFullProfile$0",
        "toString()\tString" : "toString()$0"
    },
    "xmlstreamwriter" : {
        "writeProcessingInstruction(String target, String data)\tvoid" : "writeProcessingInstruction($0)",
        "writeEmptyElement(String prefix, String localName, String namesapceURI)\tvoid" : "writeEmptyElement($0)",
        "close()\tvoid" : "close()$0",
        "writeComment(String data)\tvoid" : "writeComment($0)",
        "writeCharacters(String text)\tvoid" : "writeCharacters($0)",
        "writeEndDocument()\tvoid" : "writeEndDocument()$0",
        "setDefaultNamespace(String uri)\tvoid" : "setDefaultNamespace($0)",
        "writeAttribute(String prefix, String namespaceURI, String localName, String value)\tvoid" : "writeAttribute($0)",
        "getXmlString()\tString" : "getXmlString()$0",
        "writeCData(String data)\tvoid" : "writeCData($0)",
        "writeStartElement(String prefix, String localName, String namesapceURI)\tvoid" : "writeStartElement($0)",
        "writeEndElement()\tvoid" : "writeEndElement()$0",
        "writeStartDocument(String encoding, String version)\tvoid" : "writeStartDocument($0)",
        "writeDefaultNamespace(String namesapceURI)\tvoid" : "writeDefaultNamespace($0)",
        "writeNamespace(String prefix, String namesapceURI)\tvoid" : "writeNamespace($0)"
    },
    "currency" : {
        "formatAmount()\tString" : "formatAmount()$0",
        "format()\tString" : "format()$0",
        "newInstance(Decimal amount, String isoCode)\tCURRENCY" : "newInstance($0)"
    },
    "xmltag" : {
        "NOTATION_DECLARATION" : "NOTATION_DECLARATION$0",
        "PROCESSING_INSTRUCTION" : "PROCESSING_INSTRUCTION$0",
        "COMMENT" : "COMMENT$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "NAMESPACE" : "NAMESPACE$0",
        "DTD" : "DTD$0",
        "values()\tLIST<system.XmlTag>" : "values()$0",
        "END_DOCUMENT" : "END_DOCUMENT$0",
        "SPACE" : "SPACE$0",
        "ATTRIBUTE" : "ATTRIBUTE$0",
        "CHARACTERS" : "CHARACTERS$0",
        "START_ELEMENT" : "START_ELEMENT$0",
        "CDATA" : "CDATA$0",
        "END_ELEMENT" : "END_ELEMENT$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "ENTITY_REFERENCE" : "ENTITY_REFERENCE$0",
        "START_DOCUMENT" : "START_DOCUMENT$0",
        "ENTITY_DECLARATION" : "ENTITY_DECLARATION$0"
    },
    "map" : {
        "values()\tLIST<String>" : "values()$0",
        "put(ANY key, ANY value)\tString" : "put($0)",
        "containsKey(ANY key)\tBoolean" : "containsKey($0)",
        "remove(ANY key)\tString" : "remove($0)",
        "putAll(LIST entries)\tvoid" : "putAll($0)",
        "putAll(MAP entries)\tvoid" : "putAll($0)",
        "clear()\tvoid" : "clear()$0",
        "getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "clone()\tMAP<String,String>" : "clone()$0",
        "keySet()\tSET<String>" : "keySet()$0",
        "equals(ANY obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "deepClone()\tMAP<String,String>" : "deepClone()$0",
        "get(ANY key)\tString" : "get($0)",
        "size()\tInteger" : "size()$0",
        "isEmpty()\tBoolean" : "isEmpty()$0"
    },
    "describecolorresult" : {
        "getContext()\tString" : "getContext()$0",
        "getColor()\tString" : "getColor()$0",
        "getTheme()\tString" : "getTheme()$0"
    },
    "list" : {
        "clear()\tvoid" : "clear()$0",
        "deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps)\tLIST<String>" : "deepClone($0)",
        "getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "remove(Integer index)\tObject" : "remove($0)",
        "add(Integer index, ANY element)\tvoid" : "add($0)",
        "add(ANY element)\tObject" : "add($0)",
        "iterator()\tsystem.ListIterator" : "iterator()$0",
        "get(Integer index)\tObject" : "get($0)",
        "set(Integer index, ANY value)\tvoid" : "set($0)",
        "clone()\tLIST<String>" : "clone()$0",
        "addAll(SET elements)\tvoid" : "addAll($0)",
        "sort()\tvoid" : "sort()$0",
        "deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tLIST<String>" : "deepClone($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(ANY obj)\tBoolean" : "equals($0)",
        "deepClone(Boolean preserveId)\tLIST<String>" : "deepClone($0)",
        "deepClone()\tLIST<String>" : "deepClone()$0",
        "size()\tInteger" : "size()$0",
        "addAll(LIST elements)\tvoid" : "addAll($0)",
        "isEmpty()\tBoolean" : "isEmpty()$0"
    },
    "sparkplugapi" : {
        "invokePluginWithJson(String className, String parameters)\tString" : "invokePluginWithJson($0)",
        "describePlugins()\tLIST<Process.SparkPlugApi.SparkPlugDescribeResult>" : "describePlugins()$0",
        "describePlugin(String className)\tProcess.SparkPlugApi.SparkPlugDescribeResult" : "describePlugin($0)"
    },
    "leadconvert" : {
        "isOverwriteLeadSource()\tBoolean" : "isOverwriteLeadSource()$0",
        "setAccountId(Id param1)\tvoid" : "setAccountId($0)",
        "getContactId()\tId" : "getContactId()$0",
        "setDoNotCreateOpportunity(Boolean param1)\tvoid" : "setDoNotCreateOpportunity($0)",
        "getAccountId()\tId" : "getAccountId()$0",
        "getOpportunityName()\tString" : "getOpportunityName()$0",
        "setLeadId(Id param1)\tvoid" : "setLeadId($0)",
        "isSendNotificationEmail()\tBoolean" : "isSendNotificationEmail()$0",
        "setOpportunityName(String param1)\tvoid" : "setOpportunityName($0)",
        "getConvertedStatus()\tString" : "getConvertedStatus()$0",
        "isDoNotCreateOpportunity()\tBoolean" : "isDoNotCreateOpportunity()$0",
        "getLeadId()\tId" : "getLeadId()$0",
        "setOverwriteLeadSource(Boolean param1)\tvoid" : "setOverwriteLeadSource($0)",
        "getOwnerId()\tId" : "getOwnerId()$0",
        "setOwnerId(Id param1)\tvoid" : "setOwnerId($0)",
        "setSendNotificationEmail(Boolean param1)\tvoid" : "setSendNotificationEmail($0)",
        "setConvertedStatus(String param1)\tvoid" : "setConvertedStatus($0)",
        "setContactId(Id param1)\tvoid" : "setContactId($0)"
    },
    "instanceaccessexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "reportdescriberesult" : {
        "setReportMetadata(reports.ReportMetadata reportMetadata)\tvoid" : "setReportMetadata($0)",
        "setReportTypeMetadata(reports.ReportTypeMetadata reportTypeMetadata)\tvoid" : "setReportTypeMetadata($0)",
        "getReportMetadata()\treports.ReportMetadata" : "getReportMetadata()$0",
        "setReportExtendedMetadata(reports.ReportExtendedMetadata reportExtendedMetadata)\tvoid" : "setReportExtendedMetadata($0)",
        "getReportExtendedMetadata()\treports.ReportExtendedMetadata" : "getReportExtendedMetadata()$0",
        "getReportTypeMetadata()\treports.ReportTypeMetadata" : "getReportTypeMetadata()$0"
    },
    "reportformat" : {
        "SUMMARY" : "SUMMARY$0",
        "MULTI_BLOCK" : "MULTI_BLOCK$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "TABULAR" : "TABULAR$0",
        "values()\tLIST<reports.ReportFormat>" : "values()$0",
        "MATRIX" : "MATRIX$0"
    },
    "xmlexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "version" : {
        "patch()\tInteger" : "patch()$0",
        "minor()\tInteger" : "minor()$0",
        "compareTo(system.Version other)\tInteger" : "compareTo($0)",
        "major()\tInteger" : "major()$0"
    },
    "message" : {
        "getSummary()\tString" : "getSummary()$0",
        "getDetail()\tString" : "getDetail()$0",
        "getComponentLabel()\tString" : "getComponentLabel()$0",
        "getSeverity()\tApexPages.Severity" : "getSeverity()$0"
    },
    "invalidheaderexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "xmlnode" : {
        "setAttribute(String key, String value)\tvoid" : "setAttribute($0)",
        "getParent()\tdom.XmlNode" : "getParent()$0",
        "getPrefixFor(String namespace)\tString" : "getPrefixFor($0)",
        "getAttributeValueNs(String key, String keyNamespace)\tString" : "getAttributeValueNs($0)",
        "getNamespace()\tString" : "getNamespace()$0",
        "setAttributeNs(String key, String value, String keyNamespace, String valueNamespace)\tvoid" : "setAttributeNs($0)",
        "getNamespaceFor(String prefix)\tString" : "getNamespaceFor($0)",
        "getAttributeCount()\tInteger" : "getAttributeCount()$0",
        "getAttributeKeyNsAt(Integer index)\tString" : "getAttributeKeyNsAt($0)",
        "setNamespace(String prefix, String namespace)\tvoid" : "setNamespace($0)",
        "getChildElement(String name, String namespace)\tdom.XmlNode" : "getChildElement($0)",
        "getNodeType()\tDom.XmlNodeType" : "getNodeType()$0",
        "addChildElement(String name, String namespace, String prefix)\tdom.XmlNode" : "addChildElement($0)",
        "getAttribute(String key, String keyNamespace)\tString" : "getAttribute($0)",
        "getText()\tString" : "getText()$0",
        "getName()\tString" : "getName()$0",
        "removeChild(ANY child)\tBoolean" : "removeChild($0)",
        "getAttributeKeyAt(Integer index)\tString" : "getAttributeKeyAt($0)",
        "addTextNode(String text)\tdom.XmlNode" : "addTextNode($0)",
        "removeAttribute(String key, String keyNamespace)\tBoolean" : "removeAttribute($0)",
        "getChildren()\tLIST<dom.XmlNode>" : "getChildren()$0",
        "addCommentNode(String text)\tdom.XmlNode" : "addCommentNode($0)",
        "getAttributeValue(String key, String keyNamespace)\tString" : "getAttributeValue($0)",
        "getChildElements()\tLIST<dom.XmlNode>" : "getChildElements()$0"
    },
    "inboundemail" : {
        "textAttachments" : "textAttachments$0",
        "fromName" : "fromName$0",
        "ccAddresses" : "ccAddresses$0",
        "plainTextBody" : "plainTextBody$0",
        "fromAddress" : "fromAddress$0",
        "binaryAttachments" : "binaryAttachments$0",
        "replyTo" : "replyTo$0",
        "subject" : "subject$0",
        "headers" : "headers$0",
        "htmlBody" : "htmlBody$0",
        "toAddresses" : "toAddresses$0",
        "plainTextBodyIsTruncated" : "plainTextBodyIsTruncated$0",
        "references" : "references$0",
        "messageId" : "messageId$0",
        "inReplyTo" : "inReplyTo$0",
        "htmlBodyIsTruncated" : "htmlBodyIsTruncated$0"
    },
    "ratelimitexception" : {
        "getErrorCode()\tString" : "getErrorCode()$0",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "communitystatus" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "Live" : "Live$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "UnderConstruction" : "UnderConstruction$0",
        "Inactive" : "Inactive$0",
        "values()\tLIST<ConnectApi.CommunityStatus>" : "values()$0"
    },
    "nodatafoundexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "topicinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "name" : "name$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "livechatroutingrequest" : {
        "getLiveChatButtonId()\tString" : "getLiveChatButtonId()$0",
        "getChatKey()\tString" : "getChatKey()$0"
    },
    "recordsnapshotattachment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "recordView" : "recordView$0",
        "toString()\tString" : "toString()$0"
    },
    "groupchattersettings" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "emailFrequency" : "emailFrequency$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "zonesearchresulttype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "Article" : "Article$0",
        "values()\tLIST<ConnectApi.ZoneSearchResultType>" : "values()$0",
        "Question" : "Question$0"
    },
    "zonepage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "zones" : "zones$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "chatterusers" : {
        "getChatterSettings(String communityId, String userId)\tConnectApi.UserChatterSettings" : "getChatterSettings($0)",
        "getFollowings(String communityId, String userId, String filterType, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getFollowings(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getGroups(String communityId, String userId)\tConnectApi.UserGroupPage" : "getGroups($0)",
        "searchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "searchUsers($0)",
        "getFollowings(String communityId, String userId, String filterType)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "setTestSearchUsers(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)",
        "getUsers(String communityId)\tConnectApi.UserPage" : "getUsers($0)",
        "updateUser(String communityId, String userId, ConnectApi.UserInput userInput)\tConnectApi.UserDetail" : "updateUser($0)",
        "getGroups(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.UserGroupPage" : "getGroups($0)",
        "searchUsers(String communityId, String q)\tConnectApi.UserPage" : "searchUsers($0)",
        "setTestSearchUsers(String communityId, String q, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)",
        "setTestSearchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid" : "setTestSearchUsers($0)",
        "setPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhoto($0)",
        "getUsers(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "getUsers($0)",
        "follow(String communityId, String userId, String subjectId)\tConnectApi.Subscription" : "follow($0)",
        "getFollowers(String communityId, String userId)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "updateChatterSettings(String communityId, String userId, ConnectApi.GroupEmailFrequency defaultGroupEmailFrequency)\tConnectApi.UserChatterSettings" : "updateChatterSettings($0)",
        "getFollowings(String communityId, String userId, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getUser(String communityId, String userId)\tConnectApi.UserDetail" : "getUser($0)",
        "setPhoto(String communityId, String userId, String fileId, Integer versionNumber)\tConnectApi.Photo" : "setPhoto($0)",
        "setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "getFollowings(String communityId, String userId)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getPhoto(String communityId, String userId)\tConnectApi.Photo" : "getPhoto($0)",
        "setPhotoWithAttributes(String communityId, String userId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "getFollowings(String communityId, String userId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getFollowers(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "searchUsers(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.UserPage" : "searchUsers($0)",
        "deletePhoto(String communityId, String userId)\tvoid" : "deletePhoto($0)"
    },
    "recordcolumnorder" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "TopDown" : "TopDown$0",
        "values()\tLIST<ConnectApi.RecordColumnOrder>" : "values()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "LeftRight" : "LeftRight$0"
    },
    "contentattachmentinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "contentDocumentId" : "contentDocumentId$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "livechatroutingresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getChatKey()\tString" : "getChatKey()$0"
    },
    "groupingvalue" : {
        "getGroupings()\tLIST<reports.GroupingValue>" : "getGroupings()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "setGroupings(LIST<reports.GroupingValue> groupings)\tvoid" : "setGroupings($0)",
        "getLabel()\tString" : "getLabel()$0",
        "getKey()\tString" : "getKey()$0",
        "getValue()\tObject" : "getValue()$0",
        "setKey(String key)\tvoid" : "setKey($0)",
        "setValue(Object value)\tvoid" : "setValue($0)"
    },
    "reportmanager" : {
        "describeReport(Id reportId)\treports.ReportDescribeResult" : "describeReport($0)",
        "runReport(Id reportId)\treports.ReportResults" : "runReport($0)",
        "runReport(Id reportId, Boolean includeDetails)\treports.ReportResults" : "runReport($0)"
    },
    "topicsort" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "PopularDesc" : "PopularDesc$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.TopicSort>" : "values()$0",
        "AlphaAsc" : "AlphaAsc$0"
    },
    "sobjectexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "records" : {
        "getMotif(String communityId, String idOrPrefix)\tConnectApi.Motif" : "getMotif($0)"
    },
    "zone" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "isActive" : "isActive$0",
        "name" : "name$0",
        "isChatterAnswers" : "isChatterAnswers$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "visibilityId" : "visibilityId$0",
        "visibility" : "visibility$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "licenseexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "topicpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "topics" : "topics$0",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "livechatroutingroute" : {
        "getUserId()\tString" : "getUserId()$0",
        "getChatKey()\tString" : "getChatKey()$0"
    },
    "businesshours" : {
        "diff(String businessHoursId, Datetime startDate, Datetime endDate)\tLong" : "diff($0)",
        "nextStartDate(Id businessHoursId, Datetime targetDate)\tDatetime" : "nextStartDate($0)",
        "addGmt(Id businessHoursId, Datetime startDate, Long interval)\tDatetime" : "addGmt($0)",
        "add(Id businessHoursId, Datetime startDate, Long interval)\tDatetime" : "add($0)",
        "isWithin(String businessHoursId, Datetime targetDate)\tBoolean" : "isWithin($0)"
    },
    "math" : {
        "tan(Double x)\tDouble" : "tan($0)",
        "atan(Decimal x)\tDecimal" : "atan($0)",
        "abs(Integer x)\tInteger" : "abs($0)",
        "cosh(Decimal x)\tDecimal" : "cosh($0)",
        "exp(Double x)\tDouble" : "exp($0)",
        "cbrt(Double x)\tDouble" : "cbrt($0)",
        "tanh(Double x)\tDouble" : "tanh($0)",
        "sqrt(Decimal x)\tDecimal" : "sqrt($0)",
        "asin(Double x)\tDouble" : "asin($0)",
        "tan(Decimal x)\tDecimal" : "tan($0)",
        "floor(Double x)\tDouble" : "floor($0)",
        "max(Decimal x, Decimal y)\tDecimal" : "max($0)",
        "max(Integer x, Integer y)\tInteger" : "max($0)",
        "log10(Decimal x)\tDecimal" : "log10($0)",
        "sin(Double x)\tDouble" : "sin($0)",
        "mod(Long x, Long y)\tLong" : "mod($0)",
        "abs(Decimal x)\tDecimal" : "abs($0)",
        "roundToLong(Decimal x)\tLong" : "roundToLong($0)",
        "acos(Decimal x)\tDecimal" : "acos($0)",
        "cos(Decimal x)\tDecimal" : "cos($0)",
        "min(Decimal x, Decimal y)\tDecimal" : "min($0)",
        "cosh(Double x)\tDouble" : "cosh($0)",
        "rint(Decimal x)\tDecimal" : "rint($0)",
        "atan2(Double x, Double y)\tDouble" : "atan2($0)",
        "cbrt(Decimal x)\tDecimal" : "cbrt($0)",
        "sqrt(Double x)\tDouble" : "sqrt($0)",
        "min(Double x, Double y)\tDouble" : "min($0)",
        "cos(Double x)\tDouble" : "cos($0)",
        "tanh(Decimal x)\tDecimal" : "tanh($0)",
        "min(Long x, Long y)\tLong" : "min($0)",
        "log(Double x)\tDouble" : "log($0)",
        "asin(Decimal x)\tDecimal" : "asin($0)",
        "sin(Decimal x)\tDecimal" : "sin($0)",
        "log10(Double x)\tDouble" : "log10($0)",
        "acos(Double x)\tDouble" : "acos($0)",
        "pow(Double base, Double exp)\tDouble" : "pow($0)",
        "round(Double x)\tInteger" : "round($0)",
        "atan(Double x)\tDouble" : "atan($0)",
        "mod(Integer x, Integer y)\tInteger" : "mod($0)",
        "log(Decimal x)\tDecimal" : "log($0)",
        "sinh(Decimal x)\tDecimal" : "sinh($0)",
        "atan2(Decimal x, Decimal y)\tDecimal" : "atan2($0)",
        "max(Double x, Double y)\tDouble" : "max($0)",
        "max(Long x, Long y)\tLong" : "max($0)",
        "abs(Long x)\tLong" : "abs($0)",
        "exp(Decimal x)\tDecimal" : "exp($0)",
        "sinh(Double x)\tDouble" : "sinh($0)",
        "roundToLong(Double x)\tLong" : "roundToLong($0)",
        "signum(Decimal x)\tDecimal" : "signum($0)",
        "abs(Double x)\tDouble" : "abs($0)",
        "floor(Decimal x)\tDecimal" : "floor($0)",
        "ceil(Decimal x)\tDecimal" : "ceil($0)",
        "round(Decimal x)\tInteger" : "round($0)",
        "rint(Double x)\tDouble" : "rint($0)",
        "min(Integer x, Integer y)\tInteger" : "min($0)",
        "random()\tDouble" : "random()$0",
        "signum(Double x)\tDouble" : "signum($0)",
        "ceil(Double x)\tDouble" : "ceil($0)"
    },
    "groupmember" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "role" : "role$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "url" : "url$0",
        "user" : "user$0",
        "toString()\tString" : "toString()$0"
    },
    "set" : {
        "addAll(LIST elements)\tBoolean" : "addAll($0)",
        "clear()\tvoid" : "clear()$0",
        "clone()\tSET<String>" : "clone()$0",
        "addAll(SET elements)\tBoolean" : "addAll($0)",
        "retainAll(LIST elements)\tBoolean" : "retainAll($0)",
        "iterator()\tsystem.ListIterator" : "iterator()$0",
        "contains(ANY element)\tBoolean" : "contains($0)",
        "remove(ANY element)\tBoolean" : "remove($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "removeAll(SET elements)\tBoolean" : "removeAll($0)",
        "retainAll(SET elements)\tBoolean" : "retainAll($0)",
        "equals(ANY obj)\tBoolean" : "equals($0)",
        "containsAll(LIST elements)\tBoolean" : "containsAll($0)",
        "removeAll(LIST elements)\tBoolean" : "removeAll($0)",
        "size()\tInteger" : "size()$0",
        "containsAll(SET elements)\tBoolean" : "containsAll($0)",
        "add(ANY element)\tBoolean" : "add($0)",
        "isEmpty()\tBoolean" : "isEmpty()$0"
    },
    "docscontroller" : {},
    "securityexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "actor" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "name" : "name$0",
        "type" : "type$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "usertype" : {
        "System" : "System$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Internal" : "Internal$0",
        "Portal" : "Portal$0",
        "values()\tLIST<ConnectApi.UserType>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "ChatterOnly" : "ChatterOnly$0",
        "ChatterGuest" : "ChatterGuest$0",
        "Guest" : "Guest$0",
        "Undefined" : "Undefined$0"
    },
    "reporttypecolumncategory" : {
        "setColumns(MAP<String,reports.ReportTypeColumn> columns)\tvoid" : "setColumns($0)",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "getLabel()\tString" : "getLabel()$0",
        "getColumns()\tMAP<String,reports.ReportTypeColumn>" : "getColumns()$0"
    },
    "database" : {
        "merge(SObject master, SObject duplicate, Boolean allOrNothing)\tDatabase.MergeResult" : "merge($0)",
        "convertLead(Database.LeadConvert leadConvert, Boolean allOrNothing)\tDatabase.LeadConvertResult" : "convertLead($0)",
        "upsert(SObject sobject, Schema.SObjectField field)\tDatabase.UpsertResult" : "upsert($0)",
        "merge(SObject master, SObject duplicate)\tDatabase.MergeResult" : "merge($0)",
        "upsert(SObject sobject, Boolean allOrNothing)\tDatabase.UpsertResult" : "upsert($0)",
        "undelete(LIST<Id> ids)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "upsert(LIST<SObject> sobjects, Schema.SObjectField field, Boolean allOrNothing)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "undelete(LIST<SObject> sobjects)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "setSavepoint()\tSystem.Savepoint" : "setSavepoint()$0",
        "convertLead(LIST<Database.LeadConvert> leadConverts, Boolean allOrNothing)\tLIST<Database.LeadConvertResult>" : "convertLead($0)",
        "delete(SObject sobject, Boolean allOrNothing)\tDatabase.DeleteResult" : "delete($0)",
        "delete(LIST<Id> ids, Boolean allOrNothing)\tLIST<Database.DeleteResult>" : "delete($0)",
        "emptyRecycleBin(LIST<SObject> sobjects)\tLIST<Database.EmptyRecycleBinResult>" : "emptyRecycleBin($0)",
        "merge(SObject master, Id duplicate)\tDatabase.MergeResult" : "merge($0)",
        "delete(Id id)\tDatabase.DeleteResult" : "delete($0)",
        "update(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.SaveResult>" : "update($0)",
        "getQueryLocator(String query)\tDatabase.QueryLocator" : "getQueryLocator($0)",
        "update(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult" : "update($0)",
        "convertLead(Database.LeadConvert leadConvert)\tDatabase.LeadConvertResult" : "convertLead($0)",
        "update(LIST<SObject> sobjects, APEX_OBJECT allOrNothing)\tLIST<Database.SaveResult>" : "update($0)",
        "emptyRecycleBin(SObject sobject)\tDatabase.EmptyRecycleBinResult" : "emptyRecycleBin($0)",
        "executeBatch(APEX_OBJECT batchable, Integer batchSize)\tString" : "executeBatch($0)",
        "getDeleted(String sobjectType, Datetime startDate, Datetime endDate)\tDatabase.GetDeletedResult" : "getDeleted($0)",
        "upsert(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "upsert(LIST<SObject> sobjects)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "getUpdated(String sobjectType, Datetime startDate, Datetime endDate)\tDatabase.GetUpdatedResult" : "getUpdated($0)",
        "executeBatch(APEX_OBJECT batchable)\tString" : "executeBatch($0)",
        "update(LIST<SObject> sobjects)\tLIST<Database.SaveResult>" : "update($0)",
        "undelete(SObject sobject, Boolean allOrNothing)\tDatabase.UndeleteResult" : "undelete($0)",
        "rollback(System.Savepoint savepoint)\tvoid" : "rollback($0)",
        "undelete(Id id)\tDatabase.UndeleteResult" : "undelete($0)",
        "insert(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.SaveResult>" : "insert($0)",
        "update(SObject sobject)\tDatabase.SaveResult" : "update($0)",
        "undelete(LIST<Id> ids, Boolean allOrNothing)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "undelete(Id id, Boolean allOrNothing)\tDatabase.UndeleteResult" : "undelete($0)",
        "insert(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult" : "insert($0)",
        "insert(LIST<SObject> sobjects, APEX_OBJECT DmlOptions)\tLIST<Database.SaveResult>" : "insert($0)",
        "merge(SObject master, Id duplicate, Boolean allOrNothing)\tDatabase.MergeResult" : "merge($0)",
        "undelete(SObject sobject)\tDatabase.UndeleteResult" : "undelete($0)",
        "merge(SObject master, LIST<SObject> duplicates, Boolean allOrNothing)\tLIST<Database.MergeResult>" : "merge($0)",
        "countQuery(String query)\tInteger" : "countQuery($0)",
        "convertLead(LIST<Database.LeadConvert> leadConverts)\tLIST<Database.LeadConvertResult>" : "convertLead($0)",
        "delete(LIST<SObject> sobjects)\tLIST<Database.DeleteResult>" : "delete($0)",
        "update(SObject sobject, APEX_OBJECT allOrNothing)\tDatabase.SaveResult" : "update($0)",
        "emptyRecycleBin(LIST<Id> ids)\tLIST<Database.EmptyRecycleBinResult>" : "emptyRecycleBin($0)",
        "delete(Id id, Boolean allOrNothing)\tDatabase.DeleteResult" : "delete($0)",
        "insert(SObject sobject)\tDatabase.SaveResult" : "insert($0)",
        "undelete(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.UndeleteResult>" : "undelete($0)",
        "getQueryLocator(LIST<SObject> query)\tDatabase.QueryLocator" : "getQueryLocator($0)",
        "insert(SObject sobject, APEX_OBJECT DmlOptions)\tDatabase.SaveResult" : "insert($0)",
        "delete(SObject sobject)\tDatabase.DeleteResult" : "delete($0)",
        "query(String query)\tLIST<SObject>" : "query($0)",
        "upsert(LIST<SObject> sobjects, Schema.SObjectField field)\tLIST<Database.UpsertResult>" : "upsert($0)",
        "merge(SObject master, LIST<SObject> duplicates)\tLIST<Database.MergeResult>" : "merge($0)",
        "delete(LIST<Id> ids)\tLIST<Database.DeleteResult>" : "delete($0)",
        "upsert(SObject sobject, Schema.SObjectField field, Boolean allOrNothing)\tDatabase.UpsertResult" : "upsert($0)",
        "merge(SObject master, LIST<Id> duplicates, Boolean allOrNothing)\tLIST<Database.MergeResult>" : "merge($0)",
        "delete(LIST<SObject> sobjects, Boolean allOrNothing)\tLIST<Database.DeleteResult>" : "delete($0)",
        "insert(LIST<SObject> sobjects)\tLIST<Database.SaveResult>" : "insert($0)",
        "merge(SObject master, LIST<Id> duplicates)\tLIST<Database.MergeResult>" : "merge($0)",
        "upsert(SObject sobject)\tDatabase.UpsertResult" : "upsert($0)"
    },
    "assignmentruleheader" : {
        "AssignmentRuleId" : "AssignmentRuleId$0",
        "UseDefaultRule" : "UseDefaultRule$0"
    },
    "picklistrecordfield" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "standardsetcontroller" : {
        "getPageSize()\tInteger" : "getPageSize()$0",
        "getSelected()\tLIST<SObject>" : "getSelected()$0",
        "getFilterId()\tString" : "getFilterId()$0",
        "getListViewOptions()\tLIST<System.SelectOption>" : "getListViewOptions()$0",
        "last()\tvoid" : "last()$0",
        "first()\tvoid" : "first()$0",
        "getRecords()\tLIST<SObject>" : "getRecords()$0",
        "next()\tvoid" : "next()$0",
        "setSelected(LIST<SObject> selected)\tvoid" : "setSelected($0)",
        "getResultSize()\tInteger" : "getResultSize()$0",
        "setPageNumber(Integer pageNumber)\tvoid" : "setPageNumber($0)",
        "save()\tSystem.PageReference" : "save()$0",
        "addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "setPageSize(Integer pageSize)\tvoid" : "setPageSize($0)",
        "reset()\tvoid" : "reset()$0",
        "cancel()\tSystem.PageReference" : "cancel()$0",
        "getCompleteResult()\tBoolean" : "getCompleteResult()$0",
        "getRecord()\tSObject" : "getRecord()$0",
        "getHasPrevious()\tBoolean" : "getHasPrevious()$0",
        "getHasNext()\tBoolean" : "getHasNext()$0",
        "getPageNumber()\tInteger" : "getPageNumber()$0",
        "previous()\tvoid" : "previous()$0",
        "setFilterId(String filterId)\tvoid" : "setFilterId($0)"
    },
    "action" : {
        "invoke()\tSystem.PageReference" : "invoke()$0",
        "getExpression()\tString" : "getExpression()$0"
    },
    "commentpage" : {
        "currentPageToken" : "currentPageToken$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "comments" : "comments$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "xmlnodetype" : {
        "TEXT" : "TEXT$0",
        "ELEMENT" : "ELEMENT$0",
        "COMMENT" : "COMMENT$0",
        "values()\tLIST<Dom.XmlNodeType>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0"
    },
    "reportresults" : {
        "setHasDetailRows(Boolean hasDetailRows)\tvoid" : "setHasDetailRows($0)",
        "getReportMetadata()\treports.ReportMetadata" : "getReportMetadata()$0",
        "getReportExtendedMetadata()\treports.ReportExtendedMetadata" : "getReportExtendedMetadata()$0",
        "setFactMap(MAP<String,reports.ReportFact> factMap)\tvoid" : "setFactMap($0)",
        "getGroupingsDown()\treports.Dimension" : "getGroupingsDown()$0",
        "getGroupingsAcross()\treports.Dimension" : "getGroupingsAcross()$0",
        "setGroupingsDown(reports.Dimension groupingsDown)\tvoid" : "setGroupingsDown($0)",
        "setReportMetadata(reports.ReportMetadata reportMetadata)\tvoid" : "setReportMetadata($0)",
        "getAttributes()\tMAP<String,String>" : "getAttributes()$0",
        "getHasDetailRows()\tBoolean" : "getHasDetailRows()$0",
        "setAttributes(MAP<String,String> attributes)\tvoid" : "setAttributes($0)",
        "setAllData(Boolean allData)\tvoid" : "setAllData($0)",
        "getAllData()\tBoolean" : "getAllData()$0",
        "setReportExtendedMetadata(reports.ReportExtendedMetadata reportExtendedMetadata)\tvoid" : "setReportExtendedMetadata($0)",
        "setGroupingsAcross(reports.Dimension groupingsAcross)\tvoid" : "setGroupingsAcross($0)",
        "getFactMap()\tMAP<String,reports.ReportFact>" : "getFactMap()$0"
    },
    "batchablecontext" : {
        "getChildJobId()\tId" : "getChildJobId()$0",
        "getJobId()\tId" : "getJobId()$0"
    },
    "emailmessagedirection" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Outbound" : "Outbound$0",
        "values()\tLIST<ConnectApi.EmailMessageDirection>" : "values()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Inbound" : "Inbound$0"
    },
    "topicsuggestion" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "name" : "name$0",
        "existingTopic" : "existingTopic$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "workflowprocessstatus" : {
        "Started" : "Started$0",
        "Held" : "Held$0",
        "Reassigned" : "Reassigned$0",
        "Fault" : "Fault$0",
        "Approved" : "Approved$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Rejected" : "Rejected$0",
        "Removed" : "Removed$0",
        "values()\tLIST<ConnectApi.WorkflowProcessStatus>" : "values()$0",
        "Pending" : "Pending$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "NoResponse" : "NoResponse$0"
    },
    "linksegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "url" : "url$0",
        "toString()\tString" : "toString()$0"
    },
    "emailmessage" : {
        "textBody" : "textBody$0",
        "emailMessageId" : "emailMessageId$0",
        "subject" : "subject$0",
        "direction" : "direction$0",
        "toAddresses" : "toAddresses$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "querylocator" : {
        "iterator()\tDatabase.QueryLocatorIterator" : "iterator()$0",
        "getQuery()\tString" : "getQuery()$0"
    },
    "chatteractivity" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "postCount" : "postCount$0",
        "commentReceivedCount" : "commentReceivedCount$0",
        "likeReceivedCount" : "likeReceivedCount$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "commentCount" : "commentCount$0",
        "toString()\tString" : "toString()$0"
    },
    "reportdetailrow" : {
        "getDataCells()\tLIST<reports.ReportDataCell>" : "getDataCells()$0",
        "setDataCells(LIST<reports.ReportDataCell> dataCells)\tvoid" : "setDataCells($0)"
    },
    "fieldchangevaluetype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "NewValue" : "NewValue$0",
        "values()\tLIST<ConnectApi.FieldChangeValueType>" : "values()$0",
        "OldValue" : "OldValue$0"
    },
    "sparkplugparameter" : {
        "required" : "required$0",
        "parameterType" : "parameterType$0",
        "name" : "name$0"
    },
    "email" : {
        "setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "getSubject()\tString" : "getSubject()$0",
        "setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "setReplyTo(String param1)\tvoid" : "setReplyTo($0)",
        "setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "getBccSender()\tBoolean" : "getBccSender()$0",
        "getReplyTo()\tString" : "getReplyTo()$0",
        "getUseSignature()\tBoolean" : "getUseSignature()$0",
        "setSubject(String param1)\tvoid" : "setSubject($0)",
        "setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "getEmailPriority()\tString" : "getEmailPriority()$0"
    },
    "finalexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "referencerecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "reference" : "reference$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "describefieldresult" : {
        "isAccessible()\tBoolean" : "isAccessible()$0",
        "isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0",
        "isCreateable()\tBoolean" : "isCreateable()$0",
        "getDigits()\tInteger" : "getDigits()$0",
        "getInlineHelpText()\tString" : "getInlineHelpText()$0",
        "isExternalId()\tBoolean" : "isExternalId()$0",
        "isCaseSensitive()\tBoolean" : "isCaseSensitive()$0",
        "getSoapType()\tSchema.SoapType" : "getSoapType()$0",
        "isUpdateable()\tBoolean" : "isUpdateable()$0",
        "isAutoNumber()\tBoolean" : "isAutoNumber()$0",
        "getPicklistValues()\tLIST<Schema.PicklistEntry>" : "getPicklistValues()$0",
        "getName()\tString" : "getName()$0",
        "isNillable()\tBoolean" : "isNillable()$0",
        "getByteLength()\tInteger" : "getByteLength()$0",
        "isDependentPicklist()\tBoolean" : "isDependentPicklist()$0",
        "isPermissionable()\tBoolean" : "isPermissionable()$0",
        "getController()\tSchema.SObjectField" : "getController()$0",
        "isNameField()\tBoolean" : "isNameField()$0",
        "getDefaultValueFormula()\tString" : "getDefaultValueFormula()$0",
        "isSortable()\tBoolean" : "isSortable()$0",
        "getLocalName()\tString" : "getLocalName()$0",
        "getLength()\tInteger" : "getLength()$0",
        "isRestrictedDelete()\tBoolean" : "isRestrictedDelete()$0",
        "isFilterable()\tBoolean" : "isFilterable()$0",
        "isGroupable()\tBoolean" : "isGroupable()$0",
        "getRelationshipName()\tString" : "getRelationshipName()$0",
        "isWriteRequiresMasterRead()\tBoolean" : "isWriteRequiresMasterRead()$0",
        "getType()\tSchema.DisplayType" : "getType()$0",
        "isNamePointing()\tBoolean" : "isNamePointing()$0",
        "getRelationshipOrder()\tInteger" : "getRelationshipOrder()$0",
        "isUnique()\tBoolean" : "isUnique()$0",
        "isHtmlFormatted()\tBoolean" : "isHtmlFormatted()$0",
        "getCalculatedFormula()\tString" : "getCalculatedFormula()$0",
        "isDisplayLocationInDecimal()\tBoolean" : "isDisplayLocationInDecimal()$0",
        "isCustom()\tBoolean" : "isCustom()$0",
        "getScale()\tInteger" : "getScale()$0",
        "getSobjectField()\tSchema.SObjectField" : "getSobjectField()$0",
        "isIdLookup()\tBoolean" : "isIdLookup()$0",
        "getPrecision()\tInteger" : "getPrecision()$0",
        "getDefaultValue()\tObject" : "getDefaultValue()$0",
        "getReferenceTo()\tLIST<Schema.SObjectType>" : "getReferenceTo()$0",
        "getLabel()\tString" : "getLabel()$0",
        "isRestrictedPicklist()\tBoolean" : "isRestrictedPicklist()$0",
        "isCascadeDelete()\tBoolean" : "isCascadeDelete()$0",
        "isCalculated()\tBoolean" : "isCalculated()$0",
        "isDefaultedOnCreate()\tBoolean" : "isDefaultedOnCreate()$0"
    },
    "columndatatype" : {
        "PICKLIST_DATA" : "PICKLIST_DATA$0",
        "DATE_DATA" : "DATE_DATA$0",
        "INT_DATA" : "INT_DATA$0",
        "ID_DATA" : "ID_DATA$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "EMAIL_DATA" : "EMAIL_DATA$0",
        "CURRENCY_DATA" : "CURRENCY_DATA$0",
        "PERCENT_DATA" : "PERCENT_DATA$0",
        "MULTIPICKLIST_DATA" : "MULTIPICKLIST_DATA$0",
        "TEXTAREA_DATA" : "TEXTAREA_DATA$0",
        "REFERENCE_DATA" : "REFERENCE_DATA$0",
        "STRING_DATA" : "STRING_DATA$0",
        "DATETIME_DATA" : "DATETIME_DATA$0",
        "COMBOBOX_DATA" : "COMBOBOX_DATA$0",
        "values()\tLIST<reports.ColumnDataType>" : "values()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "BOOLEAN_DATA" : "BOOLEAN_DATA$0",
        "URL_DATA" : "URL_DATA$0",
        "TIME_DATA" : "TIME_DATA$0",
        "DOUBLE_DATA" : "DOUBLE_DATA$0",
        "PHONE_DATA" : "PHONE_DATA$0"
    },
    "feeditempage" : {
        "currentPageToken" : "currentPageToken$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "isModifiedUrl" : "isModifiedUrl$0",
        "isModifiedToken" : "isModifiedToken$0",
        "items" : "items$0",
        "toString()\tString" : "toString()$0"
    },
    "system" : {
        "purgeOldAsyncJobs(Date date)\tInteger" : "purgeOldAsyncJobs($0)",
        "runAs(SObject user, ANY block)\tvoid" : "runAs($0)",
        "scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow)\tString" : "scheduleBatch($0)",
        "submit(LIST ids, String commments, String nextApprover)\tLIST<Id>" : "submit($0)",
        "isScheduled()\tBoolean" : "isScheduled()$0",
        "debug(APEX_OBJECT logLevel, ANY o)\tvoid" : "debug($0)",
        "assertEquals(ANY expected, ANY actual, ANY msg)\tvoid" : "assertEquals($0)",
        "assertEquals(ANY expected, ANY actual)\tvoid" : "assertEquals($0)",
        "abortJob(String jobId)\tvoid" : "abortJob($0)",
        "process(LIST workitemIds, String action, String commments, String nextApprover)\tLIST<Id>" : "process($0)",
        "assert(Boolean condition)\tvoid" : "assert($0)",
        "scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow, Integer scopeSize)\tString" : "scheduleBatch($0)",
        "requestVersion()\tsystem.Version" : "requestVersion()$0",
        "debug(ANY o)\tvoid" : "debug($0)",
        "assertNotEquals(ANY expected, ANY actual)\tvoid" : "assertNotEquals($0)",
        "isBatch()\tBoolean" : "isBatch()$0",
        "runAs(Package.Version version)\tvoid" : "runAs($0)",
        "resetPassword(Id userId, Boolean sendUserEmail)\tSystem.ResetPasswordResult" : "resetPassword($0)",
        "assertNotEquals(ANY expected, ANY actual, ANY msg)\tvoid" : "assertNotEquals($0)",
        "now()\tDatetime" : "now()$0",
        "today()\tDate" : "today()$0",
        "currentPageReference()\tSystem.PageReference" : "currentPageReference()$0",
        "assert(Boolean condition, ANY msg)\tvoid" : "assert($0)",
        "setPassword(Id userId, String password)\tvoid" : "setPassword($0)",
        "isFuture()\tBoolean" : "isFuture()$0",
        "currentTimeMillis()\tLong" : "currentTimeMillis()$0",
        "schedule(String jobName, String cronExp, APEX_OBJECT schedulable)\tString" : "schedule($0)",
        "getApplicationReadWriteMode()\tsystem.ApplicationReadWriteMode" : "getApplicationReadWriteMode()$0"
    },
    "mentioncompletion" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "photoUrl" : "photoUrl$0",
        "name" : "name$0",
        "recordId" : "recordId$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "description" : "description$0",
        "additionalLabel" : "additionalLabel$0"
    },
    "procedureexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "mathexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "describelayoutrow" : {
        "getLayoutItems()\tLIST<QuickAction.DescribeLayoutItem>" : "getLayoutItems()$0",
        "getNumItems()\tInteger" : "getNumItems()$0"
    },
    "describesobjectresult" : {
        "isQueryable()\tBoolean" : "isQueryable()$0",
        "getLocalName()\tString" : "getLocalName()$0",
        "isAccessible()\tBoolean" : "isAccessible()$0",
        "getRecordTypeInfosByName()\tMAP<String,Schema.RecordTypeInfo>" : "getRecordTypeInfosByName()$0",
        "getLabelPlural()\tString" : "getLabelPlural()$0",
        "isCreateable()\tBoolean" : "isCreateable()$0",
        "getRecordTypeInfos()\tLIST<Schema.RecordTypeInfo>" : "getRecordTypeInfos()$0",
        "getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "isCustomSetting()\tBoolean" : "isCustomSetting()$0",
        "getLabel()\tString" : "getLabel()$0",
        "isUpdateable()\tBoolean" : "isUpdateable()$0",
        "getRecordTypeInfosById()\tMAP<Id,Schema.RecordTypeInfo>" : "getRecordTypeInfosById()$0",
        "getFields()\tSchema.SObjectTypeFields" : "getFields()$0",
        "getName()\tString" : "getName()$0",
        "isMergeable()\tBoolean" : "isMergeable()$0",
        "getFieldSets()\tSchema.SObjectTypeFieldSets" : "getFieldSets()$0",
        "isUndeletable()\tBoolean" : "isUndeletable()$0",
        "isFeedEnabled()\tBoolean" : "isFeedEnabled()$0",
        "isCustom()\tBoolean" : "isCustom()$0",
        "isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0",
        "getKeyPrefix()\tString" : "getKeyPrefix()$0",
        "getChildRelationships()\tLIST<Schema.ChildRelationship>" : "getChildRelationships()$0",
        "isDeletable()\tBoolean" : "isDeletable()$0",
        "isSearchable()\tBoolean" : "isSearchable()$0"
    },
    "feedsortorder" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "LastModifiedDateDesc" : "LastModifiedDateDesc$0",
        "values()\tLIST<ConnectApi.FeedSortOrder>" : "values()$0",
        "CreatedDateDesc" : "CreatedDateDesc$0",
        "hashCode()\tInteger" : "hashCode()$0"
    },
    "url" : {
        "getFileFieldURL(String objectId, String fieldName)\tString" : "getFileFieldURL($0)",
        "getSalesforceBaseUrl()\tsystem.Url" : "getSalesforceBaseUrl()$0",
        "getHost()\tString" : "getHost()$0",
        "getAuthority()\tString" : "getAuthority()$0",
        "getRef()\tString" : "getRef()$0",
        "getUserInfo()\tString" : "getUserInfo()$0",
        "getCurrentRequestUrl()\tsystem.Url" : "getCurrentRequestUrl()$0",
        "getDefaultPort()\tInteger" : "getDefaultPort()$0",
        "sameFile(system.Url other)\tBoolean" : "sameFile($0)",
        "getFile()\tString" : "getFile()$0",
        "getQuery()\tString" : "getQuery()$0",
        "getPath()\tString" : "getPath()$0",
        "getProtocol()\tString" : "getProtocol()$0",
        "toExternalForm()\tString" : "toExternalForm()$0",
        "getPort()\tInteger" : "getPort()$0"
    },
    "filtervalue" : {
        "setName(String name)\tvoid" : "setName($0)",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "groupinformationinput" : {
        "text" : "text$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "title" : "title$0",
        "toString()\tString" : "toString()$0"
    },
    "appexchange" : {
        "isDuplicateUserName(String username)\tBoolean" : "isDuplicateUserName($0)",
        "getInstalledPackageVersions(String orgId)\tLIST<String>" : "getInstalledPackageVersions($0)",
        "createPortalUser(SObject user, String accountId)\tId" : "createPortalUser($0)",
        "to15(String id)\tString" : "to15($0)",
        "to18(String id)\tString" : "to18($0)",
        "setDefaultLicenseTerms(String pkgVersionId, String orgId, String defaultLicenseStatus, Integer defaultLicenseLength, Integer defaultLicenseSeats)\tvoid" : "setDefaultLicenseTerms($0)",
        "debug(String message)\tvoid" : "debug($0)",
        "createSession(String appExchangeOrgId, String portalId, String siteId, String portalUserId)\tString" : "createSession($0)",
        "registerPackageVersion(String pkgVersionId)\tBoolean" : "registerPackageVersion($0)",
        "setCookie(String name, String value)\tvoid" : "setCookie($0)",
        "validateOrgUser(String username, String password)\tString" : "validateOrgUser($0)",
        "calculateListingPopularity(String testUserName, String testCronString)\tvoid" : "calculateListingPopularity($0)",
        "setHttpResponseStatus(Integer statusCode)\tvoid" : "setHttpResponseStatus($0)",
        "stopListingPopularityJob()\tvoid" : "stopListingPopularityJob()$0",
        "setCookie(String name, String value, String cookieDomainName, Integer cookieAge)\tvoid" : "setCookie($0)",
        "getSiteId()\tString" : "getSiteId()$0",
        "getTrialTemplates(String callerOrgId, String lmPkgId, String username)\tLIST<TrialTemplate>" : "getTrialTemplates($0)",
        "getCrossInstanceEncryptedHash(Double appVersion, String value)\tString" : "getCrossInstanceEncryptedHash($0)",
        "getConfig(String section, String key)\tString" : "getConfig($0)",
        "getPortalId()\tString" : "getPortalId()$0",
        "isGuestUser()\tBoolean" : "isGuestUser()$0",
        "getPortalAdminId()\tString" : "getPortalAdminId()$0",
        "getCookie(String name)\tString" : "getCookie($0)",
        "getOrgName(String orgId)\tString" : "getOrgName($0)",
        "getPackageManifest(String pkgVersionId)\tString" : "getPackageManifest($0)",
        "createOrg(String firstName, String lastName, String companyName, String email, String language, String adminUserName, String packageId, String evalUserName, Boolean isExtension)\tString" : "createOrg($0)",
        "getAuthenticatingUrl(String page)\tString" : "getAuthenticatingUrl($0)",
        "setLicenseManagementOrganization(String pkgVersionId, String orgId, String username, String password)\tString" : "setLicenseManagementOrganization($0)",
        "validateLMAInstalled(String username, String password)\tString" : "validateLMAInstalled($0)",
        "updateSingleAsAdmin(SObject sobj)\tDatabase.SaveResult" : "updateSingleAsAdmin($0)",
        "provisionPackageLicense(String orgId, String allPackageId, Integer numLicenses, Date expirationDate, String status)\tString" : "provisionPackageLicense($0)",
        "movedPermanently(String location)\tvoid" : "movedPermanently($0)"
    },
    "labeledrecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "text" : "text$0",
        "label" : "label$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "feeditemattachmentinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "date" : {
        "month()\tInteger" : "month()$0",
        "toStartOfWeek()\tDate" : "toStartOfWeek()$0",
        "dayOfYear()\tInteger" : "dayOfYear()$0",
        "valueOf(Object o)\tDate" : "valueOf($0)",
        "year()\tInteger" : "year()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addMonths(Integer months)\tDate" : "addMonths($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "isLeapYear(Integer year)\tBoolean" : "isLeapYear($0)",
        "addYears(Integer years)\tDate" : "addYears($0)",
        "monthsBetween(Date other)\tInteger" : "monthsBetween($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "isSameDay(Date other)\tBoolean" : "isSameDay($0)",
        "parse(String str)\tDate" : "parse($0)",
        "newInstance(Integer year, Integer month, Integer day)\tDate" : "newInstance($0)",
        "today()\tDate" : "today()$0",
        "day()\tInteger" : "day()$0",
        "daysBetween(Date other)\tInteger" : "daysBetween($0)",
        "addDays(Integer days)\tDate" : "addDays($0)",
        "toStartOfMonth()\tDate" : "toStartOfMonth()$0",
        "daysInMonth(Integer year, Integer month)\tInteger" : "daysInMonth($0)",
        "valueOf(String str)\tDate" : "valueOf($0)",
        "format()\tString" : "format()$0"
    },
    "subscription" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "subject" : "subject$0",
        "community" : "community$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "subscriber" : "subscriber$0",
        "toString()\tString" : "toString()$0"
    },
    "inboundenvelope" : {
        "toAddress" : "toAddress$0",
        "fromAddress" : "fromAddress$0"
    },
    "contentattachment" : {
        "mimeType" : "mimeType$0",
        "title" : "title$0",
        "downloadUrl" : "downloadUrl$0",
        "isInMyFileSync" : "isInMyFileSync$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hasPdfPreview" : "hasPdfPreview$0",
        "fileType" : "fileType$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0",
        "id" : "id$0",
        "checksum" : "checksum$0",
        "fileExtension" : "fileExtension$0",
        "hasImagePreview" : "hasImagePreview$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "versionId" : "versionId$0",
        "fileSize" : "fileSize$0",
        "renditionUrl" : "renditionUrl$0"
    },
    "groupmembershiprequests" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0",
        "total" : "total$0",
        "requests" : "requests$0"
    },
    "emailheader" : {
        "TriggerAutoResponseEmail" : "TriggerAutoResponseEmail$0",
        "TriggerUserEmail" : "TriggerUserEmail$0",
        "TriggerOtherEmail" : "TriggerOtherEmail$0"
    },
    "zonesearchresult" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "type" : "type$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "title" : "title$0",
        "hasBestAnswer" : "hasBestAnswer$0",
        "voteCount" : "voteCount$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "stringexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "userprofile" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "tabs" : "tabs$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "userDetail" : "userDetail$0",
        "capabilities" : "capabilities$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "approvalposttemplatefield" : {
        "record" : "record$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "displayValue" : "displayValue$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "displayName" : "displayName$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "jsonparser" : {
        "getLastClearedToken()\tsystem.JSONToken" : "getLastClearedToken()$0",
        "nextToken()\tsystem.JSONToken" : "nextToken()$0",
        "readValueAs(system.Type apexType)\tObject" : "readValueAs($0)",
        "getText()\tString" : "getText()$0",
        "getIntegerValue()\tInteger" : "getIntegerValue()$0",
        "getCurrentName()\tString" : "getCurrentName()$0",
        "getBooleanValue()\tBoolean" : "getBooleanValue()$0",
        "getTimeValue()\tTime" : "getTimeValue()$0",
        "getCurrentToken()\tsystem.JSONToken" : "getCurrentToken()$0",
        "getIdValue()\tId" : "getIdValue()$0",
        "getDateValue()\tDate" : "getDateValue()$0",
        "getDoubleValue()\tDouble" : "getDoubleValue()$0",
        "skipChildren()\tvoid" : "skipChildren()$0",
        "getDateTimeValue()\tDatetime" : "getDateTimeValue()$0",
        "clearCurrentToken()\tvoid" : "clearCurrentToken()$0",
        "getBlobValue()\tBlob" : "getBlobValue()$0",
        "nextValue()\tsystem.JSONToken" : "nextValue()$0",
        "readValueAsStrict(system.Type apexType)\tObject" : "readValueAsStrict($0)",
        "hasCurrentToken()\tBoolean" : "hasCurrentToken()$0",
        "getLongValue()\tLong" : "getLongValue()$0",
        "getDecimalValue()\tDecimal" : "getDecimalValue()$0"
    },
    "linkattachmentinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "url" : "url$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "urlName" : "urlName$0",
        "toString()\tString" : "toString()$0"
    },
    "globalinfluence" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "percentile" : "percentile$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "rank" : "rank$0"
    },
    "mentionvalidations" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "mentionValidations" : "mentionValidations$0",
        "hasErrors" : "hasErrors$0"
    },
    "saveresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getId()\tId" : "getId()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "reportextendedmetadata" : {
        "getAggregateColumnInfo()\tMAP<String,reports.AggregateColumn>" : "getAggregateColumnInfo()$0",
        "setAggregateColumnInfo(MAP<String,reports.AggregateColumn> aggregateColumnInfo)\tvoid" : "setAggregateColumnInfo($0)",
        "getGroupingColumnInfo()\tMAP<String,reports.GroupingColumn>" : "getGroupingColumnInfo()$0",
        "setGroupingColumnInfo(MAP<String,reports.GroupingColumn> groupingColumnInfo)\tvoid" : "setGroupingColumnInfo($0)",
        "getDetailColumnInfo()\tMAP<String,reports.DetailColumn>" : "getDetailColumnInfo()$0",
        "setDetailColumnInfo(MAP<String,reports.DetailColumn> detailColumnInfo)\tvoid" : "setDetailColumnInfo($0)"
    },
    "topics" : {
        "getTopicSuggestionsForText(String communityId, String text, Integer maxResults)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestionsForText($0)",
        "getRelatedTopics(String communityId, String topicId)\tConnectApi.TopicPage" : "getRelatedTopics($0)",
        "setTestGetTrendingTopics(String communityId, ConnectApi.TopicPage result)\tvoid" : "setTestGetTrendingTopics($0)",
        "setTestGetTopicSuggestions(String communityId, String recordId, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestions($0)",
        "getRecentlyTalkingAboutTopicsForUser(String communityId, String userId)\tConnectApi.TopicPage" : "getRecentlyTalkingAboutTopicsForUser($0)",
        "getTrendingTopics(String communityId, Integer maxResults)\tConnectApi.TopicPage" : "getTrendingTopics($0)",
        "updateTopic(String communityId, String topicId, ConnectApi.TopicInput topic)\tConnectApi.Topic" : "updateTopic($0)",
        "getTopics(String communityId, String q, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "getTopics(String communityId, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "getGroupsRecentlyTalkingAboutTopic(String communityId, String topicId)\tConnectApi.ChatterGroupSummaryPage" : "getGroupsRecentlyTalkingAboutTopic($0)",
        "setTestGetTopicSuggestionsForText(String communityId, String text, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestionsForText($0)",
        "setTestGetTrendingTopics(String communityId, Integer maxResults, ConnectApi.TopicPage result)\tvoid" : "setTestGetTrendingTopics($0)",
        "unassignTopic(String communityId, String recordId, String topicId)\tvoid" : "unassignTopic($0)",
        "deleteTopic(String communityId, String topicId)\tvoid" : "deleteTopic($0)",
        "setTestGetRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRecentlyTalkingAboutTopicsForGroup($0)",
        "getRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId)\tConnectApi.TopicPage" : "getRecentlyTalkingAboutTopicsForGroup($0)",
        "setTestGetTopicSuggestionsForText(String communityId, String text, Integer maxResults, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestionsForText($0)",
        "getTopics(String communityId, String recordId)\tConnectApi.TopicPage" : "getTopics($0)",
        "setTestGetTopicSuggestions(String communityId, String recordId, Integer maxResults, ConnectApi.TopicSuggestionPage result)\tvoid" : "setTestGetTopicSuggestions($0)",
        "assignTopicByName(String communityId, String recordId, String topicName)\tConnectApi.Topic" : "assignTopicByName($0)",
        "getTopics(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)",
        "getTopics(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.TopicPage" : "getTopics($0)",
        "setTestGetRelatedTopics(String communityId, String topicId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRelatedTopics($0)",
        "getTopic(String communityId, String topicId)\tConnectApi.Topic" : "getTopic($0)",
        "getTopicSuggestionsForText(String communityId, String text)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestionsForText($0)",
        "getTopicSuggestions(String communityId, String recordId)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestions($0)",
        "assignTopic(String communityId, String recordId, String topicId)\tConnectApi.Topic" : "assignTopic($0)",
        "setTestGetRecentlyTalkingAboutTopicsForUser(String communityId, String userId, ConnectApi.TopicPage result)\tvoid" : "setTestGetRecentlyTalkingAboutTopicsForUser($0)",
        "getTrendingTopics(String communityId)\tConnectApi.TopicPage" : "getTrendingTopics($0)",
        "getTopicSuggestions(String communityId, String recordId, Integer maxResults)\tConnectApi.TopicSuggestionPage" : "getTopicSuggestions($0)",
        "setTestGetGroupsRecentlyTalkingAboutTopic(String communityId, String topicId, ConnectApi.ChatterGroupSummaryPage result)\tvoid" : "setTestGetGroupsRecentlyTalkingAboutTopic($0)",
        "getTopics(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.TopicPage" : "getTopics($0)",
        "getTopics(String communityId)\tConnectApi.TopicPage" : "getTopics($0)",
        "getTopics(String communityId, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam)\tConnectApi.TopicPage" : "getTopics($0)"
    },
    "chattermessagepage" : {
        "currentPageToken" : "currentPageToken$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "messages" : "messages$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "feediteminput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "isBookmarkedByCurrentUser" : "isBookmarkedByCurrentUser$0",
        "body" : "body$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "originalFeedItemId" : "originalFeedItemId$0",
        "attachment" : "attachment$0",
        "visibility" : "visibility$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "feedfavorites" : {
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "favorites" : "favorites$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "inboundsocialposthandlerimpl" : {
        "getMaxNumberOfDaysClosedToReopenCase()\tInteger" : "getMaxNumberOfDaysClosedToReopenCase()$0",
        "usePersonAccount()\tBoolean" : "usePersonAccount()$0",
        "getDefaultAccountId()\tString" : "getDefaultAccountId()$0",
        "handleInboundSocialPost(SocialPost post, SocialPersona persona, MAP<String,ANY> rawData)\tSocial.InboundSocialPostResult" : "handleInboundSocialPost($0)"
    },
    "emailtemplateselector" : {
        "getDefaultEmailTemplateId(Id param1)\tId" : "getDefaultEmailTemplateId($0)"
    },
    "compoundrecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "fields" : "fields$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "searchexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "reporttypecolumn" : {
        "setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "setFilterValues(LIST<reports.FilterValue> filterValues)\tvoid" : "setFilterValues($0)",
        "setName(String name)\tvoid" : "setName($0)",
        "setFilterable(Boolean filterable)\tvoid" : "setFilterable($0)",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "getFilterValues()\tLIST<reports.FilterValue>" : "getFilterValues()$0",
        "setDataType(String value)\tvoid" : "setDataType($0)",
        "getFilterable()\tBoolean" : "getFilterable()$0",
        "getName()\tString" : "getName()$0"
    },
    "mentionvalidation" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "validationStatus" : "validationStatus$0",
        "recordId" : "recordId$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "filesharingtype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "WorkspaceManaged" : "WorkspaceManaged$0",
        "Viewer" : "Viewer$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Collaborator" : "Collaborator$0",
        "values()\tLIST<ConnectApi.FileSharingType>" : "values()$0",
        "Admin" : "Admin$0",
        "Owner" : "Owner$0"
    },
    "describeavailablequickactionresult" : {
        "getName()\tString" : "getName()$0",
        "getType()\tString" : "getType()$0",
        "getLabel()\tString" : "getLabel()$0"
    },
    "chatter" : {
        "getSubscription(String communityId, String subscriptionId)\tConnectApi.Subscription" : "getSubscription($0)",
        "getFollowers(String communityId, String recordId)\tConnectApi.FollowerPage" : "getFollowers($0)",
        "deleteSubscription(String communityId, String subscriptionId)\tvoid" : "deleteSubscription($0)",
        "getFollowers(String communityId, String recordId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage" : "getFollowers($0)"
    },
    "soaptype" : {
        "METADATA_CUSTOMOBJECT" : "METADATA_CUSTOMOBJECT$0",
        "DATETIME" : "DATETIME$0",
        "STRING" : "STRING$0",
        "METADATA_APEXTRIGGER" : "METADATA_APEXTRIGGER$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "EXECUTIONOVERLAY_SOQLRESULT" : "EXECUTIONOVERLAY_SOQLRESULT$0",
        "DOUBLE" : "DOUBLE$0",
        "METADATA_CUSTOMFIELD" : "METADATA_CUSTOMFIELD$0",
        "METADATA_APEXCLASS" : "METADATA_APEXCLASS$0",
        "METADATA_APEXPAGE" : "METADATA_APEXPAGE$0",
        "BASE64BINARY" : "BASE64BINARY$0",
        "ANYTYPE" : "ANYTYPE$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "EXECUTIONOVERLAY_HEAPDUMP" : "EXECUTIONOVERLAY_HEAPDUMP$0",
        "APEXCODECOVERAGE_COVERAGE" : "APEXCODECOVERAGE_COVERAGE$0",
        "INTEGER" : "INTEGER$0",
        "ID" : "ID$0",
        "DATE" : "DATE$0",
        "TIME" : "TIME$0",
        "BOOLEAN" : "BOOLEAN$0",
        "METADATA_APEXCOMPONENT" : "METADATA_APEXCOMPONENT$0",
        "SYMBOLTABLE" : "SYMBOLTABLE$0",
        "values()\tLIST<Schema.SoapType>" : "values()$0",
        "EXECUTIONOVERLAY_APEXRESULT" : "EXECUTIONOVERLAY_APEXRESULT$0"
    },
    "feedpoll" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "totalVoteCount" : "totalVoteCount$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "choices" : "choices$0",
        "myChoiceId" : "myChoiceId$0"
    },
    "feedfavorite" : {
        "type" : "type$0",
        "searchText" : "searchText$0",
        "feedUrl" : "feedUrl$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "target" : "target$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "createdBy" : "createdBy$0",
        "toString()\tString" : "toString()$0",
        "id" : "id$0",
        "lastViewDate" : "lastViewDate$0",
        "name" : "name$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "user" : "user$0",
        "community" : "community$0"
    },
    "mergeresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getUpdatedRelatedIds()\tLIST<String>" : "getUpdatedRelatedIds()$0",
        "getId()\tId" : "getId()$0",
        "getMergedRecordIds()\tLIST<String>" : "getMergedRecordIds()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "asyncexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "messagebodyinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "messageSegments" : "messageSegments$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "textsegmentinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "text" : "text$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "httprequest" : {
        "setBodyAsBlob(Blob body)\tvoid" : "setBodyAsBlob($0)",
        "setClientCertificate(String clientCert, String password)\tvoid" : "setClientCertificate($0)",
        "setBody(String body)\tvoid" : "setBody($0)",
        "getMethod()\tString" : "getMethod()$0",
        "setEndpoint(String endpoint)\tvoid" : "setEndpoint($0)",
        "setHeader(String key, String value)\tvoid" : "setHeader($0)",
        "getBody()\tString" : "getBody()$0",
        "getEndpoint()\tString" : "getEndpoint()$0",
        "getHeader(String key)\tString" : "getHeader($0)",
        "setBodyDocument(ANY body)\tvoid" : "setBodyDocument($0)",
        "getCompressed()\tBoolean" : "getCompressed()$0",
        "getBodyDocument()\tdom.Document" : "getBodyDocument()$0",
        "setCompressed(Boolean compressed)\tvoid" : "setCompressed($0)",
        "toString()\tString" : "toString()$0",
        "getBodyAsBlob()\tBlob" : "getBodyAsBlob()$0",
        "setTimeout(Integer timeout)\tvoid" : "setTimeout($0)",
        "setMethod(String method)\tvoid" : "setMethod($0)",
        "setClientCertificateName(String certDevName)\tvoid" : "setClientCertificateName($0)"
    },
    "http" : {
        "toString()\tString" : "toString()$0",
        "send(ANY request)\tSystem.HttpResponse" : "send($0)"
    },
    "messagesegment" : {
        "text" : "text$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "type" : "type$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "linkattachment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "title" : "title$0",
        "url" : "url$0"
    },
    "newfileattachmentinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "title" : "title$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "basictemplateattachment" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "linkRecordId" : "linkRecordId$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "icon" : "icon$0",
        "linkUrl" : "linkUrl$0",
        "title" : "title$0",
        "subtype" : "subtype$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "userpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "previousPageToken" : "previousPageToken$0",
        "currentPageToken" : "currentPageToken$0",
        "users" : "users$0",
        "toString()\tString" : "toString()$0"
    },
    "commentinput" : {
        "attachment" : "attachment$0",
        "body" : "body$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "emailfileattachment" : {
        "getContentType()\tString" : "getContentType()$0",
        "getBody()\tBlob" : "getBody()$0",
        "getInline()\tBoolean" : "getInline()$0",
        "setContentType(String param1)\tvoid" : "setContentType($0)",
        "getFileName()\tString" : "getFileName()$0",
        "setInline(Boolean param1)\tvoid" : "setInline($0)",
        "setBody(Blob param1)\tvoid" : "setBody($0)",
        "setFileName(String param1)\tvoid" : "setFileName($0)"
    },
    "organization" : {
        "getSettings()\tConnectApi.OrganizationSettings" : "getSettings()$0"
    },
    "selectoption" : {
        "setValue(String value)\tvoid" : "setValue($0)",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "getDisabled()\tBoolean" : "getDisabled()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getEscapeItem()\tBoolean" : "getEscapeItem()$0",
        "setDisabled(Boolean disabled)\tvoid" : "setDisabled($0)",
        "setEscapeItem(Boolean disabled)\tvoid" : "setEscapeItem($0)",
        "getValue()\tString" : "getValue()$0"
    },
    "fieldchangevaluesegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "valueType" : "valueType$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0"
    },
    "complexsegment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "segments" : "segments$0",
        "toString()\tString" : "toString()$0"
    },
    "calloutexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "decimal" : {
        "doubleValue()\tDouble" : "doubleValue()$0",
        "pow(Integer exponent)\tDecimal" : "pow($0)",
        "valueOf(Long lng)\tDecimal" : "valueOf($0)",
        "valueOf(String str)\tDecimal" : "valueOf($0)",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "scale()\tInteger" : "scale()$0",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "setScale(Integer scale, system.RoundingMode roundingMode)\tDecimal" : "setScale($0)",
        "valueOf(Double dbl)\tDecimal" : "valueOf($0)",
        "intValue()\tInteger" : "intValue()$0",
        "addError(String msg)\tvoid" : "addError($0)",
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "abs()\tDecimal" : "abs()$0",
        "divide(Decimal divisor, Integer scale, APEX_OBJECT roundingMode)\tDecimal" : "divide($0)",
        "precision()\tInteger" : "precision()$0",
        "stripTrailingZeros()\tDecimal" : "stripTrailingZeros()$0",
        "round(system.RoundingMode roundingMode)\tLong" : "round($0)",
        "longValue()\tLong" : "longValue()$0",
        "round()\tLong" : "round()$0",
        "setScale(Integer scale)\tDecimal" : "setScale($0)",
        "divide(Decimal divisor, Integer scale)\tDecimal" : "divide($0)",
        "toPlainString()\tString" : "toPlainString()$0",
        "format()\tString" : "format()$0"
    },
    "ideastandardsetcontroller" : {
        "getPageSize()\tInteger" : "getPageSize()$0",
        "getSelected()\tLIST<SObject>" : "getSelected()$0",
        "getFilterId()\tString" : "getFilterId()$0",
        "getListViewOptions()\tLIST<System.SelectOption>" : "getListViewOptions()$0",
        "last()\tvoid" : "last()$0",
        "getHasNext()\tBoolean" : "getHasNext()$0",
        "first()\tvoid" : "first()$0",
        "getRecords()\tLIST<SObject>" : "getRecords()$0",
        "next()\tvoid" : "next()$0",
        "setSelected(LIST<SObject> selected)\tvoid" : "setSelected($0)",
        "getResultSize()\tInteger" : "getResultSize()$0",
        "setPageNumber(Integer pageNumber)\tvoid" : "setPageNumber($0)",
        "save()\tSystem.PageReference" : "save()$0",
        "addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "setPageSize(Integer pageSize)\tvoid" : "setPageSize($0)",
        "reset()\tvoid" : "reset()$0",
        "cancel()\tSystem.PageReference" : "cancel()$0",
        "getCompleteResult()\tBoolean" : "getCompleteResult()$0",
        "getRecord()\tSObject" : "getRecord()$0",
        "getHasPrevious()\tBoolean" : "getHasPrevious()$0",
        "getIdeaList()\tLIST<Idea>" : "getIdeaList()$0",
        "getPageNumber()\tInteger" : "getPageNumber()$0",
        "previous()\tvoid" : "previous()$0",
        "setFilterId(String filterId)\tvoid" : "setFilterId($0)"
    },
    "type" : {
        "forName(String clsName)\tsystem.Type" : "forName($0)",
        "newInstance()\tObject" : "newInstance()$0",
        "forName(String namespace, String clsName)\tsystem.Type" : "forName($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "getName()\tString" : "getName()$0",
        "equals(Object o)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "comparable" : {
        "compareTo(Object param1)\tInteger" : "compareTo($0)"
    },
    "inboundsocialposthandler" : {
        "handleInboundSocialPost(SocialPost param1, SocialPersona param2, MAP<String,ANY> param3)\tSocial.InboundSocialPostResult" : "handleInboundSocialPost($0)"
    },
    "inputparameter" : {
        "required" : "required$0",
        "parameterType" : "parameterType$0",
        "name" : "name$0",
        "description" : "description$0"
    },
    "limitexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "flowexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "aggregatecolumn" : {
        "setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "setDataType(String value)\tvoid" : "setDataType($0)",
        "getDownGroupingContext()\tString" : "getDownGroupingContext()$0",
        "setDownGroupingContext(String downGroupingContext)\tvoid" : "setDownGroupingContext($0)",
        "setName(String name)\tvoid" : "setName($0)",
        "getAcrossGroupingContext()\tString" : "getAcrossGroupingContext()$0",
        "setAcrossGroupingContext(String acrossGroupingContext)\tvoid" : "setAcrossGroupingContext($0)",
        "getDataType()\treports.ColumnDataType" : "getDataType()$0"
    },
    "chatterconversationpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "currentPageToken" : "currentPageToken$0",
        "conversations" : "conversations$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "userprofiletab" : {
        "id" : "id$0",
        "tabType" : "tabType$0",
        "isDefault" : "isDefault$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "tabUrl" : "tabUrl$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "caseactortype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "CustomerService" : "CustomerService$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Customer" : "Customer$0",
        "values()\tLIST<ConnectApi.CaseActorType>" : "values()$0"
    },
    "daterecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "dateValue" : "dateValue$0",
        "toString()\tString" : "toString()$0"
    },
    "singleemailmessage" : {
        "getPlainTextBody()\tString" : "getPlainTextBody()$0",
        "setPlainTextBody(String param1)\tvoid" : "setPlainTextBody($0)",
        "setHtmlBody(String param1)\tvoid" : "setHtmlBody($0)",
        "getTargetObjectId()\tId" : "getTargetObjectId()$0",
        "setWhatId(Id param1)\tvoid" : "setWhatId($0)",
        "setToAddresses(LIST<String> param1)\tvoid" : "setToAddresses($0)",
        "getDocumentAttachments()\tLIST<String>" : "getDocumentAttachments()$0",
        "getOrgWideEmailAddressId()\tId" : "getOrgWideEmailAddressId()$0",
        "getHtmlBody()\tString" : "getHtmlBody()$0",
        "getWhatId()\tId" : "getWhatId()$0",
        "setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "setReferences(String param1)\tvoid" : "setReferences($0)",
        "getReplyTo()\tString" : "getReplyTo()$0",
        "getCcAddresses()\tLIST<String>" : "getCcAddresses()$0",
        "setTargetObjectId(Id param1)\tvoid" : "setTargetObjectId($0)",
        "setBccAddresses(LIST<String> param1)\tvoid" : "setBccAddresses($0)",
        "getToAddresses()\tLIST<String>" : "getToAddresses()$0",
        "setSubject(String param1)\tvoid" : "setSubject($0)",
        "setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "getEmailPriority()\tString" : "getEmailPriority()$0",
        "setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "setTemplateId(Id param1)\tvoid" : "setTemplateId($0)",
        "getSubject()\tString" : "getSubject()$0",
        "getInReplyTo()\tString" : "getInReplyTo()$0",
        "setOrgWideEmailAddressId(Id param1)\tvoid" : "setOrgWideEmailAddressId($0)",
        "setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "setCharset(String param1)\tvoid" : "setCharset($0)",
        "setDocumentAttachments(LIST<String> param1)\tvoid" : "setDocumentAttachments($0)",
        "getReferences()\tString" : "getReferences()$0",
        "getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "setFileAttachments(LIST<Messaging.EmailFileAttachment> param1)\tvoid" : "setFileAttachments($0)",
        "setCcAddresses(LIST<String> param1)\tvoid" : "setCcAddresses($0)",
        "isUserMail()\tBoolean" : "isUserMail()$0",
        "getBccSender()\tBoolean" : "getBccSender()$0",
        "getUseSignature()\tBoolean" : "getUseSignature()$0",
        "getBccAddresses()\tLIST<String>" : "getBccAddresses()$0",
        "getFileAttachments()\tLIST<Messaging.EmailFileAttachment>" : "getFileAttachments()$0",
        "getCharset()\tString" : "getCharset()$0",
        "setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "setInReplyTo(String param1)\tvoid" : "setInReplyTo($0)",
        "getTemplateId()\tId" : "getTemplateId()$0",
        "setReplyTo(String param1)\tvoid" : "setReplyTo($0)"
    },
    "chattermessages" : {
        "replyToMessage(String text, String inReplyTo)\tConnectApi.ChatterMessage" : "replyToMessage($0)",
        "getUnreadCount()\tConnectApi.UnreadConversationCount" : "getUnreadCount()$0",
        "searchMessages(String pageParam, Integer pageSize, String q)\tConnectApi.ChatterMessagePage" : "searchMessages($0)",
        "sendMessage(String text, String recipients)\tConnectApi.ChatterMessage" : "sendMessage($0)",
        "getConversations()\tConnectApi.ChatterConversationPage" : "getConversations()$0",
        "getMessages(String pageParam, Integer pageSize)\tConnectApi.ChatterMessagePage" : "getMessages($0)",
        "searchMessages(String q)\tConnectApi.ChatterMessagePage" : "searchMessages($0)",
        "getMessages()\tConnectApi.ChatterMessagePage" : "getMessages()$0",
        "getConversations(String pageParam, Integer pageSize)\tConnectApi.ChatterConversationPage" : "getConversations($0)",
        "searchConversation(String conversationId, String q)\tConnectApi.ChatterConversation" : "searchConversation($0)",
        "getConversation(String conversationId)\tConnectApi.ChatterConversation" : "getConversation($0)",
        "markConversationRead(String conversationId, Boolean read)\tConnectApi.ChatterConversationSummary" : "markConversationRead($0)",
        "searchConversation(String conversationId, String pageParam, Integer pageSize, String q)\tConnectApi.ChatterConversation" : "searchConversation($0)",
        "searchConversations(String q)\tConnectApi.ChatterConversationPage" : "searchConversations($0)",
        "getMessage(String messageId)\tConnectApi.ChatterMessage" : "getMessage($0)",
        "searchConversations(String pageParam, Integer pageSize, String q)\tConnectApi.ChatterConversationPage" : "searchConversations($0)",
        "getConversation(String conversationId, String pageParam, Integer pageSize)\tConnectApi.ChatterConversation" : "getConversation($0)"
    },
    "reportcurrency" : {
        "getCurrencyCode()\tString" : "getCurrencyCode()$0",
        "setCurrencyCode(String currencyCode)\tvoid" : "setCurrencyCode($0)",
        "setAmount(Decimal amount)\tvoid" : "setAmount($0)",
        "getAmount()\tDecimal" : "getAmount()$0"
    },
    "community" : {
        "invitationsEnabled" : "invitationsEnabled$0",
        "urlPathPrefix" : "urlPathPrefix$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0",
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "sendWelcomeEmail" : "sendWelcomeEmail$0",
        "name" : "name$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "status" : "status$0"
    },
    "livechatrouter" : {
        "doRouting(LIST<LiveAgent.LiveChatRoutingRequest> param1)\tvoid" : "doRouting($0)"
    },
    "describelayoutcomponent" : {
        "getTabOrder()\tInteger" : "getTabOrder()$0",
        "getType()\tString" : "getType()$0",
        "getDisplayLines()\tInteger" : "getDisplayLines()$0",
        "getValue()\tString" : "getValue()$0"
    },
    "motif" : {
        "largeIconUrl" : "largeIconUrl$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "mediumIconUrl" : "mediumIconUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "color" : "color$0",
        "smallIconUrl" : "smallIconUrl$0",
        "toString()\tString" : "toString()$0"
    },
    "groupmembershiprequest" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "responseMessage" : "responseMessage$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0",
        "createdDate" : "createdDate$0",
        "lastUpdateDate" : "lastUpdateDate$0",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "status" : "status$0",
        "requestedGroup" : "requestedGroup$0",
        "user" : "user$0"
    },
    "describedatacategorygroupstructureresult" : {
        "getName()\tString" : "getName()$0",
        "getSobject()\tString" : "getSobject()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getTopCategories()\tLIST<Schema.DataCategory>" : "getTopCategories()$0",
        "getDescription()\tString" : "getDescription()$0"
    },
    "hashtagsegment" : {
        "tag" : "tag$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "topicUrl" : "topicUrl$0",
        "url" : "url$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "leadconvertresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getContactId()\tId" : "getContactId()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "getAccountId()\tId" : "getAccountId()$0",
        "getLeadId()\tId" : "getLeadId()$0",
        "getOpportunityId()\tId" : "getOpportunityId()$0"
    },
    "messagesegmenttype" : {
        "Link" : "Link$0",
        "MoreChanges" : "MoreChanges$0",
        "FieldChangeName" : "FieldChangeName$0",
        "EntityLink" : "EntityLink$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Text" : "Text$0",
        "FieldChange" : "FieldChange$0",
        "ResourceLink" : "ResourceLink$0",
        "FieldChangeValue" : "FieldChangeValue$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Hashtag" : "Hashtag$0",
        "Mention" : "Mention$0",
        "values()\tLIST<ConnectApi.MessageSegmentType>" : "values()$0"
    },
    "grouparchivestatus" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.GroupArchiveStatus>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "All" : "All$0",
        "NotArchived" : "NotArchived$0",
        "Archived" : "Archived$0"
    },
    "publishingservice" : {
        "assignDraftTranslationTask(String translationVersionId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid" : "assignDraftTranslationTask($0)",
        "archiveOnlineArticle(String articleId, Datetime scheduledDate)\tvoid" : "archiveOnlineArticle($0)",
        "deleteDraftTranslation(String articleVersionId)\tvoid" : "deleteDraftTranslation($0)",
        "deleteDraftArticle(String articleId)\tvoid" : "deleteDraftArticle($0)",
        "assignDraftArticleTask(String articleId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid" : "assignDraftArticleTask($0)",
        "submitForTranslation(String articleId, String language, String assigneeId, Datetime dueDate)\tString" : "submitForTranslation($0)",
        "completeTranslation(String articleVersionId)\tvoid" : "completeTranslation($0)",
        "publishArticle(String articleId, Boolean flagAsNew)\tvoid" : "publishArticle($0)",
        "deleteArchivedArticleVersion(String articleId, Integer versionNumber)\tvoid" : "deleteArchivedArticleVersion($0)",
        "deleteArchivedArticle(String articleId)\tvoid" : "deleteArchivedArticle($0)",
        "editPublishedTranslation(String articleId, String language, Boolean unpublish)\tString" : "editPublishedTranslation($0)",
        "editArchivedArticle(String articleId)\tString" : "editArchivedArticle($0)",
        "cancelScheduledPublicationOfArticle(String articleId)\tvoid" : "cancelScheduledPublicationOfArticle($0)",
        "cancelScheduledArchivingOfArticle(String articleId)\tvoid" : "cancelScheduledArchivingOfArticle($0)",
        "editOnlineArticle(String articleId, Boolean unpublish)\tString" : "editOnlineArticle($0)",
        "restoreOldVersion(String articleId, Integer versionNumber)\tString" : "restoreOldVersion($0)",
        "scheduleForPublication(String articleId, Datetime scheduledDate)\tvoid" : "scheduleForPublication($0)",
        "setTranslationToIncomplete(String articleVersionId)\tvoid" : "setTranslationToIncomplete($0)"
    },
    "usergrouppage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "groups" : "groups$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "setupscope" : {
        "ORGANIZATION" : "ORGANIZATION$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "PROFILE" : "PROFILE$0",
        "USER" : "USER$0",
        "values()\tLIST<system.SetupScope>" : "values()$0"
    },
    "outputparameter" : {
        "parameterType" : "parameterType$0",
        "name" : "name$0",
        "description" : "description$0"
    },
    "reference" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "url" : "url$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "resetpasswordresult" : {
        "getPassword()\tString" : "getPassword()$0"
    },
    "clientinfo" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "applicationUrl" : "applicationUrl$0",
        "toString()\tString" : "toString()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "applicationName" : "applicationName$0"
    },
    "recordviewsection" : {
        "fields" : "fields$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "heading" : "heading$0",
        "columnCount" : "columnCount$0",
        "isCollapsible" : "isCollapsible$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "columnOrder" : "columnOrder$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "sobjecttype" : {
        "newSObject(Id id)\tSObject" : "newSObject($0)",
        "newSObject(Id recordTypeId, Boolean loadDefaultValues)\tSObject" : "newSObject($0)",
        "newSObject()\tSObject" : "newSObject()$0",
        "getDescribe()\tSchema.DescribeSObjectResult" : "getDescribe()$0"
    },
    "processsubmitrequest" : {
        "getObjectId()\tString" : "getObjectId()$0",
        "setObjectId(String param1)\tvoid" : "setObjectId($0)"
    },
    "messagesegmentinput" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "answers" : {
        "setBestReply(String questionId, String bestReplyId)\tvoid" : "setBestReply($0)",
        "findSimilar(SObject question)\tLIST<Id>" : "findSimilar($0)"
    },
    "columnsortorder" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<reports.ColumnSortOrder>" : "values()$0",
        "ASCENDING" : "ASCENDING$0",
        "DESCENDING" : "DESCENDING$0"
    },
    "sobject" : {
        "put(Schema.SObjectField field, Object value)\tObject" : "put($0)",
        "get(Schema.SObjectField field)\tObject" : "get($0)",
        "clone()\tSObject" : "clone()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "getSObjects(Schema.SObjectField field)\tLIST<SObject>" : "getSObjects($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)",
        "getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "clone(Boolean preserveId)\tSObject" : "clone($0)",
        "putSObject(Schema.SObjectField field, SObject value)\tSObject" : "putSObject($0)",
        "put(String field, Object value)\tObject" : "put($0)",
        "putSObject(String field, SObject value)\tSObject" : "putSObject($0)",
        "clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps)\tSObject" : "clone($0)",
        "getQuickActionName()\tString" : "getQuickActionName()$0",
        "addError(String msg)\tvoid" : "addError($0)",
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "getSObject(String field)\tSObject" : "getSObject($0)",
        "setOptions(APEX_OBJECT options)\tvoid" : "setOptions($0)",
        "getOptions()\tDatabase.DMLOptions" : "getOptions()$0",
        "get(String field)\tObject" : "get($0)",
        "clear()\tvoid" : "clear()$0",
        "clone(Boolean preserveId, Boolean deep)\tSObject" : "clone($0)",
        "getSObjects(String field)\tLIST<SObject>" : "getSObjects($0)",
        "getSObject(Schema.SObjectField field)\tSObject" : "getSObject($0)",
        "clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tSObject" : "clone($0)"
    },
    "nonepointerexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "batchablecontextimpl" : {
        "getChildJobId()\tId" : "getChildJobId()$0",
        "getJobId()\tId" : "getJobId()$0"
    },
    "groupmembershiprequeststatus" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "Accepted" : "Accepted$0",
        "values()\tLIST<ConnectApi.GroupMembershipRequestStatus>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Pending" : "Pending$0",
        "Declined" : "Declined$0"
    },
    "batchable" : {
        "start(Database.BatchableContext param1)\tsystem.Iterable" : "start($0)",
        "execute(Database.BatchableContext param1, LIST<ANY> param2)\tvoid" : "execute($0)",
        "finish(Database.BatchableContext param1)\tvoid" : "finish($0)"
    },
    "jsongenerator" : {
        "writeDate(Date d)\tvoid" : "writeDate($0)",
        "writeNumberField(String fieldName, Double d)\tvoid" : "writeNumberField($0)",
        "writeStartObject()\tvoid" : "writeStartObject()$0",
        "writeNumber(Decimal d)\tvoid" : "writeNumber($0)",
        "getAsString()\tString" : "getAsString()$0",
        "writeBlob(Blob b)\tvoid" : "writeBlob($0)",
        "writeNumber(Long lng)\tvoid" : "writeNumber($0)",
        "writeNone()\tvoid" : "writeNone()$0",
        "writeStartArray()\tvoid" : "writeStartArray()$0",
        "writeTime(Time t)\tvoid" : "writeTime($0)",
        "writeDateField(String fieldName, Date d)\tvoid" : "writeDateField($0)",
        "writeString(String str)\tvoid" : "writeString($0)",
        "writeEndObject()\tvoid" : "writeEndObject()$0",
        "writeTimeField(String fieldName, Time t)\tvoid" : "writeTimeField($0)",
        "writeBoolean(Boolean b)\tvoid" : "writeBoolean($0)",
        "writeNumber(Double d)\tvoid" : "writeNumber($0)",
        "writeObjectField(String fieldName, Object o)\tvoid" : "writeObjectField($0)",
        "writeDateTimeField(String fieldName, Datetime dt)\tvoid" : "writeDateTimeField($0)",
        "writeNoneField(String fieldName)\tvoid" : "writeNoneField($0)",
        "writeNumberField(String fieldName, Integer i)\tvoid" : "writeNumberField($0)",
        "writeNumber(Integer i)\tvoid" : "writeNumber($0)",
        "writeNumberField(String fieldName, Decimal d)\tvoid" : "writeNumberField($0)",
        "writeIdField(String fieldName, Id id)\tvoid" : "writeIdField($0)",
        "writeId(Id id)\tvoid" : "writeId($0)",
        "writeNumberField(String fieldName, Long lng)\tvoid" : "writeNumberField($0)",
        "writeStringField(String fieldName, String str)\tvoid" : "writeStringField($0)",
        "close()\tvoid" : "close()$0",
        "writeDateTime(Datetime dt)\tvoid" : "writeDateTime($0)",
        "writeEndArray()\tvoid" : "writeEndArray()$0",
        "writeBooleanField(String fieldName, Boolean b)\tvoid" : "writeBooleanField($0)",
        "isClosed()\tBoolean" : "isClosed()$0",
        "writeBlobField(String fieldName, Blob b)\tvoid" : "writeBlobField($0)",
        "writeFieldName(String fieldName)\tvoid" : "writeFieldName($0)",
        "writeObject(Object o)\tvoid" : "writeObject($0)"
    },
    "fieldchangesegment" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "fieldchangenamesegment" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "recordtypeinfo" : {
        "isAvailable()\tBoolean" : "isAvailable()$0",
        "getName()\tString" : "getName()$0",
        "getRecordTypeId()\tId" : "getRecordTypeId()$0",
        "isDefaultRecordTypeMapping()\tBoolean" : "isDefaultRecordTypeMapping()$0"
    },
    "handledexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "urlrewriter" : {
        "mapRequestUrl(System.PageReference param1)\tSystem.PageReference" : "mapRequestUrl($0)",
        "generateUrlFor(LIST<System.PageReference> param1)\tLIST<System.PageReference>" : "generateUrlFor($0)"
    },
    "matcher" : {
        "start(Integer grp)\tInteger" : "start($0)",
        "replaceFirst(String replacement)\tString" : "replaceFirst($0)",
        "group()\tString" : "group()$0",
        "find(Integer start)\tBoolean" : "find($0)",
        "hasTransparentBounds()\tBoolean" : "hasTransparentBounds()$0",
        "lookingAt()\tBoolean" : "lookingAt()$0",
        "quoteReplacement(String s)\tString" : "quoteReplacement($0)",
        "reset(String input)\tsystem.Matcher" : "reset($0)",
        "end(Integer grp)\tInteger" : "end($0)",
        "start()\tInteger" : "start()$0",
        "reset()\tsystem.Matcher" : "reset()$0",
        "matches()\tBoolean" : "matches()$0",
        "hitEnd()\tBoolean" : "hitEnd()$0",
        "requireEnd()\tBoolean" : "requireEnd()$0",
        "region(Integer start, Integer ending)\tsystem.Matcher" : "region($0)",
        "groupCount()\tInteger" : "groupCount()$0",
        "regionStart()\tInteger" : "regionStart()$0",
        "regionEnd()\tInteger" : "regionEnd()$0",
        "end()\tInteger" : "end()$0",
        "useAnchoringBounds(Boolean b)\tsystem.Matcher" : "useAnchoringBounds($0)",
        "pattern()\tsystem.Pattern" : "pattern()$0",
        "find()\tBoolean" : "find()$0",
        "useTransparentBounds(Boolean b)\tsystem.Matcher" : "useTransparentBounds($0)",
        "replaceAll(String replacement)\tString" : "replaceAll($0)",
        "hasAnchoringBounds()\tBoolean" : "hasAnchoringBounds()$0",
        "usePattern(system.Pattern p)\tsystem.Matcher" : "usePattern($0)",
        "group(Integer start)\tString" : "group($0)"
    },
    "describequickactionresult" : {
        "getMiniIconUrl()\tString" : "getMiniIconUrl()$0",
        "getIconUrl()\tString" : "getIconUrl()$0",
        "getLayout()\tQuickAction.DescribeLayoutSection" : "getLayout()$0",
        "getIconName()\tString" : "getIconName()$0",
        "getHeight()\tInteger" : "getHeight()$0",
        "getTargetParentField()\tString" : "getTargetParentField()$0",
        "getTargetRecordTypeId()\tString" : "getTargetRecordTypeId()$0",
        "getIcons()\tLIST<Schema.DescribeIconResult>" : "getIcons()$0",
        "getColors()\tLIST<Schema.DescribeColorResult>" : "getColors()$0",
        "getVisualforcePageName()\tString" : "getVisualforcePageName()$0",
        "getTargetSobjectType()\tString" : "getTargetSobjectType()$0",
        "getWidth()\tInteger" : "getWidth()$0",
        "getDefaultValues()\tLIST<QuickAction.DescribeQuickActionDefaultValue>" : "getDefaultValues()$0",
        "getSourceSobjectType()\tString" : "getSourceSobjectType()$0",
        "getCanvasApplicationName()\tString" : "getCanvasApplicationName()$0"
    },
    "emailexception" : {
        "getDmlStatusCode(Integer index)\tString" : "getDmlStatusCode($0)",
        "getDmlType(Integer index)\tsystem.StatusCode" : "getDmlType($0)",
        "getDmlMessage(Integer index)\tString" : "getDmlMessage($0)",
        "getDmlId(Integer index)\tString" : "getDmlId($0)",
        "getCause()\tException" : "getCause()$0",
        "getNumDml()\tInteger" : "getNumDml()$0",
        "getDmlFieldNames(Integer index)\tLIST<String>" : "getDmlFieldNames($0)",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "getDmlIndex(Integer index)\tInteger" : "getDmlIndex($0)",
        "getDmlFields(Integer index)\tLIST<Schema.SObjectField>" : "getDmlFields($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "pagereference" : {
        "setCookies(LIST<System.Cookie> cookies)\tvoid" : "setCookies($0)",
        "setRedirect(Boolean redirect)\tSystem.PageReference" : "setRedirect($0)",
        "getHeaders()\tMAP<String,String>" : "getHeaders()$0",
        "getAnchor()\tString" : "getAnchor()$0",
        "getUrl()\tString" : "getUrl()$0",
        "getCookies()\tMAP<String,System.Cookie>" : "getCookies()$0",
        "getRedirect()\tBoolean" : "getRedirect()$0",
        "getContent()\tBlob" : "getContent()$0",
        "setAnchor(String anchor)\tSystem.PageReference" : "setAnchor($0)",
        "getContentAsPDF()\tBlob" : "getContentAsPDF()$0",
        "getParameters()\tMAP<String,String>" : "getParameters()$0"
    },
    "userinfo" : {
        "getUserRoleId()\tString" : "getUserRoleId()$0",
        "isMultiCurrencyOrganization()\tBoolean" : "isMultiCurrencyOrganization()$0",
        "getUiTheme()\tString" : "getUiTheme()$0",
        "getLastName()\tString" : "getLastName()$0",
        "getUserId()\tString" : "getUserId()$0",
        "getUiThemeDisplayed()\tString" : "getUiThemeDisplayed()$0",
        "getDefaultCurrency()\tString" : "getDefaultCurrency()$0",
        "isCurrentUserLicensed(String namespacePrefix)\tBoolean" : "isCurrentUserLicensed($0)",
        "getUserName()\tString" : "getUserName()$0",
        "getLanguage()\tString" : "getLanguage()$0",
        "getUserType()\tString" : "getUserType()$0",
        "getUserEmail()\tString" : "getUserEmail()$0",
        "getFirstName()\tString" : "getFirstName()$0",
        "getProfileId()\tString" : "getProfileId()$0",
        "getOrganizationId()\tString" : "getOrganizationId()$0",
        "getSessionId()\tString" : "getSessionId()$0",
        "getLocale()\tString" : "getLocale()$0",
        "getName()\tString" : "getName()$0",
        "getOrganizationName()\tString" : "getOrganizationName()$0",
        "getTimeZone()\tsystem.TimeZone" : "getTimeZone()$0"
    },
    "recordfieldtype" : {
        "DateTime" : "DateTime$0",
        "Picklist" : "Picklist$0",
        "Number" : "Number$0",
        "CreatedBy" : "CreatedBy$0",
        "Date" : "Date$0",
        "Time" : "Time$0",
        "Address" : "Address$0",
        "Email" : "Email$0",
        "LastModifiedBy" : "LastModifiedBy$0",
        "Blank" : "Blank$0",
        "Reference" : "Reference$0",
        "Percent" : "Percent$0",
        "Currency" : "Currency$0",
        "Phone" : "Phone$0",
        "Compound" : "Compound$0",
        "values()\tLIST<ConnectApi.RecordFieldType>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Location" : "Location$0",
        "Text" : "Text$0",
        "Name" : "Name$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "Boolean" : "Boolean$0"
    },
    "zoneshowin" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "Portal" : "Portal$0",
        "Internal" : "Internal$0",
        "values()\tLIST<ConnectApi.ZoneShowIn>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Community" : "Community$0"
    },
    "abstractrecordview" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "notfoundexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "usersettings" : {
        "userId" : "userId$0",
        "approvalPosts" : "approvalPosts$0",
        "externalUser" : "externalUser$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "hasAccessToInternalOrg" : "hasAccessToInternalOrg$0",
        "canViewFullUserProfile" : "canViewFullUserProfile$0",
        "canViewAllUsers" : "canViewAllUsers$0",
        "toString()\tString" : "toString()$0",
        "fileSyncStorageLimit" : "fileSyncStorageLimit$0",
        "canFollow" : "canFollow$0",
        "userLocale" : "userLocale$0",
        "userDefaultCurrencyIsoCode" : "userDefaultCurrencyIsoCode$0",
        "canViewAllGroups" : "canViewAllGroups$0",
        "canModifyAllData" : "canModifyAllData$0",
        "canOwnGroups" : "canOwnGroups$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hasRestDataApiAccess" : "hasRestDataApiAccess$0",
        "hasFileSync" : "hasFileSync$0",
        "canViewAllData" : "canViewAllData$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "currencySymbol" : "currencySymbol$0",
        "canViewPublicFiles" : "canViewPublicFiles$0"
    },
    "actorwithid" : {
        "id" : "id$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "motif" : "motif$0",
        "url" : "url$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "mySubscription" : "mySubscription$0",
        "toString()\tString" : "toString()$0"
    },
    "pluginrequest" : {
        "inputParameters" : "inputParameters$0"
    },
    "xmlstreamreader" : {
        "getAttributePrefix(Integer index)\tString" : "getAttributePrefix($0)",
        "nextTag()\tInteger" : "nextTag()$0",
        "next()\tInteger" : "next()$0",
        "getAttributeValue(String namespaceURI, String localName)\tString" : "getAttributeValue($0)",
        "setNamespaceAware(Boolean flag)\tvoid" : "setNamespaceAware($0)",
        "getLocation()\tString" : "getLocation()$0",
        "getAttributeType(Integer index)\tString" : "getAttributeType($0)",
        "toString()\tString" : "toString()$0",
        "getNamespace()\tString" : "getNamespace()$0",
        "getNamespaceURIAt(Integer index)\tString" : "getNamespaceURIAt($0)",
        "getAttributeLocalName(Integer index)\tString" : "getAttributeLocalName($0)",
        "getAttributeValueAt(Integer index)\tString" : "getAttributeValueAt($0)",
        "hasText()\tBoolean" : "hasText()$0",
        "getEventType()\tsystem.XmlTag" : "getEventType()$0",
        "getPrefix()\tString" : "getPrefix()$0",
        "getText()\tString" : "getText()$0",
        "getVersion()\tString" : "getVersion()$0",
        "getNamespaceURI(String prefix)\tString" : "getNamespaceURI($0)",
        "isEndElement()\tBoolean" : "isEndElement()$0",
        "getPITarget()\tString" : "getPITarget()$0",
        "getNamespacePrefix(Integer index)\tString" : "getNamespacePrefix($0)",
        "hasName()\tBoolean" : "hasName()$0",
        "isWhitespace()\tBoolean" : "isWhitespace()$0",
        "setCoalescing(Boolean flag)\tvoid" : "setCoalescing($0)",
        "hasNext()\tBoolean" : "hasNext()$0",
        "isCharacters()\tBoolean" : "isCharacters()$0",
        "getPIData()\tString" : "getPIData()$0",
        "getNamespaceCount()\tInteger" : "getNamespaceCount()$0",
        "isStartElement()\tBoolean" : "isStartElement()$0",
        "getLocalName()\tString" : "getLocalName()$0",
        "getAttributeNamespace(Integer index)\tString" : "getAttributeNamespace($0)",
        "getAttributeCount()\tInteger" : "getAttributeCount()$0"
    },
    "nosuchelementexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "moderationflags" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "flaggedByMe" : "flaggedByMe$0",
        "flagCount" : "flagCount$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "summaryvalue" : {
        "getValue()\tObject" : "getValue()$0",
        "setValue(Object value)\tvoid" : "setValue($0)",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "comment" : {
        "relativeCreatedDate" : "relativeCreatedDate$0",
        "moderationFlags" : "moderationFlags$0",
        "type" : "type$0",
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "url" : "url$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "isDeleteRestricted" : "isDeleteRestricted$0",
        "likes" : "likes$0",
        "toString()\tString" : "toString()$0",
        "createdDate" : "createdDate$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "myLike" : "myLike$0",
        "likesMessage" : "likesMessage$0",
        "body" : "body$0",
        "parent" : "parent$0",
        "feedItem" : "feedItem$0",
        "attachment" : "attachment$0",
        "clientInfo" : "clientInfo$0",
        "user" : "user$0"
    },
    "unexpectedexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "licensingandprovisioning" : {
        "linkTenantAccount(String serviceProviderKey, String tenantExternalId, String accountId)\tvoid" : "linkTenantAccount($0)",
        "replaceTenantAccountLink(String serviceProviderKey, String oldTenantExternalId, String newTenantExternalId)\tvoid" : "replaceTenantAccountLink($0)"
    },
    "percentrecordfield" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "value" : "value$0",
        "toString()\tString" : "toString()$0"
    },
    "blob" : {
        "valueOf(String o)\tBlob" : "valueOf($0)",
        "toPdf(String o)\tBlob" : "toPdf($0)",
        "size()\tInteger" : "size()$0",
        "toString()\tString" : "toString()$0"
    },
    "staticresourcecalloutmock" : {
        "setStatusCode(Integer code)\tvoid" : "setStatusCode($0)",
        "respond(System.HttpRequest request)\tSystem.HttpResponse" : "respond($0)",
        "setHeader(String key, String val)\tvoid" : "setHeader($0)",
        "setStaticResource(String staticResourceName)\tvoid" : "setStaticResource($0)",
        "setStatus(String status)\tvoid" : "setStatus($0)"
    },
    "massemailmessage" : {
        "getSubject()\tString" : "getSubject()$0",
        "setSaveAsActivity(Boolean param1)\tvoid" : "setSaveAsActivity($0)",
        "setWhatIds(LIST<Id> param1)\tvoid" : "setWhatIds($0)",
        "getSenderDisplayName()\tString" : "getSenderDisplayName()$0",
        "setEmailPriority(String param1)\tvoid" : "setEmailPriority($0)",
        "getReplyTo()\tString" : "getReplyTo()$0",
        "setSubject(String param1)\tvoid" : "setSubject($0)",
        "getWhatIds()\tLIST<Id>" : "getWhatIds()$0",
        "setTargetObjectIds(LIST<Id> param1)\tvoid" : "setTargetObjectIds($0)",
        "setTemplateId(Id param1)\tvoid" : "setTemplateId($0)",
        "getTargetObjectIds()\tLIST<Id>" : "getTargetObjectIds()$0",
        "setUseSignature(Boolean param1)\tvoid" : "setUseSignature($0)",
        "getSaveAsActivity()\tBoolean" : "getSaveAsActivity()$0",
        "setDescription(String param1)\tvoid" : "setDescription($0)",
        "setSenderDisplayName(String param1)\tvoid" : "setSenderDisplayName($0)",
        "setReplyTo(String param1)\tvoid" : "setReplyTo($0)",
        "getBccSender()\tBoolean" : "getBccSender()$0",
        "getUseSignature()\tBoolean" : "getUseSignature()$0",
        "setBccSender(Boolean param1)\tvoid" : "setBccSender($0)",
        "getEmailPriority()\tString" : "getEmailPriority()$0",
        "getTemplateId()\tId" : "getTemplateId()$0",
        "getDescription()\tString" : "getDescription()$0"
    },
    "metadataexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "chatterfavorites" : {
        "getFeedItems(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "setTestGetFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)",
        "getFavorites(String communityId, String subjectId)\tConnectApi.FeedFavorites" : "getFavorites($0)",
        "getFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "updateFavorite(String communityId, String subjectId, String favoriteId, Boolean updateLastViewDate)\tConnectApi.FeedFavorite" : "updateFavorite($0)",
        "deleteFavorite(String communityId, String subjectId, String favoriteId)\tvoid" : "deleteFavorite($0)",
        "getFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage" : "getFeedItems($0)",
        "setTestGetFeedItems(String communityId, String subjectId, String favoriteId, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)",
        "addRecordFavorite(String communityId, String subjectId, String targetId)\tConnectApi.FeedFavorite" : "addRecordFavorite($0)",
        "getFavorite(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedFavorite" : "getFavorite($0)",
        "addFavorite(String communityId, String subjectId, String searchText)\tConnectApi.FeedFavorite" : "addFavorite($0)",
        "setTestGetFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid" : "setTestGetFeedItems($0)"
    },
    "schedulablecontext" : {
        "getTriggerId()\tId" : "getTriggerId()$0"
    },
    "feedfavoritetype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Topic" : "Topic$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.FeedFavoriteType>" : "values()$0",
        "ListView" : "ListView$0",
        "Search" : "Search$0"
    },
    "zones" : {
        "getZone(String communityId, String zoneId)\tConnectApi.Zone" : "getZone($0)",
        "searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize)\tConnectApi.ZoneSearchPage" : "searchInZone($0)",
        "setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize, ConnectApi.ZoneSearchPage result)\tvoid" : "setTestSearchInZone($0)",
        "getZones(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.ZonePage" : "getZones($0)",
        "searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter)\tConnectApi.ZoneSearchPage" : "searchInZone($0)",
        "getZones(String communityId)\tConnectApi.ZonePage" : "getZones($0)",
        "setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, ConnectApi.ZoneSearchPage result)\tvoid" : "setTestSearchInZone($0)"
    },
    "statuscode" : {
        "DELETE_FAILED" : "DELETE_FAILED$0",
        "ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT" : "ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT$0",
        "CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE" : "CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE$0",
        "MAX_ACTIONS_PER_RULE_EXCEEDED" : "MAX_ACTIONS_PER_RULE_EXCEEDED$0",
        "INVALID_PARTNER_NETWORK_STATUS" : "INVALID_PARTNER_NETWORK_STATUS$0",
        "INVALID_ARGUMENT_TYPE" : "INVALID_ARGUMENT_TYPE$0",
        "INVALID_ASSIGNMENT_RULE" : "INVALID_ASSIGNMENT_RULE$0",
        "CANNOT_DISABLE_LAST_ADMIN" : "CANNOT_DISABLE_LAST_ADMIN$0",
        "COMMUNITY_NOT_ACCESSIBLE" : "COMMUNITY_NOT_ACCESSIBLE$0",
        "DUPLICATE_CUSTOM_TAB_MOTIF" : "DUPLICATE_CUSTOM_TAB_MOTIF$0",
        "INVALID_OPERATOR" : "INVALID_OPERATOR$0",
        "ENTITY_IS_ARCHIVED" : "ENTITY_IS_ARCHIVED$0",
        "DUPLICATE_EXTERNAL_ID" : "DUPLICATE_EXTERNAL_ID$0",
        "STRING_TOO_LONG" : "STRING_TOO_LONG$0",
        "TEMPLATE_NOT_ACTIVE" : "TEMPLATE_NOT_ACTIVE$0",
        "DELETE_OPERATION_TOO_LARGE" : "DELETE_OPERATION_TOO_LARGE$0",
        "INVALID_STATUS" : "INVALID_STATUS$0",
        "CANNOT_UPDATE_CONVERTED_LEAD" : "CANNOT_UPDATE_CONVERTED_LEAD$0",
        "INVALID_CROSS_REFERENCE_KEY" : "INVALID_CROSS_REFERENCE_KEY$0",
        "CANNOT_ENABLE_IP_RESTRICT_REQUESTS" : "CANNOT_ENABLE_IP_RESTRICT_REQUESTS$0",
        "CANNOT_EXECUTE_FLOW_TRIGGER" : "CANNOT_EXECUTE_FLOW_TRIGGER$0",
        "NO_APPLICABLE_PROCESS" : "NO_APPLICABLE_PROCESS$0",
        "INVALID_CURRENCY_CONV_RATE" : "INVALID_CURRENCY_CONV_RATE$0",
        "NO_MASS_MAIL_PERMISSION" : "NO_MASS_MAIL_PERMISSION$0",
        "CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED" : "CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED$0",
        "UNSPECIFIED_EMAIL_ADDRESS" : "UNSPECIFIED_EMAIL_ADDRESS$0",
        "EMPTY_SCONTROL_FILE_NAME" : "EMPTY_SCONTROL_FILE_NAME$0",
        "LICENSE_LIMIT_EXCEEDED" : "LICENSE_LIMIT_EXCEEDED$0",
        "MASSMAIL_RETRY_LIMIT_EXCEEDED" : "MASSMAIL_RETRY_LIMIT_EXCEEDED$0",
        "ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB" : "ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB$0",
        "INVALID_FIELD_FOR_INSERT_UPDATE" : "INVALID_FIELD_FOR_INSERT_UPDATE$0",
        "INVALID_PERSON_ACCOUNT_OPERATION" : "INVALID_PERSON_ACCOUNT_OPERATION$0",
        "ALREADY_IN_PROCESS" : "ALREADY_IN_PROCESS$0",
        "INVALID_TYPE_FOR_OPERATION" : "INVALID_TYPE_FOR_OPERATION$0",
        "CANNOT_REPARENT_RECORD" : "CANNOT_REPARENT_RECORD$0",
        "MAXIMUM_HIERARCHY_LEVELS_REACHED" : "MAXIMUM_HIERARCHY_LEVELS_REACHED$0",
        "INVALID_FIELD" : "INVALID_FIELD$0",
        "INVALID_ACCESS_LEVEL" : "INVALID_ACCESS_LEVEL$0",
        "ASSIGNEE_TYPE_REQUIRED" : "ASSIGNEE_TYPE_REQUIRED$0",
        "UNVERIFIED_SENDER_ADDRESS" : "UNVERIFIED_SENDER_ADDRESS$0",
        "INVALID_LINEITEM_CLONE_STATE" : "INVALID_LINEITEM_CLONE_STATE$0",
        "ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN" : "ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN$0",
        "RECORD_IN_USE_BY_WORKFLOW" : "RECORD_IN_USE_BY_WORKFLOW$0",
        "CANNOT_DEACTIVATE_DIVISION" : "CANNOT_DEACTIVATE_DIVISION$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "FIELD_FILTER_VALIDATION_EXCEPTION" : "FIELD_FILTER_VALIDATION_EXCEPTION$0",
        "MISSING_ARGUMENT" : "MISSING_ARGUMENT$0",
        "INVALID_QUERY_LOCATOR" : "INVALID_QUERY_LOCATOR$0",
        "INVALID_CURRENCY_CORP_RATE" : "INVALID_CURRENCY_CORP_RATE$0",
        "INVALID_OWNER" : "INVALID_OWNER$0",
        "DUPLICATE_USERNAME" : "DUPLICATE_USERNAME$0",
        "NO_ATTACHMENT_PERMISSION" : "NO_ATTACHMENT_PERMISSION$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "LIMIT_EXCEEDED" : "LIMIT_EXCEEDED$0",
        "SUBDOMAIN_IN_USE" : "SUBDOMAIN_IN_USE$0",
        "MAX_TM_RULE_ITEMS_EXCEEDED" : "MAX_TM_RULE_ITEMS_EXCEEDED$0",
        "REQUIRED_FIELD_MISSING" : "REQUIRED_FIELD_MISSING$0",
        "MAXIMUM_SIZE_OF_ATTACHMENT" : "MAXIMUM_SIZE_OF_ATTACHMENT$0",
        "USER_OWNS_PORTAL_ACCOUNT_EXCEPTION" : "USER_OWNS_PORTAL_ACCOUNT_EXCEPTION$0",
        "CANNOT_RENAME_REFERENCED_FIELD" : "CANNOT_RENAME_REFERENCED_FIELD$0",
        "CANNOT_CASCADE_PRODUCT_ACTIVE" : "CANNOT_CASCADE_PRODUCT_ACTIVE$0",
        "CANNOT_RENAME_REFERENCED_OBJECT" : "CANNOT_RENAME_REFERENCED_OBJECT$0",
        "INSUFFICIENT_ACCESS_OR_READONLY" : "INSUFFICIENT_ACCESS_OR_READONLY$0",
        "ENTITY_IS_LOCKED" : "ENTITY_IS_LOCKED$0",
        "PACKAGING_API_INSTALL_FAILED" : "PACKAGING_API_INSTALL_FAILED$0",
        "NO_INACTIVE_DIVISION_MEMBERS" : "NO_INACTIVE_DIVISION_MEMBERS$0",
        "TERRITORY_REALIGN_IN_PROGRESS" : "TERRITORY_REALIGN_IN_PROGRESS$0",
        "IMAGE_TOO_LARGE" : "IMAGE_TOO_LARGE$0",
        "CUSTOM_INDEX_EXISTS" : "CUSTOM_INDEX_EXISTS$0",
        "INVALID_FIELD_WHEN_USING_TEMPLATE" : "INVALID_FIELD_WHEN_USING_TEMPLATE$0",
        "DUPLICATE_SENDER_DISPLAY_NAME" : "DUPLICATE_SENDER_DISPLAY_NAME$0",
        "CUSTOM_ENTITY_OR_FIELD_LIMIT" : "CUSTOM_ENTITY_OR_FIELD_LIMIT$0",
        "NONUNIQUE_SHIPPING_ADDRESS" : "NONUNIQUE_SHIPPING_ADDRESS$0",
        "REQUIRED_FEATURE_MISSING" : "REQUIRED_FEATURE_MISSING$0",
        "MANAGER_NOT_DEFINED" : "MANAGER_NOT_DEFINED$0",
        "CHILD_SHARE_FAILS_PARENT" : "CHILD_SHARE_FAILS_PARENT$0",
        "INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY" : "INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY$0",
        "STORAGE_LIMIT_EXCEEDED" : "STORAGE_LIMIT_EXCEEDED$0",
        "CANT_UNSET_CORP_CURRENCY" : "CANT_UNSET_CORP_CURRENCY$0",
        "LIGHT_PORTAL_USER_EXCEPTION" : "LIGHT_PORTAL_USER_EXCEPTION$0",
        "OPTED_OUT_OF_MASS_MAIL" : "OPTED_OUT_OF_MASS_MAIL$0",
        "INVALID_READ_ONLY_USER_DML" : "INVALID_READ_ONLY_USER_DML$0",
        "PRIVATE_CONTACT_ON_ASSET" : "PRIVATE_CONTACT_ON_ASSET$0",
        "INVALID_CONTENT_TYPE" : "INVALID_CONTENT_TYPE$0",
        "CANNOT_RENAME_APEX_REFERENCED_FIELD" : "CANNOT_RENAME_APEX_REFERENCED_FIELD$0",
        "CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD" : "CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD$0",
        "UNSUPPORTED_APEX_TRIGGER_OPERATON" : "UNSUPPORTED_APEX_TRIGGER_OPERATON$0",
        "MAX_RULES_EXCEEDED" : "MAX_RULES_EXCEEDED$0",
        "MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED" : "MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED$0",
        "CUSTOM_METADATA_LIMIT_EXCEEDED" : "CUSTOM_METADATA_LIMIT_EXCEEDED$0",
        "CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY" : "CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY$0",
        "INVALID_TYPE" : "INVALID_TYPE$0",
        "TRANSFER_REQUIRES_READ" : "TRANSFER_REQUIRES_READ$0",
        "INVALID_DATA_CATEGORY_GROUP_REFERENCE" : "INVALID_DATA_CATEGORY_GROUP_REFERENCE$0",
        "MAX_APPROVAL_STEPS_EXCEEDED" : "MAX_APPROVAL_STEPS_EXCEEDED$0",
        "SHARE_NEEDED_FOR_CHILD_OWNER" : "SHARE_NEEDED_FOR_CHILD_OWNER$0",
        "INVALID_ID_FIELD" : "INVALID_ID_FIELD$0",
        "CANNOT_RENAME_APEX_REFERENCED_OBJECT" : "CANNOT_RENAME_APEX_REFERENCED_OBJECT$0",
        "UNAVAILABLE_RECORDTYPE_EXCEPTION" : "UNAVAILABLE_RECORDTYPE_EXCEPTION$0",
        "MALFORMED_ID" : "MALFORMED_ID$0",
        "EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR" : "EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR$0",
        "TOO_MANY_POSSIBLE_USERS_EXIST" : "TOO_MANY_POSSIBLE_USERS_EXIST$0",
        "WRONG_CONTROLLER_TYPE" : "WRONG_CONTROLLER_TYPE$0",
        "INVALID_SIGNUP_COUNTRY" : "INVALID_SIGNUP_COUNTRY$0",
        "values()\tLIST<system.StatusCode>" : "values()$0",
        "CANNOT_MODIFY_MANAGED_OBJECT" : "CANNOT_MODIFY_MANAGED_OBJECT$0",
        "DUPLICATE_MASTER_LABEL" : "DUPLICATE_MASTER_LABEL$0",
        "DUPLICATE_VALUE" : "DUPLICATE_VALUE$0",
        "FAILED_ACTIVATION" : "FAILED_ACTIVATION$0",
        "DUPLICATE_COMM_NICKNAME" : "DUPLICATE_COMM_NICKNAME$0",
        "INVALID_OPERATION" : "INVALID_OPERATION$0",
        "INVALID_OR_None_FOR_RESTRICTED_PICKLIST" : "INVALID_OR_None_FOR_RESTRICTED_PICKLIST$0",
        "ENTITY_IS_DELETED" : "ENTITY_IS_DELETED$0",
        "CIRCULAR_DEPENDENCY" : "CIRCULAR_DEPENDENCY$0",
        "INVALID_SAVE_AS_ACTIVITY_FLAG" : "INVALID_SAVE_AS_ACTIVITY_FLAG$0",
        "BAD_CUSTOM_ENTITY_PARENT_DOMAIN" : "BAD_CUSTOM_ENTITY_PARENT_DOMAIN$0",
        "MAXIMUM_CCEMAILS_EXCEEDED" : "MAXIMUM_CCEMAILS_EXCEEDED$0",
        "CUSTOM_LINK_LIMIT_EXCEEDED" : "CUSTOM_LINK_LIMIT_EXCEEDED$0",
        "INVALID_SUBDOMAIN" : "INVALID_SUBDOMAIN$0",
        "MASS_MAIL_LIMIT_EXCEEDED" : "MASS_MAIL_LIMIT_EXCEEDED$0",
        "INVALID_GOOGLE_DOCS_URL" : "INVALID_GOOGLE_DOCS_URL$0",
        "WEBLINK_URL_INVALID" : "WEBLINK_URL_INVALID$0",
        "ALL_OR_NONE_OPERATION_ROLLED_BACK" : "ALL_OR_NONE_OPERATION_ROLLED_BACK$0",
        "INVALID_SETUP_OWNER" : "INVALID_SETUP_OWNER$0",
        "COLLISION_DETECTED" : "COLLISION_DETECTED$0",
        "MAX_TASK_DESCRIPTION_EXCEEEDED" : "MAX_TASK_DESCRIPTION_EXCEEEDED$0",
        "FIELD_INTEGRITY_EXCEPTION" : "FIELD_INTEGRITY_EXCEPTION$0",
        "DELETE_REQUIRED_ON_CASCADE" : "DELETE_REQUIRED_ON_CASCADE$0",
        "TEMPLATE_NOT_FOUND" : "TEMPLATE_NOT_FOUND$0",
        "PACKAGING_API_UNINSTALL_FAILED" : "PACKAGING_API_UNINSTALL_FAILED$0",
        "CANNOT_DELETE_MANAGED_OBJECT" : "CANNOT_DELETE_MANAGED_OBJECT$0",
        "MAX_ACTIVE_RULES_EXCEEDED" : "MAX_ACTIVE_RULES_EXCEEDED$0",
        "NUMBER_OUTSIDE_VALID_RANGE" : "NUMBER_OUTSIDE_VALID_RANGE$0",
        "MERGE_FAILED" : "MERGE_FAILED$0",
        "USER_WITH_APEX_SHARES_EXCEPTION" : "USER_WITH_APEX_SHARES_EXCEPTION$0",
        "OP_WITH_INVALID_USER_TYPE_EXCEPTION" : "OP_WITH_INVALID_USER_TYPE_EXCEPTION$0",
        "ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB" : "ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB$0",
        "SELF_REFERENCE_FROM_TRIGGER" : "SELF_REFERENCE_FROM_TRIGGER$0",
        "INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD" : "INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD$0",
        "FIELD_CUSTOM_VALIDATION_EXCEPTION" : "FIELD_CUSTOM_VALIDATION_EXCEPTION$0",
        "MAX_TM_RULES_EXCEEDED" : "MAX_TM_RULES_EXCEEDED$0",
        "TABSET_LIMIT_EXCEEDED" : "TABSET_LIMIT_EXCEEDED$0",
        "MAX_FORMULAS_PER_RULE_EXCEEDED" : "MAX_FORMULAS_PER_RULE_EXCEEDED$0",
        "ERROR_IN_MAILER" : "ERROR_IN_MAILER$0",
        "INVALID_FILTER_ACTION" : "INVALID_FILTER_ACTION$0",
        "INVALID_DATA_URI" : "INVALID_DATA_URI$0",
        "CANNOT_DELETE_LAST_DATED_CONVERSION_RATE" : "CANNOT_DELETE_LAST_DATED_CONVERSION_RATE$0",
        "CANNOT_PASSWORD_LOCKOUT" : "CANNOT_PASSWORD_LOCKOUT$0",
        "NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED" : "NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED$0",
        "INVALID_TYPE_ON_FIELD_IN_RECORD" : "INVALID_TYPE_ON_FIELD_IN_RECORD$0",
        "INACTIVE_OWNER_OR_USER" : "INACTIVE_OWNER_OR_USER$0",
        "PORTAL_NO_ACCESS" : "PORTAL_NO_ACCESS$0",
        "INVALID_CURRENCY_ISO" : "INVALID_CURRENCY_ISO$0",
        "DEPENDENCY_EXISTS" : "DEPENDENCY_EXISTS$0",
        "BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED" : "BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED$0",
        "SINGLE_EMAIL_LIMIT_EXCEEDED" : "SINGLE_EMAIL_LIMIT_EXCEEDED$0",
        "STANDARD_PRICE_NOT_DEFINED" : "STANDARD_PRICE_NOT_DEFINED$0",
        "UNKNOWN_EXCEPTION" : "UNKNOWN_EXCEPTION$0",
        "INVALID_BATCH_OPERATION" : "INVALID_BATCH_OPERATION$0",
        "INVALID_SESSION_ID" : "INVALID_SESSION_ID$0",
        "MAXIMUM_SIZE_OF_DOCUMENT" : "MAXIMUM_SIZE_OF_DOCUMENT$0",
        "INVALID_MASTER_OR_TRANSLATED_SOLUTION" : "INVALID_MASTER_OR_TRANSLATED_SOLUTION$0",
        "TOO_MANY_APEX_REQUESTS" : "TOO_MANY_APEX_REQUESTS$0",
        "INVALID_EMPTY_KEY_OWNER" : "INVALID_EMPTY_KEY_OWNER$0",
        "CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED" : "CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED$0",
        "CANT_DISABLE_CORP_CURRENCY" : "CANT_DISABLE_CORP_CURRENCY$0",
        "HTML_FILE_UPLOAD_NOT_ALLOWED" : "HTML_FILE_UPLOAD_NOT_ALLOWED$0",
        "TOO_MANY_ENUM_VALUE" : "TOO_MANY_ENUM_VALUE$0",
        "INVALID_MESSAGE_ID_REFERENCE" : "INVALID_MESSAGE_ID_REFERENCE$0",
        "CUSTOM_TAB_LIMIT_EXCEEDED" : "CUSTOM_TAB_LIMIT_EXCEEDED$0",
        "TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET" : "TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET$0",
        "PACKAGE_LICENSE_REQUIRED" : "PACKAGE_LICENSE_REQUIRED$0",
        "PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT" : "PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT$0",
        "DUPLICATE_DEVELOPER_NAME" : "DUPLICATE_DEVELOPER_NAME$0",
        "INVALID_INET_ADDRESS" : "INVALID_INET_ADDRESS$0",
        "DUPLICATE_CUSTOM_ENTITY_DEFINITION" : "DUPLICATE_CUSTOM_ENTITY_DEFINITION$0",
        "INVALID_OAUTH_URL" : "INVALID_OAUTH_URL$0",
        "INVALID_EMAIL_ADDRESS" : "INVALID_EMAIL_ADDRESS$0",
        "UNDELETE_FAILED" : "UNDELETE_FAILED$0",
        "MIXED_DML_OPERATION" : "MIXED_DML_OPERATION$0",
        "INVALID_CREDIT_CARD_INFO" : "INVALID_CREDIT_CARD_INFO$0",
        "MAX_RULE_ENTRIES_EXCEEDED" : "MAX_RULE_ENTRIES_EXCEEDED$0",
        "FILTERED_LOOKUP_LIMIT_EXCEEDED" : "FILTERED_LOOKUP_LIMIT_EXCEEDED$0",
        "IP_RANGE_LIMIT_EXCEEDED" : "IP_RANGE_LIMIT_EXCEEDED$0",
        "UNABLE_TO_LOCK_ROW" : "UNABLE_TO_LOCK_ROW$0",
        "INVALID_PACKAGE_VERSION" : "INVALID_PACKAGE_VERSION$0",
        "REQUEST_RUNNING_TOO_LONG" : "REQUEST_RUNNING_TOO_LONG$0",
        "CANNOT_FREEZE_SELF" : "CANNOT_FREEZE_SELF$0",
        "WEBLINK_SIZE_LIMIT_EXCEEDED" : "WEBLINK_SIZE_LIMIT_EXCEEDED$0",
        "NO_SUCH_USER_EXISTS" : "NO_SUCH_USER_EXISTS$0",
        "CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD" : "CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD$0",
        "SELF_REFERENCE_FROM_FLOW" : "SELF_REFERENCE_FROM_FLOW$0",
        "CUSTOM_APEX_ERROR" : "CUSTOM_APEX_ERROR$0",
        "INVALID_ASSIGNEE_TYPE" : "INVALID_ASSIGNEE_TYPE$0",
        "DUPLICATE_CASE_SOLUTION" : "DUPLICATE_CASE_SOLUTION$0",
        "ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE" : "ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE$0",
        "QUERY_TIMEOUT" : "QUERY_TIMEOUT$0"
    },
    "test" : {
        "setReadOnlyApplicationMode(Boolean readOnlyApplicationMode)\tvoid" : "setReadOnlyApplicationMode($0)",
        "setMock(system.Type interfaceType, Object mock)\tvoid" : "setMock($0)",
        "testUninstall(system.UninstallHandler script)\tvoid" : "testUninstall($0)",
        "setCurrentPageReference(Object pageReference)\tvoid" : "setCurrentPageReference($0)",
        "loadData(Schema.SObjectType sobjectType, String staticResourceName)\tLIST<SObject>" : "loadData($0)",
        "testInstall(system.InstallHandler script, system.Version version)\tvoid" : "testInstall($0)",
        "isRunningTest()\tBoolean" : "isRunningTest()$0",
        "testInstall(system.InstallHandler script, system.Version version, Boolean isPush)\tvoid" : "testInstall($0)",
        "invokePage(System.PageReference p)\tComponent.apex.page" : "invokePage($0)",
        "stopTest()\tvoid" : "stopTest()$0",
        "setCurrentPage(Object pageReference)\tvoid" : "setCurrentPage($0)",
        "setFixedSearchResults(LIST<String> searchResultsIds)\tvoid" : "setFixedSearchResults($0)",
        "startTest()\tvoid" : "startTest()$0"
    },
    "pollattachmentinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "pollChoices" : "pollChoices$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "reportimageformula" : {
        "setHeight(String height)\tvoid" : "setHeight($0)",
        "setWidth(String width)\tvoid" : "setWidth($0)",
        "getHeight()\tString" : "getHeight()$0",
        "getWidth()\tString" : "getWidth()$0",
        "setText(String text)\tvoid" : "setText($0)",
        "setImgSrc(String imgSrc)\tvoid" : "setImgSrc($0)",
        "getText()\tString" : "getText()$0",
        "getImgSrc()\tString" : "getImgSrc()$0"
    },
    "upsertresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getId()\tId" : "getId()$0",
        "isCreated()\tBoolean" : "isCreated()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "inboundsocialpostresult" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "setSuccess(Boolean success)\tvoid" : "setSuccess($0)"
    },
    "timezone" : {
        "getTimeZone(String id)\tsystem.TimeZone" : "getTimeZone($0)",
        "toString()\tString" : "toString()$0",
        "getDisplayName()\tString" : "getDisplayName()$0",
        "getID()\tString" : "getID()$0",
        "getOffset(Datetime dt)\tInteger" : "getOffset($0)"
    },
    "userinput" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "aboutMe" : "aboutMe$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "chatterconversation" : {
        "conversationUrl" : "conversationUrl$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "conversationId" : "conversationId$0",
        "read" : "read$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "messages" : "messages$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "members" : "members$0",
        "toString()\tString" : "toString()$0"
    },
    "feeditem" : {
        "moderationFlags" : "moderationFlags$0",
        "photoUrl" : "photoUrl$0",
        "topics" : "topics$0",
        "actor" : "actor$0",
        "canShare" : "canShare$0",
        "isLikedByCurrentUser" : "isLikedByCurrentUser$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "isDeleteRestricted" : "isDeleteRestricted$0",
        "toString()\tString" : "toString()$0",
        "myLike" : "myLike$0",
        "comments" : "comments$0",
        "likesMessage" : "likesMessage$0",
        "url" : "url$0",
        "attachment" : "attachment$0",
        "relativeCreatedDate" : "relativeCreatedDate$0",
        "id" : "id$0",
        "type" : "type$0",
        "event" : "event$0",
        "modifiedDate" : "modifiedDate$0",
        "isBookmarkedByCurrentUser" : "isBookmarkedByCurrentUser$0",
        "preamble" : "preamble$0",
        "likes" : "likes$0",
        "createdDate" : "createdDate$0",
        "originalFeedItem" : "originalFeedItem$0",
        "originalFeedItemActor" : "originalFeedItemActor$0",
        "body" : "body$0",
        "parent" : "parent$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "clientInfo" : "clientInfo$0",
        "visibility" : "visibility$0"
    },
    "chattergroupdetail" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "fileCount" : "fileCount$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "pendingRequests" : "pendingRequests$0",
        "information" : "information$0",
        "toString()\tString" : "toString()$0"
    },
    "pattern" : {
        "pattern()\tString" : "pattern()$0",
        "matches(String regex, String input)\tBoolean" : "matches($0)",
        "split(String input)\tLIST<String>" : "split($0)",
        "quote(String s)\tString" : "quote($0)",
        "split(String input, Integer n)\tLIST<String>" : "split($0)",
        "matcher(String input)\tsystem.Matcher" : "matcher($0)",
        "compile(String regex)\tsystem.Pattern" : "compile($0)"
    },
    "reportlinkformula" : {
        "getImage()\treports.ReportImageFormula" : "getImage()$0",
        "setImage(reports.ReportImageFormula image)\tvoid" : "setImage($0)",
        "setTarget(String target)\tvoid" : "setTarget($0)",
        "getUrl()\tString" : "getUrl()$0",
        "setUrl(String url)\tvoid" : "setUrl($0)",
        "setText(String text)\tvoid" : "setText($0)",
        "getText()\tString" : "getText()$0",
        "getTarget()\tString" : "getTarget()$0"
    },
    "component" : {
        "id" : "id$0",
        "rendered" : "rendered$0",
        "componentIterations" : "componentIterations$0",
        "facets" : "facets$0",
        "parent" : "parent$0",
        "getComponentById(String id)\tApexPages.Component" : "getComponentById($0)",
        "childComponents" : "childComponents$0",
        "expressions" : "expressions$0"
    },
    "approvalattachment" : {
        "id" : "id$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "status" : "status$0",
        "postTemplateFields" : "postTemplateFields$0",
        "toString()\tString" : "toString()$0"
    },
    "httpresponse" : {
        "setBodyAsBlob(Blob body)\tvoid" : "setBodyAsBlob($0)",
        "getStatusCode()\tInteger" : "getStatusCode()$0",
        "setBody(String body)\tvoid" : "setBody($0)",
        "getStatus()\tString" : "getStatus()$0",
        "setHeader(String key, String value)\tvoid" : "setHeader($0)",
        "getBody()\tString" : "getBody()$0",
        "getHeader(String key)\tString" : "getHeader($0)",
        "getBodyDocument()\tdom.Document" : "getBodyDocument()$0",
        "setStatus(String status)\tvoid" : "setStatus($0)",
        "toString()\tString" : "toString()$0",
        "getBodyAsBlob()\tBlob" : "getBodyAsBlob()$0",
        "getXmlStreamReader()\tSystem.XmlStreamReader" : "getXmlStreamReader()$0",
        "getHeaderKeys()\tLIST<String>" : "getHeaderKeys()$0",
        "setStatusCode(Integer statusCode)\tvoid" : "setStatusCode($0)"
    },
    "followingcounts" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "people" : "people$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "total" : "total$0",
        "records" : "records$0",
        "toString()\tString" : "toString()$0"
    },
    "unauthenticateduser" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "chattergrouppage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "groups" : "groups$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "plugindescriberesult" : {
        "inputParameters" : "inputParameters$0",
        "tag" : "tag$0",
        "outputParameters" : "outputParameters$0",
        "name" : "name$0",
        "description" : "description$0"
    },
    "childrelationship" : {
        "isRestrictedDelete()\tBoolean" : "isRestrictedDelete()$0",
        "getChildSObject()\tSchema.SObjectType" : "getChildSObject()$0",
        "isDeprecatedAndHidden()\tBoolean" : "isDeprecatedAndHidden()$0",
        "getRelationshipName()\tString" : "getRelationshipName()$0",
        "getField()\tSchema.SObjectField" : "getField()$0",
        "isCascadeDelete()\tBoolean" : "isCascadeDelete()$0"
    },
    "parametertype" : {
        "FLOAT" : "FLOAT$0",
        "DECIMAL" : "DECIMAL$0",
        "DATETIME" : "DATETIME$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "STRING" : "STRING$0",
        "INTEGER" : "INTEGER$0",
        "ID" : "ID$0",
        "DATE" : "DATE$0",
        "LONG" : "LONG$0",
        "DOUBLE" : "DOUBLE$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "BOOLEAN" : "BOOLEAN$0",
        "values()\tLIST<Process.PluginDescribeResult.ParameterType>" : "values()$0"
    },
    "followingpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "following" : "following$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "inboundemailhandler" : {
        "handleInboundEmail(Messaging.InboundEmail param1, Messaging.InboundEnvelope param2)\tMessaging.InboundEmailResult" : "handleInboundEmail($0)"
    },
    "jsontoken" : {
        "VALUE_None" : "VALUE_None$0",
        "END_OBJECT" : "END_OBJECT$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "START_ARRAY" : "START_ARRAY$0",
        "END_ARRAY" : "END_ARRAY$0",
        "VALUE_NUMBER_FLOAT" : "VALUE_NUMBER_FLOAT$0",
        "START_OBJECT" : "START_OBJECT$0",
        "NOT_AVAILABLE" : "NOT_AVAILABLE$0",
        "VALUE_NUMBER_INT" : "VALUE_NUMBER_INT$0",
        "VALUE_FALSE" : "VALUE_FALSE$0",
        "VALUE_STRING" : "VALUE_STRING$0",
        "FIELD_NAME" : "FIELD_NAME$0",
        "values()\tLIST<system.JSONToken>" : "values()$0",
        "VALUE_EMBEDDED_OBJECT" : "VALUE_EMBEDDED_OBJECT$0",
        "VALUE_TRUE" : "VALUE_TRUE$0"
    },
    "features" : {
        "chatterGlobalInfluence" : "chatterGlobalInfluence$0",
        "groupsCanFollow" : "groupsCanFollow$0",
        "thanksAllowed" : "thanksAllowed$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "defaultCurrencyIsoCode" : "defaultCurrencyIsoCode$0",
        "toString()\tString" : "toString()$0",
        "chatterActivity" : "chatterActivity$0",
        "chatterTopics" : "chatterTopics$0",
        "chatterAnswers" : "chatterAnswers$0",
        "trendingTopics" : "trendingTopics$0",
        "connectRecords" : "connectRecords$0",
        "dashboardComponentSnapshots" : "dashboardComponentSnapshots$0",
        "filesOnComments" : "filesOnComments$0",
        "files" : "files$0",
        "publisherActions" : "publisherActions$0",
        "viralInvitesAllowed" : "viralInvitesAllowed$0",
        "chatter" : "chatter$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "chatterMessages" : "chatterMessages$0",
        "mobileNotificationsEnabled" : "mobileNotificationsEnabled$0",
        "communityModeration" : "communityModeration$0",
        "multiCurrency" : "multiCurrency$0",
        "feedPolling" : "feedPolling$0",
        "ideas" : "ideas$0"
    },
    "double" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "longValue()\tLong" : "longValue()$0",
        "valueOf(String str)\tDouble" : "valueOf($0)",
        "round()\tLong" : "round()$0",
        "valueOf(Object o)\tDouble" : "valueOf($0)",
        "intValue()\tInteger" : "intValue()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "format()\tString" : "format()$0",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)"
    },
    "invalidreadonlyuserdmlexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "httpcalloutmock" : {
        "respond(System.HttpRequest param1)\tSystem.HttpResponse" : "respond($0)"
    },
    "canvastemplateattachment" : {
        "namespacePrefix" : "namespacePrefix$0",
        "height" : "height$0",
        "thumbnailUrl" : "thumbnailUrl$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "icon" : "icon$0",
        "parameters" : "parameters$0",
        "title" : "title$0",
        "developerName" : "developerName$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "recordfield" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "groupmemberpage" : {
        "totalMemberCount" : "totalMemberCount$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "myMembership" : "myMembership$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "members" : "members$0",
        "toString()\tString" : "toString()$0"
    },
    "emailattachment" : {
        "getContentType()\tString" : "getContentType()$0",
        "getBody()\tBlob" : "getBody()$0",
        "setContentType(String param1)\tvoid" : "setContentType($0)",
        "getFileName()\tString" : "getFileName()$0",
        "setBody(Blob param1)\tvoid" : "setBody($0)",
        "setFileName(String param1)\tvoid" : "setFileName($0)"
    },
    "detailcolumn" : {
        "setName(String name)\tvoid" : "setName($0)",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "getDataType()\treports.ColumnDataType" : "getDataType()$0",
        "setDataType(String value)\tvoid" : "setDataType($0)",
        "setLabel(String label)\tvoid" : "setLabel($0)"
    },
    "mergerequest" : {
        "setRecordToMergeIds(LIST<String> param1)\tvoid" : "setRecordToMergeIds($0)",
        "setMasterRecord(SObject param1)\tvoid" : "setMasterRecord($0)",
        "getRecordToMergeIds()\tLIST<String>" : "getRecordToMergeIds()$0",
        "getMasterRecord()\tSObject" : "getMasterRecord()$0"
    },
    "chatterlikepage" : {
        "previousPageUrl" : "previousPageUrl$0",
        "nextPageToken" : "nextPageToken$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "total" : "total$0",
        "previousPageToken" : "previousPageToken$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "likes" : "likes$0",
        "toString()\tString" : "toString()$0",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "currentPageToken" : "currentPageToken$0"
    },
    "liveagentrealtimesystem" : {
        "routeChatRequests(LIST<LiveAgent.LiveChatRoutingRoute> routes)\tLIST<LiveAgent.LiveChatRoutingResult>" : "routeChatRequests($0)",
        "setButtonStatus(String liveChatButtonId, Boolean online)\tvoid" : "setButtonStatus($0)"
    },
    "describetabsetresult" : {
        "isSelected()\tBoolean" : "isSelected()$0",
        "getTabs()\tLIST<Schema.DescribeTabResult>" : "getTabs()$0",
        "getNamespace()\tString" : "getNamespace()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getLogoUrl()\tString" : "getLogoUrl()$0"
    },
    "unsupportedoperationexception" : {
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "organizationsettings" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "orgId" : "orgId$0",
        "name" : "name$0",
        "features" : "features$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "accessTimeout" : "accessTimeout$0",
        "userSettings" : "userSettings$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "chatterconversationsummary" : {
        "id" : "id$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "read" : "read$0",
        "latestMessage" : "latestMessage$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "url" : "url$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "members" : "members$0",
        "toString()\tString" : "toString()$0"
    },
    "userprofiles" : {
        "getUserProfile(String communityId, String userId)\tConnectApi.UserProfile" : "getUserProfile($0)"
    },
    "long" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "valueOf(String str)\tLong" : "valueOf($0)",
        "intValue()\tInteger" : "intValue()$0",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "format()\tString" : "format()$0",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)"
    },
    "binaryinput" : {
        "getContentType()\tString" : "getContentType()$0",
        "getFilename()\tString" : "getFilename()$0",
        "toString()\tString" : "toString()$0",
        "getBlobValue()\tBlob" : "getBlobValue()$0"
    },
    "multistaticresourcecalloutmock" : {
        "setStaticResource(String url, String staticResourceName)\tvoid" : "setStaticResource($0)",
        "setStatusCode(Integer code)\tvoid" : "setStatusCode($0)",
        "respond(System.HttpRequest request)\tSystem.HttpResponse" : "respond($0)",
        "setHeader(String key, String val)\tvoid" : "setHeader($0)",
        "setStatus(String status)\tvoid" : "setStatus($0)"
    },
    "applicationreadwritemode" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "DEFAULT" : "DEFAULT$0",
        "values()\tLIST<system.ApplicationReadWriteMode>" : "values()$0",
        "READ_ONLY" : "READ_ONLY$0"
    },
    "messagebody" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "feedbody" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "quickactionresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getIds()\tLIST<Id>" : "getIds()$0",
        "isCreated()\tBoolean" : "isCreated()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "mentionsegmentinput" : {
        "id" : "id$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object" : "convertToJavaObject($0)",
        "toString()\tString" : "toString()$0"
    },
    "undeleteresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getId()\tId" : "getId()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "reporttype" : {
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "getType()\tString" : "getType()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setType(String type)\tvoid" : "setType($0)"
    },
    "visualforceexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "messaging" : {
        "sendEmailMessage(LIST<Id> emailMessagesIds, Boolean allOrNothing)\tLIST<Messaging.SendEmailResult>" : "sendEmailMessage($0)",
        "sendEmail(LIST<Messaging.Email> emailMessages)\tLIST<Messaging.SendEmailResult>" : "sendEmail($0)",
        "reserveMassEmailCapacity(Integer count)\tvoid" : "reserveMassEmailCapacity($0)",
        "sendEmailMessage(LIST<Id> emailMessagesIds)\tLIST<Messaging.SendEmailResult>" : "sendEmailMessage($0)",
        "reserveSingleEmailCapacity(Integer count)\tvoid" : "reserveSingleEmailCapacity($0)",
        "sendEmail(LIST<Messaging.Email> emailMessages, Boolean allOrNothing)\tLIST<Messaging.SendEmailResult>" : "sendEmail($0)"
    },
    "reportfactwithdetails" : {
        "setRows(LIST<reports.ReportDetailRow> rows)\tvoid" : "setRows($0)",
        "getRows()\tLIST<reports.ReportDetailRow>" : "getRows()$0"
    },
    "groupmembershiptype" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "StandardMember" : "StandardMember$0",
        "GroupOwner" : "GroupOwner$0",
        "values()\tLIST<ConnectApi.GroupMembershipType>" : "values()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "NotAMember" : "NotAMember$0",
        "NotAMemberPrivateRequested" : "NotAMemberPrivateRequested$0",
        "GroupManager" : "GroupManager$0"
    },
    "followerpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "followers" : "followers$0",
        "nextPageUrl" : "nextPageUrl$0",
        "currentPageUrl" : "currentPageUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "previousPageUrl" : "previousPageUrl$0",
        "total" : "total$0",
        "toString()\tString" : "toString()$0"
    },
    "dimension" : {
        "getGroupings()\tLIST<reports.GroupingValue>" : "getGroupings()$0",
        "setGroupings(LIST<reports.GroupingValue> groupings)\tvoid" : "setGroupings($0)"
    },
    "describelayoutsection" : {
        "getColumns()\tInteger" : "getColumns()$0",
        "getRows()\tInteger" : "getRows()$0",
        "getLayoutRows()\tLIST<QuickAction.DescribeLayoutRow>" : "getLayoutRows()$0",
        "isUseCollapsibleSection()\tBoolean" : "isUseCollapsibleSection()$0",
        "isUseHeading()\tBoolean" : "isUseHeading()$0",
        "getHeading()\tString" : "getHeading()$0"
    },
    "fieldset" : {
        "getNameSpace()\tString" : "getNameSpace()$0",
        "getSObjectType()\tSchema.SObjectType" : "getSObjectType()$0",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getFields()\tLIST<Schema.FieldSetMember>" : "getFields()$0",
        "getDescription()\tString" : "getDescription()$0"
    },
    "stack" : {
        "peek()\tString" : "peek()$0",
        "pop()\tString" : "pop()$0",
        "empty()\tBoolean" : "empty()$0",
        "push(String item)\tvoid" : "push($0)"
    },
    "currencyrecordfield" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "sobjectfield" : {
        "getDescribe()\tSchema.DescribeFieldResult" : "getDescribe()$0"
    },
    "crypto" : {
        "getRandomLong()\tLong" : "getRandomLong()$0",
        "decryptWithManagedIV(String algorithmName, Blob secretKey, Blob encryptedData)\tBlob" : "decryptWithManagedIV($0)",
        "decrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob encryptedData)\tBlob" : "decrypt($0)",
        "sign(String algorithmName, Blob input, Blob privateKey)\tBlob" : "sign($0)",
        "encrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob clearData)\tBlob" : "encrypt($0)",
        "generateAesKey(Integer size)\tBlob" : "generateAesKey($0)",
        "encryptWithManagedIV(String algorithmName, Blob secretKey, Blob clearData)\tBlob" : "encryptWithManagedIV($0)",
        "generateDigest(String algorithmName, Blob input)\tBlob" : "generateDigest($0)",
        "getRandomInteger()\tInteger" : "getRandomInteger()$0",
        "generateMac(String algorithmName, Blob input, Blob privateKey)\tBlob" : "generateMac($0)"
    },
    "listexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "chattergroup" : {
        "photo" : "photo$0",
        "isArchived" : "isArchived$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "memberCount" : "memberCount$0",
        "visibility" : "visibility$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "canHaveChatterGuests" : "canHaveChatterGuests$0",
        "emailToChatterAddress" : "emailToChatterAddress$0",
        "myRole" : "myRole$0",
        "isAutoArchiveDisabled" : "isAutoArchiveDisabled$0",
        "community" : "community$0",
        "lastFeedItemPostDate" : "lastFeedItemPostDate$0",
        "owner" : "owner$0"
    },
    "webservicemock" : {
        "doInvoke(Object param1, Object param2, MAP<String,ANY> param3, String param4, String param5, String param6, String param7, String param8, String param9)\tvoid" : "doInvoke($0)"
    },
    "pluginresult" : {
        "outputParameters" : "outputParameters$0"
    },
    "header" : {
        "name" : "name$0",
        "value" : "value$0"
    },
    "processrequest" : {
        "getComments()\tString" : "getComments()$0",
        "setComments(String param1)\tvoid" : "setComments($0)",
        "getNextApproverIds()\tLIST<Id>" : "getNextApproverIds()$0",
        "setNextApproverIds(LIST<Id> param1)\tvoid" : "setNextApproverIds($0)"
    },
    "feeditemattachmenttype" : {
        "Link" : "Link$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "RecordSnapshot" : "RecordSnapshot$0",
        "Poll" : "Poll$0",
        "Canvas" : "Canvas$0",
        "EmailMessage" : "EmailMessage$0",
        "values()\tLIST<ConnectApi.FeedItemAttachmentType>" : "values()$0",
        "BasicTemplate" : "BasicTemplate$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "DashboardComponent" : "DashboardComponent$0",
        "Content" : "Content$0",
        "Approval" : "Approval$0",
        "TrackedChange" : "TrackedChange$0",
        "CaseComment" : "CaseComment$0"
    },
    "encodingutil" : {
        "convertToHex(Blob s)\tString" : "convertToHex($0)",
        "urlEncode(String s, String enc)\tString" : "urlEncode($0)",
        "base64Decode(String s)\tBlob" : "base64Decode($0)",
        "base64Encode(Blob s)\tString" : "base64Encode($0)",
        "urlDecode(String s, String enc)\tString" : "urlDecode($0)"
    },
    "topic" : {
        "createdDate" : "createdDate$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "name" : "name$0",
        "id" : "id$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "url" : "url$0",
        "talkingAbout" : "talkingAbout$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0"
    },
    "emailtocasehandler" : {},
    "commenttype" : {
        "TextComment" : "TextComment$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.CommentType>" : "values()$0",
        "ContentComment" : "ContentComment$0"
    },
    "feedtype" : {
        "To" : "To$0",
        "Company" : "Company$0",
        "Topics" : "Topics$0",
        "People" : "People$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "News" : "News$0",
        "Record" : "Record$0",
        "Files" : "Files$0",
        "UserProfile" : "UserProfile$0",
        "Groups" : "Groups$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.FeedType>" : "values()$0",
        "Moderation" : "Moderation$0",
        "Bookmarks" : "Bookmarks$0"
    },
    "file" : {
        "renditionUrl720By480" : "renditionUrl720By480$0",
        "mimeType" : "mimeType$0",
        "fileType" : "fileType$0",
        "renditionUrl240By180" : "renditionUrl240By180$0",
        "contentSize" : "contentSize$0",
        "description" : "description$0",
        "toString()\tString" : "toString()$0",
        "flashRenditionStatus" : "flashRenditionStatus$0",
        "thumb240By180RenditionStatus" : "thumb240By180RenditionStatus$0",
        "pdfRenditionStatus" : "pdfRenditionStatus$0",
        "checksum" : "checksum$0",
        "renditionUrl" : "renditionUrl$0",
        "fileExtension" : "fileExtension$0",
        "thumb120By90RenditionStatus" : "thumb120By90RenditionStatus$0",
        "origin" : "origin$0",
        "isInMyFileSync" : "isInMyFileSync$0",
        "modifiedDate" : "modifiedDate$0",
        "sharingRole" : "sharingRole$0",
        "publishStatus" : "publishStatus$0",
        "contentUrl" : "contentUrl$0",
        "thumb720By480RenditionStatus" : "thumb720By480RenditionStatus$0",
        "downloadUrl" : "downloadUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "title" : "title$0",
        "versionNumber" : "versionNumber$0",
        "owner" : "owner$0"
    },
    "querylocatorchunkiterator" : {
        "next()\tLIST<SObject>" : "next()$0",
        "hasNext()\tBoolean" : "hasNext()$0"
    },
    "restcontext" : {
        "response" : "response$0",
        "request" : "request$0"
    },
    "dmloptions" : {
        "AllowFieldTruncation" : "AllowFieldTruncation$0",
        "LocaleOptions" : "LocaleOptions$0",
        "AssignmentRuleHeader" : "AssignmentRuleHeader$0",
        "OptAllOrNone" : "OptAllOrNone$0",
        "EmailHeader" : "EmailHeader$0"
    },
    "groupinformation" : {
        "text" : "text$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "title" : "title$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "unreadconversationcount" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "hasMore" : "hasMore$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "unreadCount" : "unreadCount$0",
        "toString()\tString" : "toString()$0"
    },
    "apexpages" : {
        "addMessage(ApexPages.Message message)\tvoid" : "addMessage($0)",
        "getMessages()\tLIST<ApexPages.Message>" : "getMessages()$0",
        "hasMessages(ApexPages.Severity severity)\tBoolean" : "hasMessages($0)",
        "hasMessages()\tBoolean" : "hasMessages()$0",
        "currentPage()\tSystem.PageReference" : "currentPage()$0",
        "addMessages(APEX_OBJECT ex)\tvoid" : "addMessages($0)"
    },
    "invalidfilterexception" : {
        "getFilterErrorMap()\tMAP<String,String>" : "getFilterErrorMap()$0",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "feeddensity" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "values()\tLIST<ConnectApi.FeedDensity>" : "values()$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "FewerUpdates" : "FewerUpdates$0",
        "AllUpdates" : "AllUpdates$0"
    },
    "describelayoutitem" : {
        "isPlaceholder()\tBoolean" : "isPlaceholder()$0",
        "isEditable()\tBoolean" : "isEditable()$0",
        "isRequired()\tBoolean" : "isRequired()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getLayoutComponents()\tLIST<QuickAction.DescribeLayoutComponent>" : "getLayoutComponents()$0"
    },
    "feeditemtopicpage" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "topics" : "topics$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "canAssignTopics" : "canAssignTopics$0",
        "toString()\tString" : "toString()$0"
    },
    "communities" : {
        "internalLogin(String startUrl)\tSystem.PageReference" : "internalLogin($0)",
        "communitiesLanding()\tSystem.PageReference" : "communitiesLanding()$0",
        "getCSS()\tString" : "getCSS()$0",
        "communitiesLanding(String startUrl)\tSystem.PageReference" : "communitiesLanding($0)",
        "forwardToAuthPage(String startUrl)\tSystem.PageReference" : "forwardToAuthPage($0)",
        "login(String username, String password, String startUrl)\tSystem.PageReference" : "login($0)"
    },
    "casecommenteventtype" : {
        "UnpublishExistingByCustomer" : "UnpublishExistingByCustomer$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "PublishExistingByCustomer" : "PublishExistingByCustomer$0",
        "PublishExisting" : "PublishExisting$0",
        "values()\tLIST<ConnectApi.CaseCommentEventType>" : "values()$0",
        "UnpublishExsiting" : "UnpublishExsiting$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "NewInternal" : "NewInternal$0",
        "NewPublishedByCustomer" : "NewPublishedByCustomer$0",
        "NewPublished" : "NewPublished$0"
    },
    "componentiteration" : {
        "childComponents" : "childComponents$0",
        "parent" : "parent$0",
        "getComponentById(String id)\tApexPages.Component" : "getComponentById($0)",
        "iterationValue" : "iterationValue$0"
    },
    "reportchartcomponent" : {
        "getContextFilterableField()\tString" : "getContextFilterableField()$0",
        "getHideOnError()\tBoolean" : "getHideOnError()$0",
        "getIncludeContext()\tBoolean" : "getIncludeContext()$0",
        "getSize()\tString" : "getSize()$0",
        "getCacheData()\tBoolean" : "getCacheData()$0",
        "getShowTitle()\tBoolean" : "getShowTitle()$0"
    },
    "usersummary" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "isActive" : "isActive$0",
        "toString()\tString" : "toString()$0"
    },
    "quickactionrequest" : {
        "setQuickActionName(String param1)\tvoid" : "setQuickActionName($0)",
        "setRecord(SObject param1)\tvoid" : "setRecord($0)",
        "getContextId()\tId" : "getContextId()$0",
        "setContextId(Id param1)\tvoid" : "setContextId($0)",
        "getRecord()\tSObject" : "getRecord()$0",
        "getQuickActionName()\tString" : "getQuickActionName()$0"
    },
    "accountcreator" : {
        "createAccount(String param1, String param2, Id param3)\tString" : "createAccount($0)"
    },
    "datacategory" : {
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getChildCategories()\tLIST<Schema.DataCategory>" : "getChildCategories()$0"
    },
    "recordview" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "sections" : "sections$0",
        "toString()\tString" : "toString()$0"
    },
    "mentionvalidationstatus" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "Disallowed" : "Disallowed$0",
        "Ok" : "Ok$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Inaccessible" : "Inaccessible$0",
        "values()\tLIST<ConnectApi.MentionValidationStatus>" : "values()$0"
    },
    "filesummary" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "toString()\tString" : "toString()$0"
    },
    "deleteresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getId()\tId" : "getId()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "groupvisibilitytype" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "values()\tLIST<ConnectApi.GroupVisibilityType>" : "values()$0",
        "PublicAccess" : "PublicAccess$0",
        "PrivateAccess" : "PrivateAccess$0"
    },
    "mentionsegment" : {
        "record" : "record$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "name" : "name$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "accessible" : "accessible$0",
        "user" : "user$0",
        "toString()\tString" : "toString()$0"
    },
    "sparkplugdescriberesult" : {
        "inputParameters" : "inputParameters$0",
        "outputParameters" : "outputParameters$0",
        "name" : "name$0"
    },
    "querylocatoriterator" : {
        "next()\tSObject" : "next()$0",
        "hasNext()\tBoolean" : "hasNext()$0"
    },
    "typeexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "feed" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "feedItemsUrl" : "feedItemsUrl$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "isModifiedUrl" : "isModifiedUrl$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "groupingcolumn" : {
        "getGroupingLevel()\tInteger" : "getGroupingLevel()$0",
        "setGroupingLevel(Integer groupingLevel)\tvoid" : "setGroupingLevel($0)",
        "setName(String name)\tvoid" : "setName($0)",
        "getName()\tString" : "getName()$0",
        "getLabel()\tString" : "getLabel()$0",
        "setLabel(String label)\tvoid" : "setLabel($0)",
        "setDataType(reports.ColumnDataType dataType)\tvoid" : "setDataType($0)",
        "setDataType(String value)\tvoid" : "setDataType($0)",
        "getDataType()\treports.ColumnDataType" : "getDataType()$0"
    },
    "jsonexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "standardcontroller" : {
        "getId()\tString" : "getId()$0",
        "delete()\tSystem.PageReference" : "delete()$0",
        "edit()\tSystem.PageReference" : "edit()$0",
        "save()\tSystem.PageReference" : "save()$0",
        "reset()\tvoid" : "reset()$0",
        "cancel()\tSystem.PageReference" : "cancel()$0",
        "addFields(LIST<String> fieldNames)\tvoid" : "addFields($0)",
        "view()\tSystem.PageReference" : "view()$0",
        "getRecord()\tSObject" : "getRecord()$0",
        "getSubject()\tSObject" : "getSubject()$0"
    },
    "touchhandledexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "emptyrecyclebinresult" : {
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getId()\tId" : "getId()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0"
    },
    "groupemailfrequency" : {
        "Never" : "Never$0",
        "WeeklyDigest" : "WeeklyDigest$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "UseDefault" : "UseDefault$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "values()\tLIST<ConnectApi.GroupEmailFrequency>" : "values()$0",
        "DailyDigest" : "DailyDigest$0",
        "EachPost" : "EachPost$0"
    },
    "boolean" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "valueOf(Object a)\tBoolean" : "valueOf($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)"
    },
    "integer" : {
        "addError(String msg, Boolean escape)\tvoid" : "addError($0)",
        "valueOf(Object o)\tInteger" : "valueOf($0)",
        "valueOf(String i)\tInteger" : "valueOf($0)",
        "addError(APEX_OBJECT msg, Boolean escape)\tvoid" : "addError($0)",
        "addError(String msg)\tvoid" : "addError($0)",
        "format()\tString" : "format()$0",
        "addError(APEX_OBJECT msg)\tvoid" : "addError($0)"
    },
    "noaccessexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "userdetail" : {
        "managerName" : "managerName$0",
        "isActive" : "isActive$0",
        "managerId" : "managerId$0",
        "chatterInfluence" : "chatterInfluence$0",
        "username" : "username$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "groupCount" : "groupCount$0",
        "phoneNumbers" : "phoneNumbers$0",
        "aboutMe" : "aboutMe$0",
        "toString()\tString" : "toString()$0",
        "chatterActivity" : "chatterActivity$0",
        "followersCount" : "followersCount$0",
        "address" : "address$0",
        "email" : "email$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "thanksReceived" : "thanksReceived$0",
        "followingCounts" : "followingCounts$0"
    },
    "picklistentry" : {
        "isDefaultValue()\tBoolean" : "isDefaultValue()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getValue()\tString" : "getValue()$0",
        "isActive()\tBoolean" : "isActive()$0"
    },
    "reportmetadata" : {
        "getReportFilters()\tLIST<reports.ReportFilter>" : "getReportFilters()$0",
        "getGroupingsDown()\tLIST<reports.GroupingInfo>" : "getGroupingsDown()$0",
        "setId(Id id)\tvoid" : "setId($0)",
        "setReportFormat(String value)\tvoid" : "setReportFormat($0)",
        "getCurrencyCode()\tString" : "getCurrencyCode()$0",
        "setGroupingsAcross(LIST<reports.GroupingInfo> groupingsAcross)\tvoid" : "setGroupingsAcross($0)",
        "setReportBooleanFilter(String reportBooleanFilter)\tvoid" : "setReportBooleanFilter($0)",
        "getDetailColumns()\tLIST<String>" : "getDetailColumns()$0",
        "setDetailColumns(LIST<String> detailColumns)\tvoid" : "setDetailColumns($0)",
        "setAggregates(LIST<String> aggregates)\tvoid" : "setAggregates($0)",
        "getReportFormat()\treports.ReportFormat" : "getReportFormat()$0",
        "getDeveloperName()\tString" : "getDeveloperName()$0",
        "getName()\tString" : "getName()$0",
        "getAggregates()\tLIST<String>" : "getAggregates()$0",
        "setDeveloperName(String developerName)\tvoid" : "setDeveloperName($0)",
        "setReportFormat(reports.ReportFormat reportFormat)\tvoid" : "setReportFormat($0)",
        "getId()\tId" : "getId()$0",
        "setReportType(reports.ReportType reportType)\tvoid" : "setReportType($0)",
        "getReportType()\treports.ReportType" : "getReportType()$0",
        "setName(String name)\tvoid" : "setName($0)",
        "setCurrencyCode(String currencyCode)\tvoid" : "setCurrencyCode($0)",
        "setReportFilters(LIST<reports.ReportFilter> reportFilters)\tvoid" : "setReportFilters($0)",
        "setGroupingsDown(LIST<reports.GroupingInfo> groupingsDown)\tvoid" : "setGroupingsDown($0)",
        "getGroupingsAcross()\tLIST<reports.GroupingInfo>" : "getGroupingsAcross()$0",
        "getReportBooleanFilter()\tString" : "getReportBooleanFilter()$0"
    },
    "cookie" : {
        "getDomain()\tString" : "getDomain()$0",
        "getName()\tString" : "getName()$0",
        "getMaxAge()\tInteger" : "getMaxAge()$0",
        "isSecure()\tBoolean" : "isSecure()$0",
        "getPath()\tString" : "getPath()$0",
        "getValue()\tString" : "getValue()$0"
    },
    "trackedchangeattachment" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "changes" : "changes$0",
        "toString()\tString" : "toString()$0"
    },
    "userprofiletabtype" : {
        "hashCode()\tInteger" : "hashCode()$0",
        "CustomWeb" : "CustomWeb$0",
        "Overview" : "Overview$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "Feed" : "Feed$0",
        "CustomVisualForce" : "CustomVisualForce$0",
        "values()\tLIST<ConnectApi.UserProfileTabType>" : "values()$0"
    },
    "feedpollchoice" : {
        "text" : "text$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "voteCountRatio" : "voteCountRatio$0",
        "id" : "id$0",
        "hashCode()\tInteger" : "hashCode()$0",
        "position" : "position$0",
        "voteCount" : "voteCount$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "toString()\tString" : "toString()$0"
    },
    "schedulable" : {
        "execute(system.SchedulableContext param1)\tvoid" : "execute($0)"
    },
    "chattergroupsummary" : {
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "fileCount" : "fileCount$0",
        "toString()\tString" : "toString()$0"
    },
    "chattergroups" : {
        "updateGroupMember(String communityId, String membershipId, ConnectApi.GroupMembershipType role)\tConnectApi.GroupMember" : "updateGroupMember($0)",
        "getGroupMembershipRequests(String communityId, String groupId)\tConnectApi.GroupMembershipRequests" : "getGroupMembershipRequests($0)",
        "follow(String communityId, String groupId, String subjectId)\tConnectApi.Subscription" : "follow($0)",
        "createGroup(String communityId, ConnectApi.ChatterGroupInput groupInput)\tConnectApi.ChatterGroupDetail" : "createGroup($0)",
        "getMyChatterSettings(String communityId, String groupId)\tConnectApi.GroupChatterSettings" : "getMyChatterSettings($0)",
        "getGroups(String communityId, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "getGroup(String communityId, String groupId)\tConnectApi.ChatterGroupDetail" : "getGroup($0)",
        "updateRequestStatus(String communityId, String requestId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequest" : "updateRequestStatus($0)",
        "getGroupMembershipRequests(String communityId, String groupId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequests" : "getGroupMembershipRequests($0)",
        "getGroups(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "deletePhoto(String communityId, String groupId)\tvoid" : "deletePhoto($0)",
        "deleteMember(String communityId, String membershipId)\tvoid" : "deleteMember($0)",
        "getGroupMembershipRequest(String communityId, String requestId)\tConnectApi.GroupMembershipRequest" : "getGroupMembershipRequest($0)",
        "getFollowings(String communityId, String groupId, String filterType)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getFollowings(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "requestGroupMembership(String communityId, String groupId)\tConnectApi.GroupMembershipRequest" : "requestGroupMembership($0)",
        "setTestSearchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "getMembers(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.GroupMemberPage" : "getMembers($0)",
        "deleteGroup(String communityId, String groupId)\tvoid" : "deleteGroup($0)",
        "setPhoto(String communityId, String groupId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo" : "setPhoto($0)",
        "getPhoto(String communityId, String groupId)\tConnectApi.Photo" : "getPhoto($0)",
        "setTestSearchGroups(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "getFollowings(String communityId, String groupId)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getFollowings(String communityId, String groupId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "setPhoto(String communityId, String groupId, String fileId, Integer versionNumber)\tConnectApi.Photo" : "setPhoto($0)",
        "searchGroups(String communityId, String q)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "searchGroups(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "getFollowings(String communityId, String groupId, String filterType, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getGroups(String communityId)\tConnectApi.ChatterGroupPage" : "getGroups($0)",
        "searchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage" : "searchGroups($0)",
        "addMember(String communityId, String groupId, String userId)\tConnectApi.GroupMember" : "addMember($0)",
        "updateMyChatterSettings(String communityId, String groupId, ConnectApi.GroupEmailFrequency emailFrequency)\tConnectApi.GroupChatterSettings" : "updateMyChatterSettings($0)",
        "addMemberWithRole(String communityId, String groupId, String userId, ConnectApi.GroupMembershipType role)\tConnectApi.GroupMember" : "addMemberWithRole($0)",
        "setTestSearchGroups(String communityId, String q, ConnectApi.ChatterGroupPage result)\tvoid" : "setTestSearchGroups($0)",
        "getFollowings(String communityId, String groupId, Integer pageParam)\tConnectApi.FollowingPage" : "getFollowings($0)",
        "getMember(String communityId, String membershipId)\tConnectApi.GroupMember" : "getMember($0)",
        "getMembers(String communityId, String groupId)\tConnectApi.GroupMemberPage" : "getMembers($0)",
        "setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo)\tConnectApi.Photo" : "setPhotoWithAttributes($0)",
        "updateGroup(String communityId, String groupId, ConnectApi.ChatterGroupInput groupInput)\tConnectApi.ChatterGroupDetail" : "updateGroup($0)"
    },
    "processresult" : {
        "getInstanceId()\tString" : "getInstanceId()$0",
        "getActorIds()\tLIST<Id>" : "getActorIds()$0",
        "getInstanceStatus()\tString" : "getInstanceStatus()$0",
        "getNewWorkitemIds()\tLIST<Id>" : "getNewWorkitemIds()$0",
        "getErrors()\tLIST<Database.Error>" : "getErrors()$0",
        "isSuccess()\tBoolean" : "isSuccess()$0",
        "getEntityId()\tString" : "getEntityId()$0"
    },
    "describedatacategorygroupresult" : {
        "getCategoryCount()\tInteger" : "getCategoryCount()$0",
        "getName()\tString" : "getName()$0",
        "getSobject()\tString" : "getSobject()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getDescription()\tString" : "getDescription()$0"
    },
    "iterator" : {
        "next()\tObject" : "next()$0",
        "hasNext()\tBoolean" : "hasNext()$0"
    },
    "serializationexception" : {
        "setMessage(String message)\tvoid" : "setMessage($0)",
        "getMessage()\tString" : "getMessage()$0",
        "getCause()\tException" : "getCause()$0",
        "getStackTraceString()\tString" : "getStackTraceString()$0",
        "getLineNumber()\tInteger" : "getLineNumber()$0",
        "initCause(APEX_OBJECT cause)\tvoid" : "initCause($0)",
        "getTypeName()\tString" : "getTypeName()$0"
    },
    "fieldsetmember" : {
        "getFieldPath()\tString" : "getFieldPath()$0",
        "getType()\tSchema.DisplayType" : "getType()$0",
        "getDbRequired()\tBoolean" : "getDbRequired()$0",
        "getLabel()\tString" : "getLabel()$0",
        "getRequired()\tBoolean" : "getRequired()$0"
    },
    "deletedrecord" : {
        "getDeletedDate()\tDate" : "getDeletedDate()$0",
        "getId()\tId" : "getId()$0"
    },
    "interview" : {
        "getVariableValue(String variableName)\tObject" : "getVariableValue($0)"
    },
    "abstractmessagebody" : {
        "text" : "text$0",
        "equals(Object obj)\tBoolean" : "equals($0)",
        "hashCode()\tInteger" : "hashCode()$0",
        "toString()\tString" : "toString()$0",
        "getBuildVersion()\tDouble" : "getBuildVersion()$0",
        "messageSegments" : "messageSegments$0"
    }
}

