apex_completions = {
    'AbstractMessageBody' : {
        '[M]AbstractMessageBody.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]AbstractMessageBody.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]AbstractMessageBody.hashCode()\tInteger' : 'hashCode()$0',
        '[M]AbstractMessageBody.toString()\tString' : 'toString()$0',
        '[P]AbstractMessageBody.messageSegments' : 'messageSegments$0',
        '[P]AbstractMessageBody.text' : 'text$0'
    },
    'Action' : {
        '[M]Action.getExpression()\tString' : 'getExpression()$0',
        '[M]Action.invoke()\tSystem.PageReference' : 'invoke()$0'
    },
    'Actor' : {
        '[M]Actor.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Actor.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Actor.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Actor.toString()\tString' : 'toString()$0',
        '[P]Actor.name' : 'name$0',
        '[P]Actor.type' : 'type$0'
    },
    'ActorWithId' : {
        '[M]ActorWithId.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ActorWithId.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ActorWithId.toString()\tString' : 'toString()$0',
        '[P]ActorWithId.id' : 'id$0',
        '[P]ActorWithId.motif' : 'motif$0',
        '[P]ActorWithId.mySubscription' : 'mySubscription$0',
        '[P]ActorWithId.url' : 'url$0'
    },
    'Address' : {
        '[M]Address.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Address.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Address.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Address.toString()\tString' : 'toString()$0',
        '[P]Address.city' : 'city$0',
        '[P]Address.country' : 'country$0',
        '[P]Address.formattedAddress' : 'formattedAddress$0',
        '[P]Address.state' : 'state$0',
        '[P]Address.street' : 'street$0',
        '[P]Address.zip' : 'zip$0'
    },
    'Answers' : {
        '[M]Answers.findSimilar(SObject question)\tList<Id>' : 'findSimilar($0)',
        '[M]Answers.setBestReply(String questionId, String bestReplyId)\tvoid' : 'setBestReply($0)'
    },
    'ApexPages' : {
        '[M]ApexPages.addMessage(ApexPages.Message message)\tvoid' : 'addMessage($0)',
        '[M]ApexPages.addMessages(APEX_OBJECT ex)\tvoid' : 'addMessages($0)',
        '[M]ApexPages.currentPage()\tSystem.PageReference' : 'currentPage()$0',
        '[M]ApexPages.getMessages()\tList<ApexPages.Message>' : 'getMessages()$0',
        '[M]ApexPages.hasMessages()\tBoolean' : 'hasMessages()$0',
        '[M]ApexPages.hasMessages(ApexPages.Severity severity)\tBoolean' : 'hasMessages($0)'
    },
    'AppExchange' : {
        '[M]AppExchange.calculateListingPopularity(String testUserName, String testCronString)\tvoid' : 'calculateListingPopularity($0)',
        '[M]AppExchange.createOrg(String firstName, String lastName, String companyName, String email, String language, String adminUserName, String packageId, String evalUserName, Boolean isExtension)\tString' : 'createOrg($0)',
        '[M]AppExchange.createPortalUser(SObject user, String accountId)\tId' : 'createPortalUser($0)',
        '[M]AppExchange.createSession(String appExchangeOrgId, String portalId, String siteId, String portalUserId)\tString' : 'createSession($0)',
        '[M]AppExchange.debug(String message)\tvoid' : 'debug($0)',
        '[M]AppExchange.getAuthenticatingUrl(String page)\tString' : 'getAuthenticatingUrl($0)',
        '[M]AppExchange.getConfig(String section, String key)\tString' : 'getConfig($0)',
        '[M]AppExchange.getCookie(String name)\tString' : 'getCookie($0)',
        '[M]AppExchange.getCrossInstanceEncryptedHash(Double appVersion, String value)\tString' : 'getCrossInstanceEncryptedHash($0)',
        '[M]AppExchange.getInstalledPackageVersions(String orgId)\tList<String>' : 'getInstalledPackageVersions($0)',
        '[M]AppExchange.getOrgName(String orgId)\tString' : 'getOrgName($0)',
        '[M]AppExchange.getPackageManifest(String pkgVersionId)\tString' : 'getPackageManifest($0)',
        '[M]AppExchange.getPortalAdminId()\tString' : 'getPortalAdminId()$0',
        '[M]AppExchange.getPortalId()\tString' : 'getPortalId()$0',
        '[M]AppExchange.getSiteId()\tString' : 'getSiteId()$0',
        '[M]AppExchange.getTrialTemplates(String callerOrgId, String lmPkgId, String username)\tList<TrialTemplate>' : 'getTrialTemplates($0)',
        '[M]AppExchange.isDuplicateUserName(String username)\tBoolean' : 'isDuplicateUserName($0)',
        '[M]AppExchange.isGuestUser()\tBoolean' : 'isGuestUser()$0',
        '[M]AppExchange.movedPermanently(String location)\tvoid' : 'movedPermanently($0)',
        '[M]AppExchange.provisionPackageLicense(String orgId, String allPackageId, Integer numLicenses, Date expirationDate, String status)\tString' : 'provisionPackageLicense($0)',
        '[M]AppExchange.registerPackageVersion(String pkgVersionId)\tBoolean' : 'registerPackageVersion($0)',
        '[M]AppExchange.setCookie(String name, String value)\tvoid' : 'setCookie($0)',
        '[M]AppExchange.setCookie(String name, String value, String cookieDomainName, Integer cookieAge)\tvoid' : 'setCookie($0)',
        '[M]AppExchange.setDefaultLicenseTerms(String pkgVersionId, String orgId, String defaultLicenseStatus, Integer defaultLicenseLength, Integer defaultLicenseSeats)\tvoid' : 'setDefaultLicenseTerms($0)',
        '[M]AppExchange.setHttpResponseStatus(Integer statusCode)\tvoid' : 'setHttpResponseStatus($0)',
        '[M]AppExchange.setLicenseManagementOrganization(String pkgVersionId, String orgId, String username, String password)\tString' : 'setLicenseManagementOrganization($0)',
        '[M]AppExchange.stopListingPopularityJob()\tvoid' : 'stopListingPopularityJob()$0',
        '[M]AppExchange.to15(String id)\tString' : 'to15($0)',
        '[M]AppExchange.to18(String id)\tString' : 'to18($0)',
        '[M]AppExchange.updateSingleAsAdmin(SObject sobj)\tDatabase.SaveResult' : 'updateSingleAsAdmin($0)',
        '[M]AppExchange.validateLMAInstalled(String username, String password)\tString' : 'validateLMAInstalled($0)',
        '[M]AppExchange.validateOrgUser(String username, String password)\tString' : 'validateOrgUser($0)'
    },
    'ApplicationReadWriteMode' : {
        '[M]ApplicationReadWriteMode.values()\tList<system.ApplicationReadWriteMode>' : 'values()$0',
        '[P]ApplicationReadWriteMode.DEFAULT' : 'DEFAULT$0',
        '[P]ApplicationReadWriteMode.READ_ONLY' : 'READ_ONLY$0'
    },
    'ApprovalAttachment' : {
        '[M]ApprovalAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ApprovalAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ApprovalAttachment.toString()\tString' : 'toString()$0',
        '[P]ApprovalAttachment.id' : 'id$0',
        '[P]ApprovalAttachment.postTemplateFields' : 'postTemplateFields$0',
        '[P]ApprovalAttachment.status' : 'status$0'
    },
    'ApprovalPostTemplateField' : {
        '[M]ApprovalPostTemplateField.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ApprovalPostTemplateField.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ApprovalPostTemplateField.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ApprovalPostTemplateField.toString()\tString' : 'toString()$0',
        '[P]ApprovalPostTemplateField.displayName' : 'displayName$0',
        '[P]ApprovalPostTemplateField.displayValue' : 'displayValue$0',
        '[P]ApprovalPostTemplateField.record' : 'record$0'
    },
    'AssertException' : {
        '[M]AssertException.getCause()\tException' : 'getCause()$0',
        '[M]AssertException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]AssertException.getMessage()\tString' : 'getMessage()$0',
        '[M]AssertException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]AssertException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]AssertException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]AssertException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'AssignmentRuleHeader' : {
        '[P]AssignmentRuleHeader.AssignmentRuleId' : 'AssignmentRuleId$0',
        '[P]AssignmentRuleHeader.UseDefaultRule' : 'UseDefaultRule$0'
    },
    'AsyncException' : {
        '[M]AsyncException.getCause()\tException' : 'getCause()$0',
        '[M]AsyncException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]AsyncException.getMessage()\tString' : 'getMessage()$0',
        '[M]AsyncException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]AsyncException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]AsyncException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]AsyncException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'BasicTemplateAttachment' : {
        '[M]BasicTemplateAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]BasicTemplateAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]BasicTemplateAttachment.toString()\tString' : 'toString()$0',
        '[P]BasicTemplateAttachment.description' : 'description$0',
        '[P]BasicTemplateAttachment.icon' : 'icon$0',
        '[P]BasicTemplateAttachment.linkRecordId' : 'linkRecordId$0',
        '[P]BasicTemplateAttachment.linkUrl' : 'linkUrl$0',
        '[P]BasicTemplateAttachment.subtype' : 'subtype$0',
        '[P]BasicTemplateAttachment.title' : 'title$0'
    },
    'Batchable' : {
        '[M]Batchable.execute(Database.BatchableContext param1, List<ANY> param2)\tvoid' : 'execute($0)',
        '[M]Batchable.finish(Database.BatchableContext param1)\tvoid' : 'finish($0)',
        '[M]Batchable.start(Database.BatchableContext param1)\tsystem.Iterable' : 'start($0)'
    },
    'BatchableContext' : {
        '[M]BatchableContext.getChildJobId()\tId' : 'getChildJobId()$0',
        '[M]BatchableContext.getJobId()\tId' : 'getJobId()$0'
    },
    'BatchableContextImpl' : {
        '[M]BatchableContextImpl.getChildJobId()\tId' : 'getChildJobId()$0',
        '[M]BatchableContextImpl.getJobId()\tId' : 'getJobId()$0'
    },
    'BinaryAttachment' : {
        '[P]BinaryAttachment.body' : 'body$0',
        '[P]BinaryAttachment.fileName' : 'fileName$0',
        '[P]BinaryAttachment.mimeTypeSubType' : 'mimeTypeSubType$0'
    },
    'BinaryInput' : {
        '[M]BinaryInput.getBlobValue()\tBlob' : 'getBlobValue()$0',
        '[M]BinaryInput.getContentType()\tString' : 'getContentType()$0',
        '[M]BinaryInput.getFilename()\tString' : 'getFilename()$0',
        '[M]BinaryInput.toString()\tString' : 'toString()$0'
    },
    'Blob' : {
        '[M]Blob.size()\tInteger' : 'size()$0',
        '[M]Blob.toPdf(String o)\tBlob' : 'toPdf($0)',
        '[M]Blob.toString()\tString' : 'toString()$0',
        '[M]Blob.valueOf(String o)\tBlob' : 'valueOf($0)'
    },
    'Boolean' : {
        '[M]Boolean.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Boolean.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Boolean.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Boolean.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Boolean.valueOf(Object a)\tBoolean' : 'valueOf($0)'
    },
    'BusinessHours' : {
        '[M]BusinessHours.add(Id businessHoursId, Datetime startDate, Long interval)\tDatetime' : 'add($0)',
        '[M]BusinessHours.addGmt(Id businessHoursId, Datetime startDate, Long interval)\tDatetime' : 'addGmt($0)',
        '[M]BusinessHours.diff(String businessHoursId, Datetime startDate, Datetime endDate)\tLong' : 'diff($0)'
    },
    'CURRENCY' : {
        '[M]CURRENCY.format()\tString' : 'format()$0',
        '[M]CURRENCY.formatAmount()\tString' : 'formatAmount()$0',
        '[M]CURRENCY.newInstance(Decimal amount, String isoCode)\tCURRENCY' : 'newInstance($0)'
    },
    'CalloutException' : {
        '[M]CalloutException.getCause()\tException' : 'getCause()$0',
        '[M]CalloutException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]CalloutException.getMessage()\tString' : 'getMessage()$0',
        '[M]CalloutException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]CalloutException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]CalloutException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]CalloutException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'CaseActorType' : {
        '[M]CaseActorType.values()\tList<ConnectApi.CaseActorType>' : 'values()$0',
        '[P]CaseActorType.Customer' : 'Customer$0',
        '[P]CaseActorType.CustomerService' : 'CustomerService$0'
    },
    'CaseComment' : {
        '[M]CaseComment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]CaseComment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]CaseComment.toString()\tString' : 'toString()$0',
        '[P]CaseComment.actorType' : 'actorType$0',
        '[P]CaseComment.createdBy' : 'createdBy$0',
        '[P]CaseComment.createdDate' : 'createdDate$0',
        '[P]CaseComment.id' : 'id$0',
        '[P]CaseComment.published' : 'published$0',
        '[P]CaseComment.text' : 'text$0'
    },
    'Cases' : {
        '[M]Cases.getCaseIdFromEmailThreadId(String emailThreadId)\tId' : 'getCaseIdFromEmailThreadId($0)'
    },
    'Chatter' : {
        '[M]Chatter.deleteSubscription(String communityId, String subscriptionId)\tvoid' : 'deleteSubscription($0)',
        '[M]Chatter.getFollowers(String communityId, String recordId)\tConnectApi.FollowerPage' : 'getFollowers($0)',
        '[M]Chatter.getFollowers(String communityId, String recordId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage' : 'getFollowers($0)',
        '[M]Chatter.getSubscription(String communityId, String subscriptionId)\tConnectApi.Subscription' : 'getSubscription($0)'
    },
    'ChatterActivity' : {
        '[M]ChatterActivity.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterActivity.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ChatterActivity.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterActivity.toString()\tString' : 'toString()$0',
        '[P]ChatterActivity.commentCount' : 'commentCount$0',
        '[P]ChatterActivity.commentReceivedCount' : 'commentReceivedCount$0',
        '[P]ChatterActivity.likeReceivedCount' : 'likeReceivedCount$0',
        '[P]ChatterActivity.postCount' : 'postCount$0'
    },
    'ChatterFavorites' : {
        '[M]ChatterFavorites.addFavorite(String communityId, String subjectId, String searchText)\tConnectApi.FeedFavorite' : 'addFavorite($0)',
        '[M]ChatterFavorites.addRecordFavorite(String communityId, String subjectId, String targetId)\tConnectApi.FeedFavorite' : 'addRecordFavorite($0)',
        '[M]ChatterFavorites.deleteFavorite(String communityId, String subjectId, String favoriteId)\tvoid' : 'deleteFavorite($0)',
        '[M]ChatterFavorites.getFavorite(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedFavorite' : 'getFavorite($0)',
        '[M]ChatterFavorites.getFavorites(String communityId, String subjectId)\tConnectApi.FeedFavorites' : 'getFavorites($0)',
        '[M]ChatterFavorites.getFeedItems(String communityId, String subjectId, String favoriteId)\tConnectApi.FeedItemPage' : 'getFeedItems($0)',
        '[M]ChatterFavorites.getFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'getFeedItems($0)',
        '[M]ChatterFavorites.setTestGetFeedItems(String communityId, String subjectId, String favoriteId, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItems($0)',
        '[M]ChatterFavorites.setTestGetFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItems($0)',
        '[M]ChatterFavorites.updateFavorite(String communityId, String subjectId, String favoriteId, Boolean updateLastViewDate)\tConnectApi.FeedFavorite' : 'updateFavorite($0)'
    },
    'ChatterFeeds' : {
        '[M]ChatterFeeds.deleteComment(String communityId, String commentId)\tvoid' : 'deleteComment($0)',
        '[M]ChatterFeeds.deleteFeedItem(String communityId, String feedItemId)\tvoid' : 'deleteFeedItem($0)',
        '[M]ChatterFeeds.deleteLike(String communityId, String likeId)\tvoid' : 'deleteLike($0)',
        '[M]ChatterFeeds.getComment(String communityId, String commentId)\tConnectApi.Comment' : 'getComment($0)',
        '[M]ChatterFeeds.getCommentsForFeedItem(String communityId, String feedItemId)\tConnectApi.CommentPage' : 'getCommentsForFeedItem($0)',
        '[M]ChatterFeeds.getCommentsForFeedItem(String communityId, String feedItemId, String pageParam, Integer pageSize)\tConnectApi.CommentPage' : 'getCommentsForFeedItem($0)',
        '[M]ChatterFeeds.getFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.Feed' : 'getFeed($0)',
        '[M]ChatterFeeds.getFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed' : 'getFeed($0)',
        '[M]ChatterFeeds.getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.Feed' : 'getFeed($0)',
        '[M]ChatterFeeds.getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed' : 'getFeed($0)',
        '[M]ChatterFeeds.getFeedItem(String communityId, String feedItemId)\tConnectApi.FeedItem' : 'getFeedItem($0)',
        '[M]ChatterFeeds.getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFilterFeed($0)',
        '[M]ChatterFeeds.getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'getFeedItemsFromFilterFeed($0)',
        '[M]ChatterFeeds.getFeedPoll(String communityId, String feedItemId)\tConnectApi.FeedPoll' : 'getFeedPoll($0)',
        '[M]ChatterFeeds.getFilterFeed(String communityId, String subjectId, String keyPrefix)\tConnectApi.Feed' : 'getFilterFeed($0)',
        '[M]ChatterFeeds.getFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedSortOrder sortParam)\tConnectApi.Feed' : 'getFilterFeed($0)',
        '[M]ChatterFeeds.getLike(String communityId, String likeId)\tConnectApi.ChatterLike' : 'getLike($0)',
        '[M]ChatterFeeds.getLikesForComment(String communityId, String commentId)\tConnectApi.ChatterLikePage' : 'getLikesForComment($0)',
        '[M]ChatterFeeds.getLikesForComment(String communityId, String commentId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage' : 'getLikesForComment($0)',
        '[M]ChatterFeeds.getLikesForFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLikePage' : 'getLikesForFeedItem($0)',
        '[M]ChatterFeeds.getLikesForFeedItem(String communityId, String feedItemId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterLikePage' : 'getLikesForFeedItem($0)',
        '[M]ChatterFeeds.isModified(String communityId, ConnectApi.FeedType feedType, String subjectId, String since)\tConnectApi.FeedModifiedInfo' : 'isModified($0)',
        '[M]ChatterFeeds.likeComment(String communityId, String commentId)\tConnectApi.ChatterLike' : 'likeComment($0)',
        '[M]ChatterFeeds.likeFeedItem(String communityId, String feedItemId)\tConnectApi.ChatterLike' : 'likeFeedItem($0)',
        '[M]ChatterFeeds.postComment(String communityId, String feedItemId, ConnectApi.CommentInput comment, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.Comment' : 'postComment($0)',
        '[M]ChatterFeeds.postComment(String communityId, String feedItemId, String text)\tConnectApi.Comment' : 'postComment($0)',
        '[M]ChatterFeeds.postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemInput feedItem, ConnectApi.BinaryInput feedItemFileUpload)\tConnectApi.FeedItem' : 'postFeedItem($0)',
        '[M]ChatterFeeds.postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String text)\tConnectApi.FeedItem' : 'postFeedItem($0)',
        '[M]ChatterFeeds.searchFeedItems(String communityId, String q)\tConnectApi.FeedItemPage' : 'searchFeedItems($0)',
        '[M]ChatterFeeds.searchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'searchFeedItems($0)',
        '[M]ChatterFeeds.searchFeedItems(String communityId, String q, String pageParam, Integer pageSize)\tConnectApi.FeedItemPage' : 'searchFeedItems($0)',
        '[M]ChatterFeeds.searchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam)\tConnectApi.FeedItemPage' : 'searchFeedItems($0)',
        '[M]ChatterFeeds.searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFilterFeed($0)',
        '[M]ChatterFeeds.searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q)\tConnectApi.FeedItemPage' : 'searchFeedItemsInFilterFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFilterFeed($0)',
        '[M]ChatterFeeds.setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestGetFeedItemsFromFilterFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItems($0)',
        '[M]ChatterFeeds.setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItems($0)',
        '[M]ChatterFeeds.setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItems($0)',
        '[M]ChatterFeeds.setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItems($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFilterFeed($0)',
        '[M]ChatterFeeds.setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q, ConnectApi.FeedItemPage result)\tvoid' : 'setTestSearchFeedItemsInFilterFeed($0)',
        '[M]ChatterFeeds.shareFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String originalFeedItemId)\tConnectApi.FeedItem' : 'shareFeedItem($0)',
        '[M]ChatterFeeds.updateBookmark(String communityId, String feedItemId, Boolean isBookmarkedByCurrentUser)\tConnectApi.FeedItem' : 'updateBookmark($0)',
        '[M]ChatterFeeds.voteOnFeedPoll(String communityId, String feedItemId, String myChoiceId)\tConnectApi.FeedPoll' : 'voteOnFeedPoll($0)'
    },
    'ChatterGroup' : {
        '[M]ChatterGroup.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterGroup.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterGroup.toString()\tString' : 'toString()$0',
        '[P]ChatterGroup.canHaveChatterGuests' : 'canHaveChatterGuests$0',
        '[P]ChatterGroup.community' : 'community$0',
        '[P]ChatterGroup.description' : 'description$0',
        '[P]ChatterGroup.emailToChatterAddress' : 'emailToChatterAddress$0',
        '[P]ChatterGroup.lastFeedItemPostDate' : 'lastFeedItemPostDate$0',
        '[P]ChatterGroup.memberCount' : 'memberCount$0',
        '[P]ChatterGroup.myRole' : 'myRole$0',
        '[P]ChatterGroup.owner' : 'owner$0',
        '[P]ChatterGroup.photo' : 'photo$0',
        '[P]ChatterGroup.visibility' : 'visibility$0'
    },
    'ChatterGroupDetail' : {
        '[M]ChatterGroupDetail.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterGroupDetail.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterGroupDetail.toString()\tString' : 'toString()$0',
        '[P]ChatterGroupDetail.fileCount' : 'fileCount$0',
        '[P]ChatterGroupDetail.information' : 'information$0'
    },
    'ChatterGroupInput' : {
        '[M]ChatterGroupInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]ChatterGroupInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterGroupInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterGroupInput.toString()\tString' : 'toString()$0',
        '[P]ChatterGroupInput.information' : 'information$0'
    },
    'ChatterGroupPage' : {
        '[M]ChatterGroupPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterGroupPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ChatterGroupPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterGroupPage.toString()\tString' : 'toString()$0',
        '[P]ChatterGroupPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]ChatterGroupPage.groups' : 'groups$0',
        '[P]ChatterGroupPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]ChatterGroupPage.previousPageUrl' : 'previousPageUrl$0'
    },
    'ChatterGroupSummary' : {
        '[M]ChatterGroupSummary.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterGroupSummary.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterGroupSummary.toString()\tString' : 'toString()$0',
        '[P]ChatterGroupSummary.fileCount' : 'fileCount$0'
    },
    'ChatterGroups' : {
        '[M]ChatterGroups.addMember(String communityId, String groupId, String userId)\tConnectApi.GroupMember' : 'addMember($0)',
        '[M]ChatterGroups.deleteMember(String communityId, String membershipId)\tvoid' : 'deleteMember($0)',
        '[M]ChatterGroups.deletePhoto(String communityId, String groupId)\tvoid' : 'deletePhoto($0)',
        '[M]ChatterGroups.follow(String communityId, String groupId, String subjectId)\tConnectApi.Subscription' : 'follow($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId, Integer pageParam)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId, String filterType)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId, String filterType, Integer pageParam)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getFollowings(String communityId, String groupId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterGroups.getGroup(String communityId, String groupId)\tConnectApi.ChatterGroupDetail' : 'getGroup($0)',
        '[M]ChatterGroups.getGroupMembershipRequest(String communityId, String requestId)\tConnectApi.GroupMembershipRequest' : 'getGroupMembershipRequest($0)',
        '[M]ChatterGroups.getGroupMembershipRequests(String communityId, String groupId)\tConnectApi.GroupMembershipRequests' : 'getGroupMembershipRequests($0)',
        '[M]ChatterGroups.getGroupMembershipRequests(String communityId, String groupId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequests' : 'getGroupMembershipRequests($0)',
        '[M]ChatterGroups.getGroups(String communityId)\tConnectApi.ChatterGroupPage' : 'getGroups($0)',
        '[M]ChatterGroups.getGroups(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage' : 'getGroups($0)',
        '[M]ChatterGroups.getMember(String communityId, String membershipId)\tConnectApi.GroupMember' : 'getMember($0)',
        '[M]ChatterGroups.getMembers(String communityId, String groupId)\tConnectApi.GroupMemberPage' : 'getMembers($0)',
        '[M]ChatterGroups.getMembers(String communityId, String groupId, Integer pageParam, Integer pageSize)\tConnectApi.GroupMemberPage' : 'getMembers($0)',
        '[M]ChatterGroups.getMyChatterSettings(String communityId, String groupId)\tConnectApi.GroupChatterSettings' : 'getMyChatterSettings($0)',
        '[M]ChatterGroups.getPhoto(String communityId, String groupId)\tConnectApi.Photo' : 'getPhoto($0)',
        '[M]ChatterGroups.requestGroupMembership(String communityId, String groupId)\tConnectApi.GroupMembershipRequest' : 'requestGroupMembership($0)',
        '[M]ChatterGroups.searchGroups(String communityId, String q)\tConnectApi.ChatterGroupPage' : 'searchGroups($0)',
        '[M]ChatterGroups.searchGroups(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.ChatterGroupPage' : 'searchGroups($0)',
        '[M]ChatterGroups.setPhoto(String communityId, String groupId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo' : 'setPhoto($0)',
        '[M]ChatterGroups.setPhoto(String communityId, String groupId, String fileId, Integer versionNumber)\tConnectApi.Photo' : 'setPhoto($0)',
        '[M]ChatterGroups.setTestSearchGroups(String communityId, String q, ConnectApi.ChatterGroupPage result)\tvoid' : 'setTestSearchGroups($0)',
        '[M]ChatterGroups.setTestSearchGroups(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result)\tvoid' : 'setTestSearchGroups($0)',
        '[M]ChatterGroups.updateGroup(String communityId, String groupId, ConnectApi.ChatterGroupInput groupInput)\tConnectApi.ChatterGroupDetail' : 'updateGroup($0)',
        '[M]ChatterGroups.updateMyChatterSettings(String communityId, String groupId, ConnectApi.GroupEmailFrequency emailFrequency)\tConnectApi.GroupChatterSettings' : 'updateMyChatterSettings($0)',
        '[M]ChatterGroups.updateRequestStatus(String communityId, String requestId, ConnectApi.GroupMembershipRequestStatus status)\tConnectApi.GroupMembershipRequest' : 'updateRequestStatus($0)'
    },
    'ChatterLike' : {
        '[M]ChatterLike.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterLike.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ChatterLike.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterLike.toString()\tString' : 'toString()$0',
        '[P]ChatterLike.id' : 'id$0',
        '[P]ChatterLike.likedItem' : 'likedItem$0',
        '[P]ChatterLike.url' : 'url$0',
        '[P]ChatterLike.user' : 'user$0'
    },
    'ChatterLikePage' : {
        '[M]ChatterLikePage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ChatterLikePage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ChatterLikePage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ChatterLikePage.toString()\tString' : 'toString()$0',
        '[P]ChatterLikePage.currentPageToken' : 'currentPageToken$0',
        '[P]ChatterLikePage.currentPageUrl' : 'currentPageUrl$0',
        '[P]ChatterLikePage.likes' : 'likes$0',
        '[P]ChatterLikePage.nextPageToken' : 'nextPageToken$0',
        '[P]ChatterLikePage.nextPageUrl' : 'nextPageUrl$0',
        '[P]ChatterLikePage.previousPageToken' : 'previousPageToken$0',
        '[P]ChatterLikePage.previousPageUrl' : 'previousPageUrl$0',
        '[P]ChatterLikePage.total' : 'total$0'
    },
    'ChatterUsers' : {
        '[M]ChatterUsers.deletePhoto(String communityId, String userId)\tvoid' : 'deletePhoto($0)',
        '[M]ChatterUsers.follow(String communityId, String userId, String subjectId)\tConnectApi.Subscription' : 'follow($0)',
        '[M]ChatterUsers.getChatterSettings(String communityId, String userId)\tConnectApi.UserChatterSettings' : 'getChatterSettings($0)',
        '[M]ChatterUsers.getFollowers(String communityId, String userId)\tConnectApi.FollowerPage' : 'getFollowers($0)',
        '[M]ChatterUsers.getFollowers(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowerPage' : 'getFollowers($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId, Integer pageParam)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId, String filterType)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId, String filterType, Integer pageParam)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getFollowings(String communityId, String userId, String filterType, Integer pageParam, Integer pageSize)\tConnectApi.FollowingPage' : 'getFollowings($0)',
        '[M]ChatterUsers.getGroups(String communityId, String userId)\tConnectApi.UserGroupPage' : 'getGroups($0)',
        '[M]ChatterUsers.getGroups(String communityId, String userId, Integer pageParam, Integer pageSize)\tConnectApi.UserGroupPage' : 'getGroups($0)',
        '[M]ChatterUsers.getPhoto(String communityId, String userId)\tConnectApi.Photo' : 'getPhoto($0)',
        '[M]ChatterUsers.getUser(String communityId, String userId)\tConnectApi.UserDetail' : 'getUser($0)',
        '[M]ChatterUsers.getUsers(String communityId)\tConnectApi.UserPage' : 'getUsers($0)',
        '[M]ChatterUsers.getUsers(String communityId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage' : 'getUsers($0)',
        '[M]ChatterUsers.searchUsers(String communityId, String q)\tConnectApi.UserPage' : 'searchUsers($0)',
        '[M]ChatterUsers.searchUsers(String communityId, String q, Integer pageParam, Integer pageSize)\tConnectApi.UserPage' : 'searchUsers($0)',
        '[M]ChatterUsers.searchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize)\tConnectApi.UserPage' : 'searchUsers($0)',
        '[M]ChatterUsers.setPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload)\tConnectApi.Photo' : 'setPhoto($0)',
        '[M]ChatterUsers.setPhoto(String communityId, String userId, String fileId, Integer versionNumber)\tConnectApi.Photo' : 'setPhoto($0)',
        '[M]ChatterUsers.setTestSearchUsers(String communityId, String q, ConnectApi.UserPage result)\tvoid' : 'setTestSearchUsers($0)',
        '[M]ChatterUsers.setTestSearchUsers(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid' : 'setTestSearchUsers($0)',
        '[M]ChatterUsers.setTestSearchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize, ConnectApi.UserPage result)\tvoid' : 'setTestSearchUsers($0)',
        '[M]ChatterUsers.updateChatterSettings(String communityId, String userId, ConnectApi.GroupEmailFrequency defaultGroupEmailFrequency)\tConnectApi.UserChatterSettings' : 'updateChatterSettings($0)'
    },
    'ClientInfo' : {
        '[M]ClientInfo.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ClientInfo.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]ClientInfo.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ClientInfo.toString()\tString' : 'toString()$0',
        '[P]ClientInfo.applicationName' : 'applicationName$0',
        '[P]ClientInfo.applicationUrl' : 'applicationUrl$0'
    },
    'Comment' : {
        '[M]Comment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Comment.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Comment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Comment.toString()\tString' : 'toString()$0',
        '[P]Comment.attachment' : 'attachment$0',
        '[P]Comment.body' : 'body$0',
        '[P]Comment.clientInfo' : 'clientInfo$0',
        '[P]Comment.createdDate' : 'createdDate$0',
        '[P]Comment.feedItem' : 'feedItem$0',
        '[P]Comment.id' : 'id$0',
        '[P]Comment.isDeleteRestricted' : 'isDeleteRestricted$0',
        '[P]Comment.likes' : 'likes$0',
        '[P]Comment.likesMessage' : 'likesMessage$0',
        '[P]Comment.myLike' : 'myLike$0',
        '[P]Comment.parent' : 'parent$0',
        '[P]Comment.relativeCreatedDate' : 'relativeCreatedDate$0',
        '[P]Comment.type' : 'type$0',
        '[P]Comment.url' : 'url$0',
        '[P]Comment.user' : 'user$0'
    },
    'CommentInput' : {
        '[M]CommentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]CommentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]CommentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]CommentInput.toString()\tString' : 'toString()$0',
        '[P]CommentInput.attachment' : 'attachment$0',
        '[P]CommentInput.body' : 'body$0'
    },
    'CommentPage' : {
        '[M]CommentPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]CommentPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]CommentPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]CommentPage.toString()\tString' : 'toString()$0',
        '[P]CommentPage.comments' : 'comments$0',
        '[P]CommentPage.currentPageToken' : 'currentPageToken$0',
        '[P]CommentPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]CommentPage.nextPageToken' : 'nextPageToken$0',
        '[P]CommentPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]CommentPage.total' : 'total$0'
    },
    'CommentType' : {
        '[M]CommentType.values()\tList<ConnectApi.CommentType>' : 'values()$0',
        '[P]CommentType.ContentComment' : 'ContentComment$0',
        '[P]CommentType.TextComment' : 'TextComment$0'
    },
    'Communities' : {
        '[M]Communities.getCommunities()\tConnectApi.CommunityPage' : 'getCommunities()$0',
        '[M]Communities.getCommunities(ConnectApi.CommunityStatus status)\tConnectApi.CommunityPage' : 'getCommunities($0)',
        '[M]Communities.getCommunity(String communityId)\tConnectApi.Community' : 'getCommunity($0)'
    },
    'Community' : {
        '[M]Community.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Community.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Community.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Community.toString()\tString' : 'toString()$0',
        '[P]Community.description' : 'description$0',
        '[P]Community.id' : 'id$0',
        '[P]Community.invitationsEnabled' : 'invitationsEnabled$0',
        '[P]Community.name' : 'name$0',
        '[P]Community.sendWelcomeEmail' : 'sendWelcomeEmail$0',
        '[P]Community.status' : 'status$0',
        '[P]Community.url' : 'url$0',
        '[P]Community.urlPathPrefix' : 'urlPathPrefix$0'
    },
    'CommunityPage' : {
        '[M]CommunityPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]CommunityPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]CommunityPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]CommunityPage.toString()\tString' : 'toString()$0',
        '[P]CommunityPage.communities' : 'communities$0',
        '[P]CommunityPage.total' : 'total$0'
    },
    'CommunityStatus' : {
        '[M]CommunityStatus.values()\tList<ConnectApi.CommunityStatus>' : 'values()$0',
        '[P]CommunityStatus.Inactive' : 'Inactive$0',
        '[P]CommunityStatus.Live' : 'Live$0',
        '[P]CommunityStatus.UnderConstruction' : 'UnderConstruction$0'
    },
    'Comparable' : {
        '[M]Comparable.compareTo(Object param1)\tInteger' : 'compareTo($0)'
    },
    'ComplexSegment' : {
        '[M]ComplexSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ComplexSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ComplexSegment.toString()\tString' : 'toString()$0',
        '[P]ComplexSegment.segments' : 'segments$0'
    },
    'Component' : {
        '[M]Component.getComponentById(String id)\tApexPages.Component' : 'getComponentById($0)',
        '[P]Component.childComponents' : 'childComponents$0',
        '[P]Component.componentIterations' : 'componentIterations$0',
        '[P]Component.expressions' : 'expressions$0',
        '[P]Component.facets' : 'facets$0',
        '[P]Component.id' : 'id$0',
        '[P]Component.parent' : 'parent$0',
        '[P]Component.rendered' : 'rendered$0'
    },
    'ComponentIteration' : {
        '[M]ComponentIteration.getComponentById(String id)\tApexPages.Component' : 'getComponentById($0)',
        '[P]ComponentIteration.childComponents' : 'childComponents$0',
        '[P]ComponentIteration.iterationValue' : 'iterationValue$0',
        '[P]ComponentIteration.parent' : 'parent$0'
    },
    'ConnectApiException' : {
        '[M]ConnectApiException.getErrorCode()\tString' : 'getErrorCode()$0',
        '[M]ConnectApiException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'ContentAttachment' : {
        '[M]ContentAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ContentAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ContentAttachment.toString()\tString' : 'toString()$0',
        '[P]ContentAttachment.checksum' : 'checksum$0',
        '[P]ContentAttachment.description' : 'description$0',
        '[P]ContentAttachment.downloadUrl' : 'downloadUrl$0',
        '[P]ContentAttachment.fileExtension' : 'fileExtension$0',
        '[P]ContentAttachment.fileSize' : 'fileSize$0',
        '[P]ContentAttachment.fileType' : 'fileType$0',
        '[P]ContentAttachment.hasImagePreview' : 'hasImagePreview$0',
        '[P]ContentAttachment.hasPdfPreview' : 'hasPdfPreview$0',
        '[P]ContentAttachment.id' : 'id$0',
        '[P]ContentAttachment.isInMyFileSync' : 'isInMyFileSync$0',
        '[P]ContentAttachment.mimeType' : 'mimeType$0',
        '[P]ContentAttachment.renditionUrl' : 'renditionUrl$0',
        '[P]ContentAttachment.title' : 'title$0',
        '[P]ContentAttachment.versionId' : 'versionId$0'
    },
    'ContentAttachmentInput' : {
        '[M]ContentAttachmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]ContentAttachmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ContentAttachmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ContentAttachmentInput.toString()\tString' : 'toString()$0',
        '[P]ContentAttachmentInput.contentDocumentId' : 'contentDocumentId$0'
    },
    'Cookie' : {
        '[M]Cookie.getDomain()\tString' : 'getDomain()$0',
        '[M]Cookie.getMaxAge()\tInteger' : 'getMaxAge()$0',
        '[M]Cookie.getName()\tString' : 'getName()$0',
        '[M]Cookie.getPath()\tString' : 'getPath()$0',
        '[M]Cookie.getValue()\tString' : 'getValue()$0',
        '[M]Cookie.isSecure()\tBoolean' : 'isSecure()$0'
    },
    'Crypto' : {
        '[M]Crypto.decrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob encryptedData)\tBlob' : 'decrypt($0)',
        '[M]Crypto.decryptWithManagedIV(String algorithmName, Blob secretKey, Blob encryptedData)\tBlob' : 'decryptWithManagedIV($0)',
        '[M]Crypto.encrypt(String algorithmName, Blob secretKey, Blob initializationVector, Blob clearData)\tBlob' : 'encrypt($0)',
        '[M]Crypto.encryptWithManagedIV(String algorithmName, Blob secretKey, Blob clearData)\tBlob' : 'encryptWithManagedIV($0)',
        '[M]Crypto.generateAesKey(Integer size)\tBlob' : 'generateAesKey($0)',
        '[M]Crypto.generateDigest(String algorithmName, Blob input)\tBlob' : 'generateDigest($0)',
        '[M]Crypto.generateMac(String algorithmName, Blob input, Blob privateKey)\tBlob' : 'generateMac($0)',
        '[M]Crypto.getRandomInteger()\tInteger' : 'getRandomInteger()$0',
        '[M]Crypto.getRandomLong()\tLong' : 'getRandomLong()$0',
        '[M]Crypto.sign(String algorithmName, Blob input, Blob privateKey)\tBlob' : 'sign($0)'
    },
    'DMLOptions' : {
        '[P]DMLOptions.AllowFieldTruncation' : 'AllowFieldTruncation$0',
        '[P]DMLOptions.AssignmentRuleHeader' : 'AssignmentRuleHeader$0',
        '[P]DMLOptions.EmailHeader' : 'EmailHeader$0',
        '[P]DMLOptions.LocaleOptions' : 'LocaleOptions$0',
        '[P]DMLOptions.OptAllOrNone' : 'OptAllOrNone$0'
    },
    'DashboardComponentAttachment' : {
        '[M]DashboardComponentAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]DashboardComponentAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]DashboardComponentAttachment.toString()\tString' : 'toString()$0',
        '[P]DashboardComponentAttachment.componentId' : 'componentId$0',
        '[P]DashboardComponentAttachment.componentName' : 'componentName$0',
        '[P]DashboardComponentAttachment.dashboardBodyText' : 'dashboardBodyText$0',
        '[P]DashboardComponentAttachment.dashboardId' : 'dashboardId$0',
        '[P]DashboardComponentAttachment.dashboardName' : 'dashboardName$0',
        '[P]DashboardComponentAttachment.fullSizeImageUrl' : 'fullSizeImageUrl$0',
        '[P]DashboardComponentAttachment.lastRefreshDate' : 'lastRefreshDate$0',
        '[P]DashboardComponentAttachment.lastRefreshDateDisplayText' : 'lastRefreshDateDisplayText$0',
        '[P]DashboardComponentAttachment.runningUser' : 'runningUser$0',
        '[P]DashboardComponentAttachment.thumbnailUrl' : 'thumbnailUrl$0'
    },
    'DataCategoryGroupSobjectTypePair' : {},
    'Database' : {
        '[M]Database.convertLead(Database.LeadConvert leadConvert)\tDatabase.LeadConvertResult' : 'convertLead($0)',
        '[M]Database.convertLead(Database.LeadConvert leadConvert, Boolean allOrNothing)\tDatabase.LeadConvertResult' : 'convertLead($0)',
        '[M]Database.convertLead(List<Database.LeadConvert> leadConverts)\tList<Database.LeadConvertResult>' : 'convertLead($0)',
        '[M]Database.convertLead(List<Database.LeadConvert> leadConverts, Boolean allOrNothing)\tList<Database.LeadConvertResult>' : 'convertLead($0)',
        '[M]Database.countQuery(String query)\tInteger' : 'countQuery($0)',
        '[M]Database.delete(Id id)\tDatabase.DeleteResult' : 'delete($0)',
        '[M]Database.delete(Id id, Boolean allOrNothing)\tDatabase.DeleteResult' : 'delete($0)',
        '[M]Database.delete(List<Id> ids)\tList<Database.DeleteResult>' : 'delete($0)',
        '[M]Database.delete(List<Id> ids, Boolean allOrNothing)\tList<Database.DeleteResult>' : 'delete($0)',
        '[M]Database.delete(List<SObject> sobjects)\tList<Database.DeleteResult>' : 'delete($0)',
        '[M]Database.delete(List<SObject> sobjects, Boolean allOrNothing)\tList<Database.DeleteResult>' : 'delete($0)',
        '[M]Database.delete(SObject sobject)\tDatabase.DeleteResult' : 'delete($0)',
        '[M]Database.delete(SObject sobject, Boolean allOrNothing)\tDatabase.DeleteResult' : 'delete($0)',
        '[M]Database.emptyRecycleBin(List<Id> ids)\tList<Database.EmptyRecycleBinResult>' : 'emptyRecycleBin($0)',
        '[M]Database.emptyRecycleBin(List<SObject> sobjects)\tList<Database.EmptyRecycleBinResult>' : 'emptyRecycleBin($0)',
        '[M]Database.emptyRecycleBin(SObject sobject)\tDatabase.EmptyRecycleBinResult' : 'emptyRecycleBin($0)',
        '[M]Database.executeBatch(APEX_OBJECT batchable)\tString' : 'executeBatch($0)',
        '[M]Database.executeBatch(APEX_OBJECT batchable, Integer batchSize)\tString' : 'executeBatch($0)',
        '[M]Database.getQueryLocator(List<SObject> query)\tDatabase.QueryLocator' : 'getQueryLocator($0)',
        '[M]Database.getQueryLocator(String query)\tDatabase.QueryLocator' : 'getQueryLocator($0)',
        '[M]Database.insert(List<SObject> sobjects)\tList<Database.SaveResult>' : 'insert($0)',
        '[M]Database.insert(List<SObject> sobjects, APEX_OBJECT DmlOptions)\tList<Database.SaveResult>' : 'insert($0)',
        '[M]Database.insert(List<SObject> sobjects, Boolean allOrNothing)\tList<Database.SaveResult>' : 'insert($0)',
        '[M]Database.insert(SObject sobject)\tDatabase.SaveResult' : 'insert($0)',
        '[M]Database.insert(SObject sobject, APEX_OBJECT DmlOptions)\tDatabase.SaveResult' : 'insert($0)',
        '[M]Database.insert(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult' : 'insert($0)',
        '[M]Database.query(String query)\tList<SObject>' : 'query($0)',
        '[M]Database.rollback(System.Savepoint savepoint)\tvoid' : 'rollback($0)',
        '[M]Database.setSavepoint()\tSystem.Savepoint' : 'setSavepoint()$0',
        '[M]Database.undelete(Id id)\tDatabase.UndeleteResult' : 'undelete($0)',
        '[M]Database.undelete(Id id, Boolean allOrNothing)\tDatabase.UndeleteResult' : 'undelete($0)',
        '[M]Database.undelete(List<Id> ids)\tList<Database.UndeleteResult>' : 'undelete($0)',
        '[M]Database.undelete(List<Id> ids, Boolean allOrNothing)\tList<Database.UndeleteResult>' : 'undelete($0)',
        '[M]Database.undelete(List<SObject> sobjects)\tList<Database.UndeleteResult>' : 'undelete($0)',
        '[M]Database.undelete(List<SObject> sobjects, Boolean allOrNothing)\tList<Database.UndeleteResult>' : 'undelete($0)',
        '[M]Database.undelete(SObject sobject)\tDatabase.UndeleteResult' : 'undelete($0)',
        '[M]Database.undelete(SObject sobject, Boolean allOrNothing)\tDatabase.UndeleteResult' : 'undelete($0)',
        '[M]Database.update(List<SObject> sobjects)\tList<Database.SaveResult>' : 'update($0)',
        '[M]Database.update(List<SObject> sobjects, APEX_OBJECT allOrNothing)\tList<Database.SaveResult>' : 'update($0)',
        '[M]Database.update(List<SObject> sobjects, Boolean allOrNothing)\tList<Database.SaveResult>' : 'update($0)',
        '[M]Database.update(SObject sobject)\tDatabase.SaveResult' : 'update($0)',
        '[M]Database.update(SObject sobject, APEX_OBJECT allOrNothing)\tDatabase.SaveResult' : 'update($0)',
        '[M]Database.update(SObject sobject, Boolean allOrNothing)\tDatabase.SaveResult' : 'update($0)',
        '[M]Database.upsert(List<SObject> sobjects)\tList<Database.UpsertResult>' : 'upsert($0)',
        '[M]Database.upsert(List<SObject> sobjects, Boolean allOrNothing)\tList<Database.UpsertResult>' : 'upsert($0)',
        '[M]Database.upsert(List<SObject> sobjects, Schema.SObjectField field)\tList<Database.UpsertResult>' : 'upsert($0)',
        '[M]Database.upsert(List<SObject> sobjects, Schema.SObjectField field, Boolean allOrNothing)\tList<Database.UpsertResult>' : 'upsert($0)',
        '[M]Database.upsert(SObject sobject)\tDatabase.UpsertResult' : 'upsert($0)',
        '[M]Database.upsert(SObject sobject, Boolean allOrNothing)\tDatabase.UpsertResult' : 'upsert($0)',
        '[M]Database.upsert(SObject sobject, Schema.SObjectField field)\tDatabase.UpsertResult' : 'upsert($0)',
        '[M]Database.upsert(SObject sobject, Schema.SObjectField field, Boolean allOrNothing)\tDatabase.UpsertResult' : 'upsert($0)'
    },
    'Date' : {
        '[M]Date.addDays(Integer days)\tDate' : 'addDays($0)',
        '[M]Date.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Date.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Date.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Date.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Date.addMonths(Integer months)\tDate' : 'addMonths($0)',
        '[M]Date.addYears(Integer years)\tDate' : 'addYears($0)',
        '[M]Date.day()\tInteger' : 'day()$0',
        '[M]Date.dayOfYear()\tInteger' : 'dayOfYear()$0',
        '[M]Date.daysBetween(Date other)\tInteger' : 'daysBetween($0)',
        '[M]Date.daysInMonth(Integer year, Integer month)\tInteger' : 'daysInMonth($0)',
        '[M]Date.format()\tString' : 'format()$0',
        '[M]Date.isLeapYear(Integer year)\tBoolean' : 'isLeapYear($0)',
        '[M]Date.isSameDay(Date other)\tBoolean' : 'isSameDay($0)',
        '[M]Date.month()\tInteger' : 'month()$0',
        '[M]Date.monthsBetween(Date other)\tInteger' : 'monthsBetween($0)',
        '[M]Date.newInstance(Integer year, Integer month, Integer day)\tDate' : 'newInstance($0)',
        '[M]Date.parse(String str)\tDate' : 'parse($0)',
        '[M]Date.toStartOfMonth()\tDate' : 'toStartOfMonth()$0',
        '[M]Date.toStartOfWeek()\tDate' : 'toStartOfWeek()$0',
        '[M]Date.today()\tDate' : 'today()$0',
        '[M]Date.valueOf(Object o)\tDate' : 'valueOf($0)',
        '[M]Date.valueOf(String str)\tDate' : 'valueOf($0)',
        '[M]Date.year()\tInteger' : 'year()$0'
    },
    'Datetime' : {
        '[M]Datetime.addDays(Integer days)\tDatetime' : 'addDays($0)',
        '[M]Datetime.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Datetime.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Datetime.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Datetime.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Datetime.addHours(Integer hours)\tDatetime' : 'addHours($0)',
        '[M]Datetime.addMinutes(Integer minutes)\tDatetime' : 'addMinutes($0)',
        '[M]Datetime.addMonths(Integer months)\tDatetime' : 'addMonths($0)',
        '[M]Datetime.addSeconds(Integer seconds)\tDatetime' : 'addSeconds($0)',
        '[M]Datetime.addYears(Integer years)\tDatetime' : 'addYears($0)',
        '[M]Datetime.date()\tDate' : 'date()$0',
        '[M]Datetime.dateGmt()\tDate' : 'dateGmt()$0',
        '[M]Datetime.day()\tInteger' : 'day()$0',
        '[M]Datetime.dayGmt()\tInteger' : 'dayGmt()$0',
        '[M]Datetime.dayOfYear()\tInteger' : 'dayOfYear()$0',
        '[M]Datetime.dayOfYearGmt()\tInteger' : 'dayOfYearGmt()$0',
        '[M]Datetime.format()\tString' : 'format()$0',
        '[M]Datetime.format(String dateformat)\tString' : 'format($0)',
        '[M]Datetime.format(String dateformat, String timezone)\tString' : 'format($0)',
        '[M]Datetime.formatGmt(String dateformat)\tString' : 'formatGmt($0)',
        '[M]Datetime.formatLong()\tString' : 'formatLong()$0',
        '[M]Datetime.getTime()\tLong' : 'getTime()$0',
        '[M]Datetime.hour()\tInteger' : 'hour()$0',
        '[M]Datetime.hourGmt()\tInteger' : 'hourGmt()$0',
        '[M]Datetime.isSameDay(Datetime other)\tBoolean' : 'isSameDay($0)',
        '[M]Datetime.millisecond()\tInteger' : 'millisecond()$0',
        '[M]Datetime.millisecondGmt()\tInteger' : 'millisecondGmt()$0',
        '[M]Datetime.minute()\tInteger' : 'minute()$0',
        '[M]Datetime.minuteGmt()\tInteger' : 'minuteGmt()$0',
        '[M]Datetime.month()\tInteger' : 'month()$0',
        '[M]Datetime.monthGmt()\tInteger' : 'monthGmt()$0',
        '[M]Datetime.newInstance(Date date, Time time)\tDatetime' : 'newInstance($0)',
        '[M]Datetime.newInstance(Integer year, Integer month, Integer day)\tDatetime' : 'newInstance($0)',
        '[M]Datetime.newInstance(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime' : 'newInstance($0)',
        '[M]Datetime.newInstance(Long time)\tDatetime' : 'newInstance($0)',
        '[M]Datetime.newInstanceGmt(Date date, Time time)\tDatetime' : 'newInstanceGmt($0)',
        '[M]Datetime.newInstanceGmt(Integer year, Integer month, Integer day)\tDatetime' : 'newInstanceGmt($0)',
        '[M]Datetime.newInstanceGmt(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second)\tDatetime' : 'newInstanceGmt($0)',
        '[M]Datetime.now()\tDatetime' : 'now()$0',
        '[M]Datetime.parse(String str)\tDatetime' : 'parse($0)',
        '[M]Datetime.second()\tInteger' : 'second()$0',
        '[M]Datetime.secondGmt()\tInteger' : 'secondGmt()$0',
        '[M]Datetime.time()\tTime' : 'time()$0',
        '[M]Datetime.timeGmt()\tTime' : 'timeGmt()$0',
        '[M]Datetime.valueOf(Object o)\tDatetime' : 'valueOf($0)',
        '[M]Datetime.valueOf(String str)\tDatetime' : 'valueOf($0)',
        '[M]Datetime.valueOfGmt(String str)\tDatetime' : 'valueOfGmt($0)',
        '[M]Datetime.year()\tInteger' : 'year()$0',
        '[M]Datetime.yearGmt()\tInteger' : 'yearGmt()$0'
    },
    'Decimal' : {
        '[M]Decimal.abs()\tDecimal' : 'abs()$0',
        '[M]Decimal.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Decimal.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Decimal.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Decimal.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Decimal.divide(Decimal divisor, Integer scale)\tDecimal' : 'divide($0)',
        '[M]Decimal.divide(Decimal divisor, Integer scale, APEX_OBJECT roundingMode)\tDecimal' : 'divide($0)',
        '[M]Decimal.doubleValue()\tDouble' : 'doubleValue()$0',
        '[M]Decimal.format()\tString' : 'format()$0',
        '[M]Decimal.intValue()\tInteger' : 'intValue()$0',
        '[M]Decimal.longValue()\tLong' : 'longValue()$0',
        '[M]Decimal.pow(Integer exponent)\tDecimal' : 'pow($0)',
        '[M]Decimal.precision()\tInteger' : 'precision()$0',
        '[M]Decimal.round()\tLong' : 'round()$0',
        '[M]Decimal.round(system.RoundingMode roundingMode)\tLong' : 'round($0)',
        '[M]Decimal.scale()\tInteger' : 'scale()$0',
        '[M]Decimal.setScale(Integer scale)\tDecimal' : 'setScale($0)',
        '[M]Decimal.setScale(Integer scale, system.RoundingMode roundingMode)\tDecimal' : 'setScale($0)',
        '[M]Decimal.stripTrailingZeros()\tDecimal' : 'stripTrailingZeros()$0',
        '[M]Decimal.toPlainString()\tString' : 'toPlainString()$0',
        '[M]Decimal.valueOf(Double dbl)\tDecimal' : 'valueOf($0)',
        '[M]Decimal.valueOf(Long lng)\tDecimal' : 'valueOf($0)',
        '[M]Decimal.valueOf(String str)\tDecimal' : 'valueOf($0)'
    },
    'DisplayType' : {
        '[M]DisplayType.values()\tList<Schema.DisplayType>' : 'values()$0',
        '[P]DisplayType.ANYTYPE' : 'ANYTYPE$0',
        '[P]DisplayType.BASE64' : 'BASE64$0',
        '[P]DisplayType.BOOLEAN' : 'BOOLEAN$0',
        '[P]DisplayType.COMBOBOX' : 'COMBOBOX$0',
        '[P]DisplayType.COMPLEXVALUE' : 'COMPLEXVALUE$0',
        '[P]DisplayType.CURRENCY' : 'CURRENCY$0',
        '[P]DisplayType.DATACATEGORYGROUPREFERENCE' : 'DATACATEGORYGROUPREFERENCE$0',
        '[P]DisplayType.DATE' : 'DATE$0',
        '[P]DisplayType.DATETIME' : 'DATETIME$0',
        '[P]DisplayType.DOUBLE' : 'DOUBLE$0',
        '[P]DisplayType.EMAIL' : 'EMAIL$0',
        '[P]DisplayType.ENCRYPTEDSTRING' : 'ENCRYPTEDSTRING$0',
        '[P]DisplayType.ID' : 'ID$0',
        '[P]DisplayType.INTEGER' : 'INTEGER$0',
        '[P]DisplayType.LOCATION' : 'LOCATION$0',
        '[P]DisplayType.MULTIPICKList' : 'MULTIPICKList$0',
        '[P]DisplayType.PERCENT' : 'PERCENT$0',
        '[P]DisplayType.PHONE' : 'PHONE$0',
        '[P]DisplayType.PICKList' : 'PICKList$0',
        '[P]DisplayType.REFERENCE' : 'REFERENCE$0',
        '[P]DisplayType.STRING' : 'STRING$0',
        '[P]DisplayType.TEXTAREA' : 'TEXTAREA$0',
        '[P]DisplayType.TIME' : 'TIME$0',
        '[P]DisplayType.URL' : 'URL$0'
    },
    'DmlException' : {
        '[M]DmlException.getCause()\tException' : 'getCause()$0',
        '[M]DmlException.getDmlFieldNames(Integer index)\tList<String>' : 'getDmlFieldNames($0)',
        '[M]DmlException.getDmlFields(Integer index)\tList<Schema.SObjectField>' : 'getDmlFields($0)',
        '[M]DmlException.getDmlId(Integer index)\tString' : 'getDmlId($0)',
        '[M]DmlException.getDmlIndex(Integer index)\tInteger' : 'getDmlIndex($0)',
        '[M]DmlException.getDmlMessage(Integer index)\tString' : 'getDmlMessage($0)',
        '[M]DmlException.getDmlStatusCode(Integer index)\tString' : 'getDmlStatusCode($0)',
        '[M]DmlException.getDmlType(Integer index)\tsystem.StatusCode' : 'getDmlType($0)',
        '[M]DmlException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]DmlException.getMessage()\tString' : 'getMessage()$0',
        '[M]DmlException.getNumDml()\tInteger' : 'getNumDml()$0',
        '[M]DmlException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]DmlException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]DmlException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]DmlException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Document' : {
        '[M]Document.createRootElement(String name, String namespace, String prefix)\tdom.XmlNode' : 'createRootElement($0)',
        '[M]Document.getRootElement()\tdom.XmlNode' : 'getRootElement()$0',
        '[M]Document.load(String xml)\tvoid' : 'load($0)',
        '[M]Document.toXmlString()\tString' : 'toXmlString()$0'
    },
    'Double' : {
        '[M]Double.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Double.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Double.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Double.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Double.format()\tString' : 'format()$0',
        '[M]Double.intValue()\tInteger' : 'intValue()$0',
        '[M]Double.longValue()\tLong' : 'longValue()$0',
        '[M]Double.round()\tLong' : 'round()$0',
        '[M]Double.valueOf(Object o)\tDouble' : 'valueOf($0)',
        '[M]Double.valueOf(String str)\tDouble' : 'valueOf($0)'
    },
    'EmailAttachment' : {},
    'EmailException' : {
        '[M]EmailException.getCause()\tException' : 'getCause()$0',
        '[M]EmailException.getDmlFieldNames(Integer index)\tList<String>' : 'getDmlFieldNames($0)',
        '[M]EmailException.getDmlFields(Integer index)\tList<Schema.SObjectField>' : 'getDmlFields($0)',
        '[M]EmailException.getDmlId(Integer index)\tString' : 'getDmlId($0)',
        '[M]EmailException.getDmlIndex(Integer index)\tInteger' : 'getDmlIndex($0)',
        '[M]EmailException.getDmlMessage(Integer index)\tString' : 'getDmlMessage($0)',
        '[M]EmailException.getDmlStatusCode(Integer index)\tString' : 'getDmlStatusCode($0)',
        '[M]EmailException.getDmlType(Integer index)\tsystem.StatusCode' : 'getDmlType($0)',
        '[M]EmailException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]EmailException.getMessage()\tString' : 'getMessage()$0',
        '[M]EmailException.getNumDml()\tInteger' : 'getNumDml()$0',
        '[M]EmailException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]EmailException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]EmailException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]EmailException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'EmailFileAttachment' : {},
    'EmailHeader' : {
        '[P]EmailHeader.TriggerAutoResponseEmail' : 'TriggerAutoResponseEmail$0',
        '[P]EmailHeader.TriggerOtherEmail' : 'TriggerOtherEmail$0',
        '[P]EmailHeader.TriggerUserEmail' : 'TriggerUserEmail$0'
    },
    'EmailTemplateSelector' : {
        '[M]EmailTemplateSelector.getDefaultEmailTemplateId(Id param1)\tId' : 'getDefaultEmailTemplateId($0)'
    },
    'EmailToCaseHandler' : {},
    'EmailToSalesforceHandler' : {},
    'EmptyStackException' : {
        '[M]EmptyStackException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'EncodingUtil' : {
        '[M]EncodingUtil.base64Decode(String s)\tBlob' : 'base64Decode($0)',
        '[M]EncodingUtil.base64Encode(Blob s)\tString' : 'base64Encode($0)',
        '[M]EncodingUtil.convertToHex(Blob s)\tString' : 'convertToHex($0)',
        '[M]EncodingUtil.urlDecode(String s, String enc)\tString' : 'urlDecode($0)',
        '[M]EncodingUtil.urlEncode(String s, String enc)\tString' : 'urlEncode($0)'
    },
    'EntityLinkSegment' : {
        '[M]EntityLinkSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]EntityLinkSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]EntityLinkSegment.toString()\tString' : 'toString()$0',
        '[P]EntityLinkSegment.motif' : 'motif$0',
        '[P]EntityLinkSegment.reference' : 'reference$0'
    },
    'Exception' : {
        '[M]Exception.getCause()\tException' : 'getCause()$0',
        '[M]Exception.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]Exception.getMessage()\tString' : 'getMessage()$0',
        '[M]Exception.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]Exception.getTypeName()\tString' : 'getTypeName()$0',
        '[M]Exception.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]Exception.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Features' : {
        '[M]Features.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Features.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Features.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Features.toString()\tString' : 'toString()$0',
        '[P]Features.chatter' : 'chatter$0',
        '[P]Features.chatterActivity' : 'chatterActivity$0',
        '[P]Features.chatterGlobalInfluence' : 'chatterGlobalInfluence$0',
        '[P]Features.chatterMessages' : 'chatterMessages$0',
        '[P]Features.chatterTopics' : 'chatterTopics$0',
        '[P]Features.dashboardComponentSnapshots' : 'dashboardComponentSnapshots$0',
        '[P]Features.defaultCurrencyIsoCode' : 'defaultCurrencyIsoCode$0',
        '[P]Features.feedPolling' : 'feedPolling$0',
        '[P]Features.files' : 'files$0',
        '[P]Features.filesOnComments' : 'filesOnComments$0',
        '[P]Features.groupsCanFollow' : 'groupsCanFollow$0',
        '[P]Features.multiCurrency' : 'multiCurrency$0',
        '[P]Features.publisherActions' : 'publisherActions$0',
        '[P]Features.thanksAllowed' : 'thanksAllowed$0',
        '[P]Features.trendingTopics' : 'trendingTopics$0',
        '[P]Features.viralInvitesAllowed' : 'viralInvitesAllowed$0'
    },
    'Feed' : {
        '[M]Feed.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Feed.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Feed.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Feed.toString()\tString' : 'toString()$0',
        '[P]Feed.feedItemsUrl' : 'feedItemsUrl$0',
        '[P]Feed.isModifiedUrl' : 'isModifiedUrl$0'
    },
    'FeedBody' : {
        '[M]FeedBody.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedBody.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedBody.toString()\tString' : 'toString()$0'
    },
    'FeedFavorite' : {
        '[M]FeedFavorite.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedFavorite.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedFavorite.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedFavorite.toString()\tString' : 'toString()$0',
        '[P]FeedFavorite.community' : 'community$0',
        '[P]FeedFavorite.createdBy' : 'createdBy$0',
        '[P]FeedFavorite.feedUrl' : 'feedUrl$0',
        '[P]FeedFavorite.id' : 'id$0',
        '[P]FeedFavorite.lastViewDate' : 'lastViewDate$0',
        '[P]FeedFavorite.name' : 'name$0',
        '[P]FeedFavorite.searchText' : 'searchText$0',
        '[P]FeedFavorite.target' : 'target$0',
        '[P]FeedFavorite.type' : 'type$0',
        '[P]FeedFavorite.url' : 'url$0',
        '[P]FeedFavorite.user' : 'user$0'
    },
    'FeedFavoriteType' : {
        '[M]FeedFavoriteType.values()\tList<ConnectApi.FeedFavoriteType>' : 'values()$0',
        '[P]FeedFavoriteType.ListView' : 'ListView$0',
        '[P]FeedFavoriteType.Search' : 'Search$0',
        '[P]FeedFavoriteType.Topic' : 'Topic$0'
    },
    'FeedFavorites' : {
        '[M]FeedFavorites.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedFavorites.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedFavorites.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedFavorites.toString()\tString' : 'toString()$0',
        '[P]FeedFavorites.favorites' : 'favorites$0',
        '[P]FeedFavorites.total' : 'total$0'
    },
    'FeedItem' : {
        '[M]FeedItem.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedItem.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedItem.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedItem.toString()\tString' : 'toString()$0',
        '[P]FeedItem.actor' : 'actor$0',
        '[P]FeedItem.attachment' : 'attachment$0',
        '[P]FeedItem.body' : 'body$0',
        '[P]FeedItem.canShare' : 'canShare$0',
        '[P]FeedItem.clientInfo' : 'clientInfo$0',
        '[P]FeedItem.comments' : 'comments$0',
        '[P]FeedItem.createdDate' : 'createdDate$0',
        '[P]FeedItem.event' : 'event$0',
        '[P]FeedItem.id' : 'id$0',
        '[P]FeedItem.isBookmarkedByCurrentUser' : 'isBookmarkedByCurrentUser$0',
        '[P]FeedItem.isDeleteRestricted' : 'isDeleteRestricted$0',
        '[P]FeedItem.isLikedByCurrentUser' : 'isLikedByCurrentUser$0',
        '[P]FeedItem.likes' : 'likes$0',
        '[P]FeedItem.likesMessage' : 'likesMessage$0',
        '[P]FeedItem.modifiedDate' : 'modifiedDate$0',
        '[P]FeedItem.myLike' : 'myLike$0',
        '[P]FeedItem.originalFeedItem' : 'originalFeedItem$0',
        '[P]FeedItem.originalFeedItemActor' : 'originalFeedItemActor$0',
        '[P]FeedItem.parent' : 'parent$0',
        '[P]FeedItem.photoUrl' : 'photoUrl$0',
        '[P]FeedItem.preamble' : 'preamble$0',
        '[P]FeedItem.relativeCreatedDate' : 'relativeCreatedDate$0',
        '[P]FeedItem.type' : 'type$0',
        '[P]FeedItem.url' : 'url$0',
        '[P]FeedItem.visibility' : 'visibility$0'
    },
    'FeedItemAttachment' : {
        '[M]FeedItemAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedItemAttachment.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedItemAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedItemAttachment.toString()\tString' : 'toString()$0',
        '[P]FeedItemAttachment.type' : 'type$0'
    },
    'FeedItemAttachmentInput' : {
        '[M]FeedItemAttachmentInput.convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]FeedItemAttachmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedItemAttachmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedItemAttachmentInput.toString()\tString' : 'toString()$0'
    },
    'FeedItemAttachmentType' : {
        '[M]FeedItemAttachmentType.values()\tList<ConnectApi.FeedItemAttachmentType>' : 'values()$0',
        '[P]FeedItemAttachmentType.Approval' : 'Approval$0',
        '[P]FeedItemAttachmentType.BasicTemplate' : 'BasicTemplate$0',
        '[P]FeedItemAttachmentType.CaseComment' : 'CaseComment$0',
        '[P]FeedItemAttachmentType.Content' : 'Content$0',
        '[P]FeedItemAttachmentType.DashboardComponent' : 'DashboardComponent$0',
        '[P]FeedItemAttachmentType.Link' : 'Link$0',
        '[P]FeedItemAttachmentType.Poll' : 'Poll$0'
    },
    'FeedItemInput' : {
        '[M]FeedItemInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]FeedItemInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedItemInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedItemInput.toString()\tString' : 'toString()$0',
        '[P]FeedItemInput.attachment' : 'attachment$0',
        '[P]FeedItemInput.body' : 'body$0',
        '[P]FeedItemInput.isBookmarkedByCurrentUser' : 'isBookmarkedByCurrentUser$0',
        '[P]FeedItemInput.originalFeedItemId' : 'originalFeedItemId$0',
        '[P]FeedItemInput.visibility' : 'visibility$0'
    },
    'FeedItemPage' : {
        '[M]FeedItemPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedItemPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedItemPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedItemPage.toString()\tString' : 'toString()$0',
        '[P]FeedItemPage.currentPageToken' : 'currentPageToken$0',
        '[P]FeedItemPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]FeedItemPage.isModifiedToken' : 'isModifiedToken$0',
        '[P]FeedItemPage.isModifiedUrl' : 'isModifiedUrl$0',
        '[P]FeedItemPage.items' : 'items$0',
        '[P]FeedItemPage.nextPageToken' : 'nextPageToken$0',
        '[P]FeedItemPage.nextPageUrl' : 'nextPageUrl$0'
    },
    'FeedItemType' : {
        '[M]FeedItemType.values()\tList<ConnectApi.FeedItemType>' : 'values()$0',
        '[P]FeedItemType.ActivityEvent' : 'ActivityEvent$0',
        '[P]FeedItemType.ApprovalPost' : 'ApprovalPost$0',
        '[P]FeedItemType.AttachArticleEvent' : 'AttachArticleEvent$0',
        '[P]FeedItemType.BasicTemplateFeedItem' : 'BasicTemplateFeedItem$0',
        '[P]FeedItemType.CallLogPost' : 'CallLogPost$0',
        '[P]FeedItemType.CaseCommentPost' : 'CaseCommentPost$0',
        '[P]FeedItemType.ChangeStatusPost' : 'ChangeStatusPost$0',
        '[P]FeedItemType.ChatTranscriptPost' : 'ChatTranscriptPost$0',
        '[P]FeedItemType.CollaborationGroupCreated' : 'CollaborationGroupCreated$0',
        '[P]FeedItemType.CollaborationGroupUnarchived' : 'CollaborationGroupUnarchived$0',
        '[P]FeedItemType.ContentPost' : 'ContentPost$0',
        '[P]FeedItemType.CreateRecordEvent' : 'CreateRecordEvent$0',
        '[P]FeedItemType.DashboardComponentAlert' : 'DashboardComponentAlert$0',
        '[P]FeedItemType.DashboardComponentSnapshot' : 'DashboardComponentSnapshot$0',
        '[P]FeedItemType.EmailMessageEvent' : 'EmailMessageEvent$0',
        '[P]FeedItemType.FacebookPost' : 'FacebookPost$0',
        '[P]FeedItemType.LinkPost' : 'LinkPost$0',
        '[P]FeedItemType.PollPost' : 'PollPost$0',
        '[P]FeedItemType.ReplyPost' : 'ReplyPost$0',
        '[P]FeedItemType.RypplePost' : 'RypplePost$0',
        '[P]FeedItemType.TextPost' : 'TextPost$0',
        '[P]FeedItemType.TrackedChange' : 'TrackedChange$0',
        '[P]FeedItemType.TwitterPost' : 'TwitterPost$0',
        '[P]FeedItemType.UserStatus' : 'UserStatus$0'
    },
    'FeedItemVisibilityType' : {
        '[M]FeedItemVisibilityType.values()\tList<ConnectApi.FeedItemVisibilityType>' : 'values()$0',
        '[P]FeedItemVisibilityType.AllUsers' : 'AllUsers$0',
        '[P]FeedItemVisibilityType.InternalUsers' : 'InternalUsers$0'
    },
    'FeedModifiedInfo' : {
        '[M]FeedModifiedInfo.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedModifiedInfo.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedModifiedInfo.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedModifiedInfo.toString()\tString' : 'toString()$0',
        '[P]FeedModifiedInfo.isModified' : 'isModified$0',
        '[P]FeedModifiedInfo.isModifiedToken' : 'isModifiedToken$0',
        '[P]FeedModifiedInfo.nextPollUrl' : 'nextPollUrl$0'
    },
    'FeedPoll' : {
        '[M]FeedPoll.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedPoll.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedPoll.toString()\tString' : 'toString()$0',
        '[P]FeedPoll.choices' : 'choices$0',
        '[P]FeedPoll.myChoiceId' : 'myChoiceId$0',
        '[P]FeedPoll.totalVoteCount' : 'totalVoteCount$0'
    },
    'FeedPollChoice' : {
        '[M]FeedPollChoice.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FeedPollChoice.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FeedPollChoice.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FeedPollChoice.toString()\tString' : 'toString()$0',
        '[P]FeedPollChoice.id' : 'id$0',
        '[P]FeedPollChoice.position' : 'position$0',
        '[P]FeedPollChoice.text' : 'text$0',
        '[P]FeedPollChoice.voteCount' : 'voteCount$0',
        '[P]FeedPollChoice.voteCountRatio' : 'voteCountRatio$0'
    },
    'FeedSortOrder' : {
        '[M]FeedSortOrder.values()\tList<ConnectApi.FeedSortOrder>' : 'values()$0',
        '[P]FeedSortOrder.CreatedDateDesc' : 'CreatedDateDesc$0',
        '[P]FeedSortOrder.LastModifiedDateDesc' : 'LastModifiedDateDesc$0'
    },
    'FeedType' : {
        '[M]FeedType.values()\tList<ConnectApi.FeedType>' : 'values()$0',
        '[P]FeedType.Bookmarks' : 'Bookmarks$0',
        '[P]FeedType.Company' : 'Company$0',
        '[P]FeedType.Files' : 'Files$0',
        '[P]FeedType.Groups' : 'Groups$0',
        '[P]FeedType.News' : 'News$0',
        '[P]FeedType.People' : 'People$0',
        '[P]FeedType.Record' : 'Record$0',
        '[P]FeedType.To' : 'To$0',
        '[P]FeedType.Topics' : 'Topics$0',
        '[P]FeedType.UserProfile' : 'UserProfile$0'
    },
    'FieldChangeNameSegment' : {
        '[M]FieldChangeNameSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FieldChangeNameSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FieldChangeNameSegment.toString()\tString' : 'toString()$0'
    },
    'FieldChangeSegment' : {
        '[M]FieldChangeSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FieldChangeSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FieldChangeSegment.toString()\tString' : 'toString()$0'
    },
    'FieldChangeValueSegment' : {
        '[M]FieldChangeValueSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FieldChangeValueSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FieldChangeValueSegment.toString()\tString' : 'toString()$0',
        '[P]FieldChangeValueSegment.url' : 'url$0'
    },
    'FileSummary' : {
        '[M]FileSummary.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FileSummary.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FileSummary.toString()\tString' : 'toString()$0',
        '[P]FileSummary.checksum' : 'checksum$0',
        '[P]FileSummary.contentSize' : 'contentSize$0',
        '[P]FileSummary.contentUrl' : 'contentUrl$0',
        '[P]FileSummary.description' : 'description$0',
        '[P]FileSummary.downloadUrl' : 'downloadUrl$0',
        '[P]FileSummary.fileExtension' : 'fileExtension$0',
        '[P]FileSummary.fileType' : 'fileType$0',
        '[P]FileSummary.flashRenditionStatus' : 'flashRenditionStatus$0',
        '[P]FileSummary.isInMyFileSync' : 'isInMyFileSync$0',
        '[P]FileSummary.mimeType' : 'mimeType$0',
        '[P]FileSummary.modifiedDate' : 'modifiedDate$0',
        '[P]FileSummary.origin' : 'origin$0',
        '[P]FileSummary.owner' : 'owner$0',
        '[P]FileSummary.pdfRenditionStatus' : 'pdfRenditionStatus$0',
        '[P]FileSummary.renditionUrl' : 'renditionUrl$0',
        '[P]FileSummary.thumb120By90RenditionStatus' : 'thumb120By90RenditionStatus$0',
        '[P]FileSummary.thumb240By180RenditionStatus' : 'thumb240By180RenditionStatus$0',
        '[P]FileSummary.thumb720By480RenditionStatus' : 'thumb720By480RenditionStatus$0',
        '[P]FileSummary.title' : 'title$0',
        '[P]FileSummary.versionNumber' : 'versionNumber$0'
    },
    'FinalException' : {
        '[M]FinalException.getCause()\tException' : 'getCause()$0',
        '[M]FinalException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]FinalException.getMessage()\tString' : 'getMessage()$0',
        '[M]FinalException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]FinalException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]FinalException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]FinalException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'FlowException' : {
        '[M]FlowException.getCause()\tException' : 'getCause()$0',
        '[M]FlowException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]FlowException.getMessage()\tString' : 'getMessage()$0',
        '[M]FlowException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]FlowException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]FlowException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]FlowException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'FollowerPage' : {
        '[M]FollowerPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FollowerPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FollowerPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FollowerPage.toString()\tString' : 'toString()$0',
        '[P]FollowerPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]FollowerPage.followers' : 'followers$0',
        '[P]FollowerPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]FollowerPage.previousPageUrl' : 'previousPageUrl$0',
        '[P]FollowerPage.total' : 'total$0'
    },
    'FollowingCounts' : {
        '[M]FollowingCounts.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FollowingCounts.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FollowingCounts.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FollowingCounts.toString()\tString' : 'toString()$0',
        '[P]FollowingCounts.people' : 'people$0',
        '[P]FollowingCounts.records' : 'records$0',
        '[P]FollowingCounts.total' : 'total$0'
    },
    'FollowingPage' : {
        '[M]FollowingPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]FollowingPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]FollowingPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]FollowingPage.toString()\tString' : 'toString()$0',
        '[P]FollowingPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]FollowingPage.following' : 'following$0',
        '[P]FollowingPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]FollowingPage.previousPageUrl' : 'previousPageUrl$0',
        '[P]FollowingPage.total' : 'total$0'
    },
    'GlobalInfluence' : {
        '[M]GlobalInfluence.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GlobalInfluence.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GlobalInfluence.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GlobalInfluence.toString()\tString' : 'toString()$0',
        '[P]GlobalInfluence.percentile' : 'percentile$0',
        '[P]GlobalInfluence.rank' : 'rank$0'
    },
    'GroupChatterSettings' : {
        '[M]GroupChatterSettings.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupChatterSettings.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupChatterSettings.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupChatterSettings.toString()\tString' : 'toString()$0',
        '[P]GroupChatterSettings.emailFrequency' : 'emailFrequency$0'
    },
    'GroupEmailFrequency' : {
        '[M]GroupEmailFrequency.values()\tList<ConnectApi.GroupEmailFrequency>' : 'values()$0',
        '[P]GroupEmailFrequency.DailyDigest' : 'DailyDigest$0',
        '[P]GroupEmailFrequency.EachPost' : 'EachPost$0',
        '[P]GroupEmailFrequency.Never' : 'Never$0',
        '[P]GroupEmailFrequency.UseDefault' : 'UseDefault$0',
        '[P]GroupEmailFrequency.WeeklyDigest' : 'WeeklyDigest$0'
    },
    'GroupInformation' : {
        '[M]GroupInformation.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupInformation.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupInformation.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupInformation.toString()\tString' : 'toString()$0',
        '[P]GroupInformation.text' : 'text$0',
        '[P]GroupInformation.title' : 'title$0'
    },
    'GroupInformationInput' : {
        '[M]GroupInformationInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]GroupInformationInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupInformationInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupInformationInput.toString()\tString' : 'toString()$0',
        '[P]GroupInformationInput.text' : 'text$0',
        '[P]GroupInformationInput.title' : 'title$0'
    },
    'GroupMember' : {
        '[M]GroupMember.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupMember.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupMember.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupMember.toString()\tString' : 'toString()$0',
        '[P]GroupMember.id' : 'id$0',
        '[P]GroupMember.role' : 'role$0',
        '[P]GroupMember.url' : 'url$0',
        '[P]GroupMember.user' : 'user$0'
    },
    'GroupMemberPage' : {
        '[M]GroupMemberPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupMemberPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupMemberPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupMemberPage.toString()\tString' : 'toString()$0',
        '[P]GroupMemberPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]GroupMemberPage.members' : 'members$0',
        '[P]GroupMemberPage.myMembership' : 'myMembership$0',
        '[P]GroupMemberPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]GroupMemberPage.previousPageUrl' : 'previousPageUrl$0',
        '[P]GroupMemberPage.totalMemberCount' : 'totalMemberCount$0'
    },
    'GroupMembershipRequest' : {
        '[M]GroupMembershipRequest.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupMembershipRequest.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupMembershipRequest.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupMembershipRequest.toString()\tString' : 'toString()$0',
        '[P]GroupMembershipRequest.createdDate' : 'createdDate$0',
        '[P]GroupMembershipRequest.id' : 'id$0',
        '[P]GroupMembershipRequest.lastUpdateDate' : 'lastUpdateDate$0',
        '[P]GroupMembershipRequest.requestedGroup' : 'requestedGroup$0',
        '[P]GroupMembershipRequest.responseMessage' : 'responseMessage$0',
        '[P]GroupMembershipRequest.status' : 'status$0',
        '[P]GroupMembershipRequest.url' : 'url$0',
        '[P]GroupMembershipRequest.user' : 'user$0'
    },
    'GroupMembershipRequestStatus' : {
        '[M]GroupMembershipRequestStatus.values()\tList<ConnectApi.GroupMembershipRequestStatus>' : 'values()$0',
        '[P]GroupMembershipRequestStatus.Accepted' : 'Accepted$0',
        '[P]GroupMembershipRequestStatus.Declined' : 'Declined$0',
        '[P]GroupMembershipRequestStatus.Pending' : 'Pending$0'
    },
    'GroupMembershipRequests' : {
        '[M]GroupMembershipRequests.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]GroupMembershipRequests.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]GroupMembershipRequests.hashCode()\tInteger' : 'hashCode()$0',
        '[M]GroupMembershipRequests.toString()\tString' : 'toString()$0',
        '[P]GroupMembershipRequests.requests' : 'requests$0',
        '[P]GroupMembershipRequests.total' : 'total$0'
    },
    'GroupMembershipType' : {
        '[M]GroupMembershipType.values()\tList<ConnectApi.GroupMembershipType>' : 'values()$0',
        '[P]GroupMembershipType.GroupManager' : 'GroupManager$0',
        '[P]GroupMembershipType.GroupOwner' : 'GroupOwner$0',
        '[P]GroupMembershipType.NotAMember' : 'NotAMember$0',
        '[P]GroupMembershipType.NotAMemberPrivateRequested' : 'NotAMemberPrivateRequested$0',
        '[P]GroupMembershipType.StandardMember' : 'StandardMember$0'
    },
    'GroupVisibilityType' : {
        '[M]GroupVisibilityType.values()\tList<ConnectApi.GroupVisibilityType>' : 'values()$0',
        '[P]GroupVisibilityType.PrivateAccess' : 'PrivateAccess$0',
        '[P]GroupVisibilityType.PublicAccess' : 'PublicAccess$0'
    },
    'HandledException' : {
        '[M]HandledException.getCause()\tException' : 'getCause()$0',
        '[M]HandledException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]HandledException.getMessage()\tString' : 'getMessage()$0',
        '[M]HandledException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]HandledException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]HandledException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]HandledException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'HashtagSegment' : {
        '[M]HashtagSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]HashtagSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]HashtagSegment.toString()\tString' : 'toString()$0',
        '[P]HashtagSegment.tag' : 'tag$0',
        '[P]HashtagSegment.topicUrl' : 'topicUrl$0',
        '[P]HashtagSegment.url' : 'url$0'
    },
    'HashtagSegmentInput' : {
        '[M]HashtagSegmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]HashtagSegmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]HashtagSegmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]HashtagSegmentInput.toString()\tString' : 'toString()$0',
        '[P]HashtagSegmentInput.tag' : 'tag$0'
    },
    'Header' : {
        '[P]Header.name' : 'name$0',
        '[P]Header.value' : 'value$0'
    },
    'Http' : {
        '[M]Http.send(ANY request)\tSystem.HttpResponse' : 'send($0)',
        '[M]Http.toString()\tString' : 'toString()$0'
    },
    'HttpCalloutMock' : {
        '[M]HttpCalloutMock.respond(System.HttpRequest param1)\tSystem.HttpResponse' : 'respond($0)'
    },
    'HttpRequest' : {
        '[M]HttpRequest.getBody()\tString' : 'getBody()$0',
        '[M]HttpRequest.getBodyAsBlob()\tBlob' : 'getBodyAsBlob()$0',
        '[M]HttpRequest.getBodyDocument()\tdom.Document' : 'getBodyDocument()$0',
        '[M]HttpRequest.getCompressed()\tBoolean' : 'getCompressed()$0',
        '[M]HttpRequest.getEndpoint()\tString' : 'getEndpoint()$0',
        '[M]HttpRequest.getHeader(String key)\tString' : 'getHeader($0)',
        '[M]HttpRequest.getMethod()\tString' : 'getMethod()$0',
        '[M]HttpRequest.setBody(String body)\tvoid' : 'setBody($0)',
        '[M]HttpRequest.setBodyAsBlob(Blob body)\tvoid' : 'setBodyAsBlob($0)',
        '[M]HttpRequest.setBodyDocument(ANY body)\tvoid' : 'setBodyDocument($0)',
        '[M]HttpRequest.setClientCertificate(String clientCert, String password)\tvoid' : 'setClientCertificate($0)',
        '[M]HttpRequest.setClientCertificateName(String certDevName)\tvoid' : 'setClientCertificateName($0)',
        '[M]HttpRequest.setCompressed(Boolean compressed)\tvoid' : 'setCompressed($0)',
        '[M]HttpRequest.setEndpoint(String endpoint)\tvoid' : 'setEndpoint($0)',
        '[M]HttpRequest.setHeader(String key, String value)\tvoid' : 'setHeader($0)',
        '[M]HttpRequest.setMethod(String method)\tvoid' : 'setMethod($0)',
        '[M]HttpRequest.setTimeout(Integer timeout)\tvoid' : 'setTimeout($0)',
        '[M]HttpRequest.toString()\tString' : 'toString()$0'
    },
    'HttpResponse' : {
        '[M]HttpResponse.getBody()\tString' : 'getBody()$0',
        '[M]HttpResponse.getBodyAsBlob()\tBlob' : 'getBodyAsBlob()$0',
        '[M]HttpResponse.getBodyDocument()\tdom.Document' : 'getBodyDocument()$0',
        '[M]HttpResponse.getHeader(String key)\tString' : 'getHeader($0)',
        '[M]HttpResponse.getHeaderKeys()\tList<String>' : 'getHeaderKeys()$0',
        '[M]HttpResponse.getStatus()\tString' : 'getStatus()$0',
        '[M]HttpResponse.getStatusCode()\tInteger' : 'getStatusCode()$0',
        '[M]HttpResponse.getXmlStreamReader()\tSystem.XmlStreamReader' : 'getXmlStreamReader()$0',
        '[M]HttpResponse.setBody(String body)\tvoid' : 'setBody($0)',
        '[M]HttpResponse.setBodyAsBlob(Blob body)\tvoid' : 'setBodyAsBlob($0)',
        '[M]HttpResponse.setHeader(String key, String value)\tvoid' : 'setHeader($0)',
        '[M]HttpResponse.setStatus(String status)\tvoid' : 'setStatus($0)',
        '[M]HttpResponse.setStatusCode(Integer statusCode)\tvoid' : 'setStatusCode($0)',
        '[M]HttpResponse.toString()\tString' : 'toString()$0'
    },
    'Icon' : {
        '[M]Icon.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Icon.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Icon.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Icon.toString()\tString' : 'toString()$0',
        '[P]Icon.height' : 'height$0',
        '[P]Icon.url' : 'url$0',
        '[P]Icon.width' : 'width$0'
    },
    'Id' : {
        '[M]Id.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Id.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Id.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Id.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Id.getSobjectType()\tSchema.SObjectType' : 'getSobjectType()$0',
        '[M]Id.valueOf(String str)\tId' : 'valueOf($0)'
    },
    'IdeaStandardController' : {
        '[M]IdeaStandardController.addFields(List<String> fieldNames)\tvoid' : 'addFields($0)',
        '[M]IdeaStandardController.cancel()\tSystem.PageReference' : 'cancel()$0',
        '[M]IdeaStandardController.delete()\tSystem.PageReference' : 'delete()$0',
        '[M]IdeaStandardController.edit()\tSystem.PageReference' : 'edit()$0',
        '[M]IdeaStandardController.getCommentList()\tList<IdeaComment>' : 'getCommentList()$0',
        '[M]IdeaStandardController.getId()\tString' : 'getId()$0',
        '[M]IdeaStandardController.getRecord()\tSObject' : 'getRecord()$0',
        '[M]IdeaStandardController.getSubject()\tSObject' : 'getSubject()$0',
        '[M]IdeaStandardController.reset()\tvoid' : 'reset()$0',
        '[M]IdeaStandardController.save()\tSystem.PageReference' : 'save()$0',
        '[M]IdeaStandardController.view()\tSystem.PageReference' : 'view()$0'
    },
    'IdeaStandardSetController' : {
        '[M]IdeaStandardSetController.addFields(List<String> fieldNames)\tvoid' : 'addFields($0)',
        '[M]IdeaStandardSetController.cancel()\tSystem.PageReference' : 'cancel()$0',
        '[M]IdeaStandardSetController.first()\tvoid' : 'first()$0',
        '[M]IdeaStandardSetController.getCompleteResult()\tBoolean' : 'getCompleteResult()$0',
        '[M]IdeaStandardSetController.getFilterId()\tString' : 'getFilterId()$0',
        '[M]IdeaStandardSetController.getHasNext()\tBoolean' : 'getHasNext()$0',
        '[M]IdeaStandardSetController.getHasPrevious()\tBoolean' : 'getHasPrevious()$0',
        '[M]IdeaStandardSetController.getIdeaList()\tList<Idea>' : 'getIdeaList()$0',
        '[M]IdeaStandardSetController.getListViewOptions()\tList<System.SelectOption>' : 'getListViewOptions()$0',
        '[M]IdeaStandardSetController.getPageNumber()\tInteger' : 'getPageNumber()$0',
        '[M]IdeaStandardSetController.getPageSize()\tInteger' : 'getPageSize()$0',
        '[M]IdeaStandardSetController.getRecord()\tSObject' : 'getRecord()$0',
        '[M]IdeaStandardSetController.getRecords()\tList<SObject>' : 'getRecords()$0',
        '[M]IdeaStandardSetController.getResultSize()\tInteger' : 'getResultSize()$0',
        '[M]IdeaStandardSetController.getSelected()\tList<SObject>' : 'getSelected()$0',
        '[M]IdeaStandardSetController.last()\tvoid' : 'last()$0',
        '[M]IdeaStandardSetController.next()\tvoid' : 'next()$0',
        '[M]IdeaStandardSetController.previous()\tvoid' : 'previous()$0',
        '[M]IdeaStandardSetController.reset()\tvoid' : 'reset()$0',
        '[M]IdeaStandardSetController.save()\tSystem.PageReference' : 'save()$0',
        '[M]IdeaStandardSetController.setFilterId(String filterId)\tvoid' : 'setFilterId($0)',
        '[M]IdeaStandardSetController.setPageNumber(Integer pageNumber)\tvoid' : 'setPageNumber($0)',
        '[M]IdeaStandardSetController.setPageSize(Integer pageSize)\tvoid' : 'setPageSize($0)',
        '[M]IdeaStandardSetController.setSelected(List<SObject> selected)\tvoid' : 'setSelected($0)'
    },
    'Ideas' : {
        '[M]Ideas.findSimilar(SObject idea)\tList<Id>' : 'findSimilar($0)',
        '[M]Ideas.getAllRecentReplies(String userId, String communityId)\tList<Id>' : 'getAllRecentReplies($0)',
        '[M]Ideas.getReadRecentReplies(String userId, String communityId)\tList<Id>' : 'getReadRecentReplies($0)',
        '[M]Ideas.getUnreadRecentReplies(String userId, String communityId)\tList<Id>' : 'getUnreadRecentReplies($0)',
        '[M]Ideas.markRead(String ideaId)\tvoid' : 'markRead($0)'
    },
    'InboundEmail' : {
        '[P]InboundEmail.binaryAttachments' : 'binaryAttachments$0',
        '[P]InboundEmail.ccAddresses' : 'ccAddresses$0',
        '[P]InboundEmail.fromAddress' : 'fromAddress$0',
        '[P]InboundEmail.fromName' : 'fromName$0',
        '[P]InboundEmail.headers' : 'headers$0',
        '[P]InboundEmail.htmlBody' : 'htmlBody$0',
        '[P]InboundEmail.htmlBodyIsTruncated' : 'htmlBodyIsTruncated$0',
        '[P]InboundEmail.inReplyTo' : 'inReplyTo$0',
        '[P]InboundEmail.messageId' : 'messageId$0',
        '[P]InboundEmail.plainTextBody' : 'plainTextBody$0',
        '[P]InboundEmail.plainTextBodyIsTruncated' : 'plainTextBodyIsTruncated$0',
        '[P]InboundEmail.references' : 'references$0',
        '[P]InboundEmail.replyTo' : 'replyTo$0',
        '[P]InboundEmail.subject' : 'subject$0',
        '[P]InboundEmail.textAttachments' : 'textAttachments$0',
        '[P]InboundEmail.toAddresses' : 'toAddresses$0'
    },
    'InboundEmailHandler' : {
        '[M]InboundEmailHandler.handleInboundEmail(Messaging.InboundEmail param1, Messaging.InboundEnvelope param2)\tMessaging.InboundEmailResult' : 'handleInboundEmail($0)'
    },
    'InboundEmailResult' : {
        '[P]InboundEmailResult.message' : 'message$0',
        '[P]InboundEmailResult.success' : 'success$0'
    },
    'InboundEnvelope' : {
        '[P]InboundEnvelope.fromAddress' : 'fromAddress$0',
        '[P]InboundEnvelope.toAddress' : 'toAddress$0'
    },
    'InputParameter' : {
        '[P]InputParameter.description' : 'description$0',
        '[P]InputParameter.name' : 'name$0',
        '[P]InputParameter.parameterType' : 'parameterType$0',
        '[P]InputParameter.required' : 'required$0'
    },
    'Integer' : {
        '[M]Integer.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Integer.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Integer.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Integer.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Integer.format()\tString' : 'format()$0',
        '[M]Integer.valueOf(Object o)\tInteger' : 'valueOf($0)',
        '[M]Integer.valueOf(String i)\tInteger' : 'valueOf($0)'
    },
    'Interview' : {
        '[M]Interview.getVariableValue(String param1)\tObject' : 'getVariableValue($0)'
    },
    'InvalidHeaderException' : {
        '[M]InvalidHeaderException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'InvalidParameterValueException' : {
        '[M]InvalidParameterValueException.getCause()\tException' : 'getCause()$0',
        '[M]InvalidParameterValueException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]InvalidParameterValueException.getMessage()\tString' : 'getMessage()$0',
        '[M]InvalidParameterValueException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]InvalidParameterValueException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]InvalidParameterValueException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]InvalidParameterValueException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'InvalidReadOnlyUserDmlException' : {
        '[M]InvalidReadOnlyUserDmlException.getCause()\tException' : 'getCause()$0',
        '[M]InvalidReadOnlyUserDmlException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]InvalidReadOnlyUserDmlException.getMessage()\tString' : 'getMessage()$0',
        '[M]InvalidReadOnlyUserDmlException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]InvalidReadOnlyUserDmlException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]InvalidReadOnlyUserDmlException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]InvalidReadOnlyUserDmlException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Iterable' : {
        '[M]Iterable.iterator()\tsystem.Iterator' : 'iterator()$0'
    },
    'Iterator' : {
        '[M]Iterator.hasNext()\tBoolean' : 'hasNext()$0',
        '[M]Iterator.next()\tObject' : 'next()$0'
    },
    'JSON' : {
        '[M]JSON.createGenerator(Boolean pretty)\tsystem.JSONGenerator' : 'createGenerator($0)',
        '[M]JSON.createParser(String jsonString)\tsystem.JSONParser' : 'createParser($0)',
        '[M]JSON.deserialize(String jsonString, system.Type apexType)\tObject' : 'deserialize($0)',
        '[M]JSON.deserializeStrict(String jsonString, system.Type apexType)\tObject' : 'deserializeStrict($0)',
        '[M]JSON.deserializeUntyped(String jsonString)\tObject' : 'deserializeUntyped($0)',
        '[M]JSON.serialize(Object o)\tString' : 'serialize($0)',
        '[M]JSON.serializePretty(Object o)\tString' : 'serializePretty($0)'
    },
    'JSONException' : {
        '[M]JSONException.getCause()\tException' : 'getCause()$0',
        '[M]JSONException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]JSONException.getMessage()\tString' : 'getMessage()$0',
        '[M]JSONException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]JSONException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]JSONException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]JSONException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'JSONGenerator' : {
        '[M]JSONGenerator.close()\tvoid' : 'close()$0',
        '[M]JSONGenerator.getAsString()\tString' : 'getAsString()$0',
        '[M]JSONGenerator.isClosed()\tBoolean' : 'isClosed()$0',
        '[M]JSONGenerator.writeBlob(Blob b)\tvoid' : 'writeBlob($0)',
        '[M]JSONGenerator.writeBlobField(String fieldName, Blob b)\tvoid' : 'writeBlobField($0)',
        '[M]JSONGenerator.writeBoolean(Boolean b)\tvoid' : 'writeBoolean($0)',
        '[M]JSONGenerator.writeBooleanField(String fieldName, Boolean b)\tvoid' : 'writeBooleanField($0)',
        '[M]JSONGenerator.writeDate(Date d)\tvoid' : 'writeDate($0)',
        '[M]JSONGenerator.writeDateField(String fieldName, Date d)\tvoid' : 'writeDateField($0)',
        '[M]JSONGenerator.writeDateTime(Datetime dt)\tvoid' : 'writeDateTime($0)',
        '[M]JSONGenerator.writeDateTimeField(String fieldName, Datetime dt)\tvoid' : 'writeDateTimeField($0)',
        '[M]JSONGenerator.writeEndArray()\tvoid' : 'writeEndArray()$0',
        '[M]JSONGenerator.writeEndObject()\tvoid' : 'writeEndObject()$0',
        '[M]JSONGenerator.writeFieldName(String fieldName)\tvoid' : 'writeFieldName($0)',
        '[M]JSONGenerator.writeId(Id id)\tvoid' : 'writeId($0)',
        '[M]JSONGenerator.writeIdField(String fieldName, Id id)\tvoid' : 'writeIdField($0)',
        '[M]JSONGenerator.writeNull()\tvoid' : 'writeNull()$0',
        '[M]JSONGenerator.writeNullField(String fieldName)\tvoid' : 'writeNullField($0)',
        '[M]JSONGenerator.writeNumber(Decimal d)\tvoid' : 'writeNumber($0)',
        '[M]JSONGenerator.writeNumber(Double d)\tvoid' : 'writeNumber($0)',
        '[M]JSONGenerator.writeNumber(Integer i)\tvoid' : 'writeNumber($0)',
        '[M]JSONGenerator.writeNumber(Long lng)\tvoid' : 'writeNumber($0)',
        '[M]JSONGenerator.writeNumberField(String fieldName, Decimal d)\tvoid' : 'writeNumberField($0)',
        '[M]JSONGenerator.writeNumberField(String fieldName, Double d)\tvoid' : 'writeNumberField($0)',
        '[M]JSONGenerator.writeNumberField(String fieldName, Integer i)\tvoid' : 'writeNumberField($0)',
        '[M]JSONGenerator.writeNumberField(String fieldName, Long lng)\tvoid' : 'writeNumberField($0)',
        '[M]JSONGenerator.writeObject(Object o)\tvoid' : 'writeObject($0)',
        '[M]JSONGenerator.writeObjectField(String fieldName, Object o)\tvoid' : 'writeObjectField($0)',
        '[M]JSONGenerator.writeStartArray()\tvoid' : 'writeStartArray()$0',
        '[M]JSONGenerator.writeStartObject()\tvoid' : 'writeStartObject()$0',
        '[M]JSONGenerator.writeString(String str)\tvoid' : 'writeString($0)',
        '[M]JSONGenerator.writeStringField(String fieldName, String str)\tvoid' : 'writeStringField($0)',
        '[M]JSONGenerator.writeTime(Time t)\tvoid' : 'writeTime($0)',
        '[M]JSONGenerator.writeTimeField(String fieldName, Time t)\tvoid' : 'writeTimeField($0)'
    },
    'JSONParser' : {
        '[M]JSONParser.clearCurrentToken()\tvoid' : 'clearCurrentToken()$0',
        '[M]JSONParser.getBlobValue()\tBlob' : 'getBlobValue()$0',
        '[M]JSONParser.getBooleanValue()\tBoolean' : 'getBooleanValue()$0',
        '[M]JSONParser.getCurrentName()\tString' : 'getCurrentName()$0',
        '[M]JSONParser.getCurrentToken()\tsystem.JSONToken' : 'getCurrentToken()$0',
        '[M]JSONParser.getDateTimeValue()\tDatetime' : 'getDateTimeValue()$0',
        '[M]JSONParser.getDateValue()\tDate' : 'getDateValue()$0',
        '[M]JSONParser.getDecimalValue()\tDecimal' : 'getDecimalValue()$0',
        '[M]JSONParser.getDoubleValue()\tDouble' : 'getDoubleValue()$0',
        '[M]JSONParser.getIdValue()\tId' : 'getIdValue()$0',
        '[M]JSONParser.getIntegerValue()\tInteger' : 'getIntegerValue()$0',
        '[M]JSONParser.getLastClearedToken()\tsystem.JSONToken' : 'getLastClearedToken()$0',
        '[M]JSONParser.getLongValue()\tLong' : 'getLongValue()$0',
        '[M]JSONParser.getText()\tString' : 'getText()$0',
        '[M]JSONParser.getTimeValue()\tTime' : 'getTimeValue()$0',
        '[M]JSONParser.hasCurrentToken()\tBoolean' : 'hasCurrentToken()$0',
        '[M]JSONParser.nextToken()\tsystem.JSONToken' : 'nextToken()$0',
        '[M]JSONParser.nextValue()\tsystem.JSONToken' : 'nextValue()$0',
        '[M]JSONParser.readValueAs(system.Type apexType)\tObject' : 'readValueAs($0)',
        '[M]JSONParser.readValueAsStrict(system.Type apexType)\tObject' : 'readValueAsStrict($0)',
        '[M]JSONParser.skipChildren()\tvoid' : 'skipChildren()$0'
    },
    'JSONToken' : {
        '[M]JSONToken.values()\tList<system.JSONToken>' : 'values()$0',
        '[P]JSONToken.END_ARRAY' : 'END_ARRAY$0',
        '[P]JSONToken.END_OBJECT' : 'END_OBJECT$0',
        '[P]JSONToken.FIELD_NAME' : 'FIELD_NAME$0',
        '[P]JSONToken.NOT_AVAILABLE' : 'NOT_AVAILABLE$0',
        '[P]JSONToken.START_ARRAY' : 'START_ARRAY$0',
        '[P]JSONToken.START_OBJECT' : 'START_OBJECT$0',
        '[P]JSONToken.VALUE_EMBEDDED_OBJECT' : 'VALUE_EMBEDDED_OBJECT$0',
        '[P]JSONToken.VALUE_FALSE' : 'VALUE_FALSE$0',
        '[P]JSONToken.VALUE_NULL' : 'VALUE_NULL$0',
        '[P]JSONToken.VALUE_NUMBER_FLOAT' : 'VALUE_NUMBER_FLOAT$0',
        '[P]JSONToken.VALUE_NUMBER_INT' : 'VALUE_NUMBER_INT$0',
        '[P]JSONToken.VALUE_STRING' : 'VALUE_STRING$0',
        '[P]JSONToken.VALUE_TRUE' : 'VALUE_TRUE$0'
    },
    'KnowledgeArticleVersionStandardController' : {
        '[M]KnowledgeArticleVersionStandardController.addFields(List<String> fieldNames)\tvoid' : 'addFields($0)',
        '[M]KnowledgeArticleVersionStandardController.cancel()\tSystem.PageReference' : 'cancel()$0',
        '[M]KnowledgeArticleVersionStandardController.delete()\tSystem.PageReference' : 'delete()$0',
        '[M]KnowledgeArticleVersionStandardController.edit()\tSystem.PageReference' : 'edit()$0',
        '[M]KnowledgeArticleVersionStandardController.getId()\tString' : 'getId()$0',
        '[M]KnowledgeArticleVersionStandardController.getRecord()\tSObject' : 'getRecord()$0',
        '[M]KnowledgeArticleVersionStandardController.getSourceId()\tString' : 'getSourceId()$0',
        '[M]KnowledgeArticleVersionStandardController.getSubject()\tSObject' : 'getSubject()$0',
        '[M]KnowledgeArticleVersionStandardController.reset()\tvoid' : 'reset()$0',
        '[M]KnowledgeArticleVersionStandardController.save()\tSystem.PageReference' : 'save()$0',
        '[M]KnowledgeArticleVersionStandardController.selectDataCategory(String categoryGroup, String category)\tvoid' : 'selectDataCategory($0)',
        '[M]KnowledgeArticleVersionStandardController.view()\tSystem.PageReference' : 'view()$0'
    },
    'List' : {
        '[M]List.add(ANY element)\tObject' : 'add($0)',
        '[M]List.add(Integer index, ANY element)\tvoid' : 'add($0)',
        '[M]List.addAll(List elements)\tvoid' : 'addAll($0)',
        '[M]List.addAll(SET elements)\tvoid' : 'addAll($0)',
        '[M]List.clear()\tvoid' : 'clear()$0',
        '[M]List.clone()\tList<String>' : 'clone()$0',
        '[M]List.deepClone()\tList<String>' : 'deepClone()$0',
        '[M]List.deepClone(Boolean preserveId)\tList<String>' : 'deepClone($0)',
        '[M]List.deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps)\tList<String>' : 'deepClone($0)',
        '[M]List.deepClone(Boolean preserveId, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tList<String>' : 'deepClone($0)',
        '[M]List.get(Integer index)\tObject' : 'get($0)',
        '[M]List.getSObjectType()\tSchema.SObjectType' : 'getSObjectType()$0',
        '[M]List.isEmpty()\tBoolean' : 'isEmpty()$0',
        '[M]List.iterator()\tsystem.ListIterator' : 'iterator()$0',
        '[M]List.remove(Integer index)\tObject' : 'remove($0)',
        '[M]List.set(Integer index, ANY value)\tvoid' : 'set($0)',
        '[M]List.size()\tInteger' : 'size()$0',
        '[M]List.sort()\tvoid' : 'sort()$0'
    },
    'LeadConvert' : {},
    'LicenseException' : {
        '[M]LicenseException.getCause()\tException' : 'getCause()$0',
        '[M]LicenseException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]LicenseException.getMessage()\tString' : 'getMessage()$0',
        '[M]LicenseException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]LicenseException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]LicenseException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]LicenseException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'LimitException' : {
        '[M]LimitException.getCause()\tException' : 'getCause()$0',
        '[M]LimitException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]LimitException.getMessage()\tString' : 'getMessage()$0',
        '[M]LimitException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]LimitException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]LimitException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]LimitException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'LinkAttachment' : {
        '[M]LinkAttachment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]LinkAttachment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]LinkAttachment.toString()\tString' : 'toString()$0',
        '[P]LinkAttachment.title' : 'title$0',
        '[P]LinkAttachment.url' : 'url$0'
    },
    'LinkAttachmentInput' : {
        '[M]LinkAttachmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]LinkAttachmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]LinkAttachmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]LinkAttachmentInput.toString()\tString' : 'toString()$0',
        '[P]LinkAttachmentInput.url' : 'url$0',
        '[P]LinkAttachmentInput.urlName' : 'urlName$0'
    },
    'LinkSegment' : {
        '[M]LinkSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]LinkSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]LinkSegment.toString()\tString' : 'toString()$0',
        '[P]LinkSegment.url' : 'url$0'
    },
    'LinkSegmentInput' : {
        '[M]LinkSegmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]LinkSegmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]LinkSegmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]LinkSegmentInput.toString()\tString' : 'toString()$0',
        '[P]LinkSegmentInput.url' : 'url$0'
    },
    'ListException' : {
        '[M]ListException.getCause()\tException' : 'getCause()$0',
        '[M]ListException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]ListException.getMessage()\tString' : 'getMessage()$0',
        '[M]ListException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]ListException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]ListException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]ListException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'LoggingLevel' : {
        '[M]LoggingLevel.values()\tList<system.LoggingLevel>' : 'values()$0',
        '[P]LoggingLevel.DEBUG' : 'DEBUG$0',
        '[P]LoggingLevel.ERROR' : 'ERROR$0',
        '[P]LoggingLevel.FINE' : 'FINE$0',
        '[P]LoggingLevel.FINER' : 'FINER$0',
        '[P]LoggingLevel.FINEST' : 'FINEST$0',
        '[P]LoggingLevel.INFO' : 'INFO$0',
        '[P]LoggingLevel.INTERNAL' : 'INTERNAL$0',
        '[P]LoggingLevel.WARN' : 'WARN$0'
    },
    'Long' : {
        '[M]Long.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Long.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Long.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Long.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Long.format()\tString' : 'format()$0',
        '[M]Long.intValue()\tInteger' : 'intValue()$0',
        '[M]Long.valueOf(String str)\tLong' : 'valueOf($0)'
    },
    'Map' : {
        '[M]Map.clear()\tvoid' : 'clear()$0',
        '[M]Map.clone()\tMAP<String,String>' : 'clone()$0',
        '[M]Map.containsKey(ANY key)\tBoolean' : 'containsKey($0)',
        '[M]Map.deepClone()\tMAP<String,String>' : 'deepClone()$0',
        '[M]Map.get(ANY key)\tString' : 'get($0)',
        '[M]Map.getSObjectType()\tSchema.SObjectType' : 'getSObjectType()$0',
        '[M]Map.isEmpty()\tBoolean' : 'isEmpty()$0',
        '[M]Map.keySet()\tSET<String>' : 'keySet()$0',
        '[M]Map.put(ANY key, ANY value)\tString' : 'put($0)',
        '[M]Map.putAll(List entries)\tvoid' : 'putAll($0)',
        '[M]Map.putAll(MAP entries)\tvoid' : 'putAll($0)',
        '[M]Map.remove(ANY key)\tString' : 'remove($0)',
        '[M]Map.size()\tInteger' : 'size()$0',
        '[M]Map.values()\tList<String>' : 'values()$0'
    },
    'MassEmailMessage' : {},
    'Matcher' : {
        '[M]Matcher.end()\tInteger' : 'end()$0',
        '[M]Matcher.end(Integer grp)\tInteger' : 'end($0)',
        '[M]Matcher.find()\tBoolean' : 'find()$0',
        '[M]Matcher.find(Integer start)\tBoolean' : 'find($0)',
        '[M]Matcher.group()\tString' : 'group()$0',
        '[M]Matcher.group(Integer start)\tString' : 'group($0)',
        '[M]Matcher.groupCount()\tInteger' : 'groupCount()$0',
        '[M]Matcher.hasAnchoringBounds()\tBoolean' : 'hasAnchoringBounds()$0',
        '[M]Matcher.hasTransparentBounds()\tBoolean' : 'hasTransparentBounds()$0',
        '[M]Matcher.hitEnd()\tBoolean' : 'hitEnd()$0',
        '[M]Matcher.lookingAt()\tBoolean' : 'lookingAt()$0',
        '[M]Matcher.matches()\tBoolean' : 'matches()$0',
        '[M]Matcher.pattern()\tsystem.Pattern' : 'pattern()$0',
        '[M]Matcher.quoteReplacement(String s)\tString' : 'quoteReplacement($0)',
        '[M]Matcher.region(Integer start, Integer ending)\tsystem.Matcher' : 'region($0)',
        '[M]Matcher.regionEnd()\tInteger' : 'regionEnd()$0',
        '[M]Matcher.regionStart()\tInteger' : 'regionStart()$0',
        '[M]Matcher.replaceAll(String replacement)\tString' : 'replaceAll($0)',
        '[M]Matcher.replaceFirst(String replacement)\tString' : 'replaceFirst($0)',
        '[M]Matcher.requireEnd()\tBoolean' : 'requireEnd()$0',
        '[M]Matcher.reset()\tsystem.Matcher' : 'reset()$0',
        '[M]Matcher.reset(String input)\tsystem.Matcher' : 'reset($0)',
        '[M]Matcher.start()\tInteger' : 'start()$0',
        '[M]Matcher.start(Integer grp)\tInteger' : 'start($0)',
        '[M]Matcher.useAnchoringBounds(Boolean b)\tsystem.Matcher' : 'useAnchoringBounds($0)',
        '[M]Matcher.usePattern(system.Pattern p)\tsystem.Matcher' : 'usePattern($0)',
        '[M]Matcher.useTransparentBounds(Boolean b)\tsystem.Matcher' : 'useTransparentBounds($0)'
    },
    'Math' : {
        '[M]Math.abs(Decimal x)\tDecimal' : 'abs($0)',
        '[M]Math.abs(Double x)\tDouble' : 'abs($0)',
        '[M]Math.abs(Integer x)\tInteger' : 'abs($0)',
        '[M]Math.abs(Long x)\tLong' : 'abs($0)',
        '[M]Math.acos(Decimal x)\tDecimal' : 'acos($0)',
        '[M]Math.acos(Double x)\tDouble' : 'acos($0)',
        '[M]Math.asin(Decimal x)\tDecimal' : 'asin($0)',
        '[M]Math.asin(Double x)\tDouble' : 'asin($0)',
        '[M]Math.atan(Decimal x)\tDecimal' : 'atan($0)',
        '[M]Math.atan(Double x)\tDouble' : 'atan($0)',
        '[M]Math.atan2(Decimal x, Decimal y)\tDecimal' : 'atan2($0)',
        '[M]Math.atan2(Double x, Double y)\tDouble' : 'atan2($0)',
        '[M]Math.cbrt(Decimal x)\tDecimal' : 'cbrt($0)',
        '[M]Math.cbrt(Double x)\tDouble' : 'cbrt($0)',
        '[M]Math.ceil(Decimal x)\tDecimal' : 'ceil($0)',
        '[M]Math.ceil(Double x)\tDouble' : 'ceil($0)',
        '[M]Math.cos(Decimal x)\tDecimal' : 'cos($0)',
        '[M]Math.cos(Double x)\tDouble' : 'cos($0)',
        '[M]Math.cosh(Decimal x)\tDecimal' : 'cosh($0)',
        '[M]Math.cosh(Double x)\tDouble' : 'cosh($0)',
        '[M]Math.exp(Decimal x)\tDecimal' : 'exp($0)',
        '[M]Math.exp(Double x)\tDouble' : 'exp($0)',
        '[M]Math.floor(Decimal x)\tDecimal' : 'floor($0)',
        '[M]Math.floor(Double x)\tDouble' : 'floor($0)',
        '[M]Math.log(Decimal x)\tDecimal' : 'log($0)',
        '[M]Math.log(Double x)\tDouble' : 'log($0)',
        '[M]Math.log10(Decimal x)\tDecimal' : 'log10($0)',
        '[M]Math.log10(Double x)\tDouble' : 'log10($0)',
        '[M]Math.max(Decimal x, Decimal y)\tDecimal' : 'max($0)',
        '[M]Math.max(Double x, Double y)\tDouble' : 'max($0)',
        '[M]Math.max(Integer x, Integer y)\tInteger' : 'max($0)',
        '[M]Math.max(Long x, Long y)\tLong' : 'max($0)',
        '[M]Math.min(Decimal x, Decimal y)\tDecimal' : 'min($0)',
        '[M]Math.min(Double x, Double y)\tDouble' : 'min($0)',
        '[M]Math.min(Integer x, Integer y)\tInteger' : 'min($0)',
        '[M]Math.min(Long x, Long y)\tLong' : 'min($0)',
        '[M]Math.mod(Integer x, Integer y)\tInteger' : 'mod($0)',
        '[M]Math.mod(Long x, Long y)\tLong' : 'mod($0)',
        '[M]Math.pow(Double base, Double exp)\tDouble' : 'pow($0)',
        '[M]Math.random()\tDouble' : 'random()$0',
        '[M]Math.rint(Decimal x)\tDecimal' : 'rint($0)',
        '[M]Math.rint(Double x)\tDouble' : 'rint($0)',
        '[M]Math.round(Decimal x)\tInteger' : 'round($0)',
        '[M]Math.round(Double x)\tInteger' : 'round($0)',
        '[M]Math.roundToLong(Decimal x)\tLong' : 'roundToLong($0)',
        '[M]Math.roundToLong(Double x)\tLong' : 'roundToLong($0)',
        '[M]Math.signum(Decimal x)\tDecimal' : 'signum($0)',
        '[M]Math.signum(Double x)\tDouble' : 'signum($0)',
        '[M]Math.sin(Decimal x)\tDecimal' : 'sin($0)',
        '[M]Math.sin(Double x)\tDouble' : 'sin($0)',
        '[M]Math.sinh(Decimal x)\tDecimal' : 'sinh($0)',
        '[M]Math.sinh(Double x)\tDouble' : 'sinh($0)',
        '[M]Math.sqrt(Decimal x)\tDecimal' : 'sqrt($0)',
        '[M]Math.sqrt(Double x)\tDouble' : 'sqrt($0)',
        '[M]Math.tan(Decimal x)\tDecimal' : 'tan($0)',
        '[M]Math.tan(Double x)\tDouble' : 'tan($0)',
        '[M]Math.tanh(Decimal x)\tDecimal' : 'tanh($0)',
        '[M]Math.tanh(Double x)\tDouble' : 'tanh($0)'
    },
    'MathException' : {
        '[M]MathException.getCause()\tException' : 'getCause()$0',
        '[M]MathException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]MathException.getMessage()\tString' : 'getMessage()$0',
        '[M]MathException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]MathException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]MathException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]MathException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'MentionSegment' : {
        '[M]MentionSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MentionSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MentionSegment.toString()\tString' : 'toString()$0',
        '[P]MentionSegment.accessible' : 'accessible$0',
        '[P]MentionSegment.name' : 'name$0',
        '[P]MentionSegment.user' : 'user$0'
    },
    'MentionSegmentInput' : {
        '[M]MentionSegmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]MentionSegmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MentionSegmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MentionSegmentInput.toString()\tString' : 'toString()$0',
        '[P]MentionSegmentInput.id' : 'id$0'
    },
    'Message' : {
        '[M]Message.getComponentLabel()\tString' : 'getComponentLabel()$0',
        '[M]Message.getDetail()\tString' : 'getDetail()$0',
        '[M]Message.getSeverity()\tApexPages.Severity' : 'getSeverity()$0',
        '[M]Message.getSummary()\tString' : 'getSummary()$0'
    },
    'MessageBody' : {
        '[M]MessageBody.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MessageBody.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MessageBody.toString()\tString' : 'toString()$0'
    },
    'MessageBodyInput' : {
        '[M]MessageBodyInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]MessageBodyInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MessageBodyInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MessageBodyInput.toString()\tString' : 'toString()$0',
        '[P]MessageBodyInput.messageSegments' : 'messageSegments$0'
    },
    'MessageSegment' : {
        '[M]MessageSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MessageSegment.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]MessageSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MessageSegment.toString()\tString' : 'toString()$0',
        '[P]MessageSegment.text' : 'text$0',
        '[P]MessageSegment.type' : 'type$0'
    },
    'MessageSegmentInput' : {
        '[M]MessageSegmentInput.convertToJavaObject(java:common.api.AppVersion param1)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]MessageSegmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MessageSegmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MessageSegmentInput.toString()\tString' : 'toString()$0'
    },
    'MessageSegmentType' : {
        '[M]MessageSegmentType.values()\tList<ConnectApi.MessageSegmentType>' : 'values()$0',
        '[P]MessageSegmentType.EntityLink' : 'EntityLink$0',
        '[P]MessageSegmentType.FieldChange' : 'FieldChange$0',
        '[P]MessageSegmentType.FieldChangeName' : 'FieldChangeName$0',
        '[P]MessageSegmentType.FieldChangeValue' : 'FieldChangeValue$0',
        '[P]MessageSegmentType.Hashtag' : 'Hashtag$0',
        '[P]MessageSegmentType.Link' : 'Link$0',
        '[P]MessageSegmentType.Mention' : 'Mention$0',
        '[P]MessageSegmentType.MoreChanges' : 'MoreChanges$0',
        '[P]MessageSegmentType.ResourceLink' : 'ResourceLink$0',
        '[P]MessageSegmentType.Text' : 'Text$0'
    },
    'Messaging' : {
        '[M]Messaging.reserveMassEmailCapacity(Integer count)\tvoid' : 'reserveMassEmailCapacity($0)',
        '[M]Messaging.reserveSingleEmailCapacity(Integer count)\tvoid' : 'reserveSingleEmailCapacity($0)',
        '[M]Messaging.sendEmail(List<Messaging.Email> emailMessages)\tList<Messaging.SendEmailResult>' : 'sendEmail($0)',
        '[M]Messaging.sendEmail(List<Messaging.Email> emailMessages, Boolean allOrNothing)\tList<Messaging.SendEmailResult>' : 'sendEmail($0)',
        '[M]Messaging.sendEmailMessage(List<Id> emailMessagesIds)\tList<Messaging.SendEmailResult>' : 'sendEmailMessage($0)',
        '[M]Messaging.sendEmailMessage(List<Id> emailMessagesIds, Boolean allOrNothing)\tList<Messaging.SendEmailResult>' : 'sendEmailMessage($0)'
    },
    'MobilePushNotification' : {
        '[M]MobilePushNotification.send(String application, SET<String> users)\tvoid' : 'send($0)',
        '[M]MobilePushNotification.setPayload(MAP<String,ANY> payload)\tvoid' : 'setPayload($0)',
        '[M]MobilePushNotification.setTtl(Integer ttl)\tvoid' : 'setTtl($0)'
    },
    'MobilePushPayload' : {
        '[M]MobilePushPayload.apple(String alert, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>' : 'apple($0)',
        '[M]MobilePushPayload.apple(String alertBody, String actionLocKey, String locKey, List<String> locArgs, String launchImage, String sound, Integer badgeCount, MAP<String,ANY> userData)\tMAP<String,ANY>' : 'apple($0)'
    },
    'MoreChangesSegment' : {
        '[M]MoreChangesSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]MoreChangesSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]MoreChangesSegment.toString()\tString' : 'toString()$0',
        '[P]MoreChangesSegment.moreChangesCount' : 'moreChangesCount$0'
    },
    'Motif' : {
        '[M]Motif.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Motif.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Motif.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Motif.toString()\tString' : 'toString()$0',
        '[P]Motif.largeIconUrl' : 'largeIconUrl$0',
        '[P]Motif.mediumIconUrl' : 'mediumIconUrl$0',
        '[P]Motif.smallIconUrl' : 'smallIconUrl$0'
    },
    'MultiStaticResourceCalloutMock' : {
        '[M]MultiStaticResourceCalloutMock.respond(System.HttpRequest request)\tSystem.HttpResponse' : 'respond($0)',
        '[M]MultiStaticResourceCalloutMock.setHeader(String key, String val)\tvoid' : 'setHeader($0)',
        '[M]MultiStaticResourceCalloutMock.setStaticResource(String url, String staticResourceName)\tvoid' : 'setStaticResource($0)',
        '[M]MultiStaticResourceCalloutMock.setStatus(String status)\tvoid' : 'setStatus($0)',
        '[M]MultiStaticResourceCalloutMock.setStatusCode(Integer code)\tvoid' : 'setStatusCode($0)'
    },
    'Network' : {
        '[M]Network.communitiesLanding()\tSystem.PageReference' : 'communitiesLanding()$0',
        '[M]Network.forwardToAuthPage(String startUrl)\tSystem.PageReference' : 'forwardToAuthPage($0)',
        '[M]Network.forwardToAuthPage(String startUrl, String displayType)\tSystem.PageReference' : 'forwardToAuthPage($0)',
        '[M]Network.getNetworkId()\tString' : 'getNetworkId()$0'
    },
    'NewFileAttachmentInput' : {
        '[M]NewFileAttachmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]NewFileAttachmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]NewFileAttachmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]NewFileAttachmentInput.toString()\tString' : 'toString()$0',
        '[P]NewFileAttachmentInput.description' : 'description$0',
        '[P]NewFileAttachmentInput.title' : 'title$0'
    },
    'NoAccessException' : {
        '[M]NoAccessException.getCause()\tException' : 'getCause()$0',
        '[M]NoAccessException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]NoAccessException.getMessage()\tString' : 'getMessage()$0',
        '[M]NoAccessException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]NoAccessException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]NoAccessException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]NoAccessException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'NoDataFoundException' : {
        '[M]NoDataFoundException.getCause()\tException' : 'getCause()$0',
        '[M]NoDataFoundException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]NoDataFoundException.getMessage()\tString' : 'getMessage()$0',
        '[M]NoDataFoundException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]NoDataFoundException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]NoDataFoundException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]NoDataFoundException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'NoSuchElementException' : {
        '[M]NoSuchElementException.getCause()\tException' : 'getCause()$0',
        '[M]NoSuchElementException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]NoSuchElementException.getMessage()\tString' : 'getMessage()$0',
        '[M]NoSuchElementException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]NoSuchElementException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]NoSuchElementException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]NoSuchElementException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'NotFoundException' : {
        '[M]NotFoundException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'NullPointerException' : {
        '[M]NullPointerException.getCause()\tException' : 'getCause()$0',
        '[M]NullPointerException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]NullPointerException.getMessage()\tString' : 'getMessage()$0',
        '[M]NullPointerException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]NullPointerException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]NullPointerException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]NullPointerException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Organization' : {
        '[M]Organization.getSettings()\tConnectApi.OrganizationSettings' : 'getSettings()$0'
    },
    'OrganizationSettings' : {
        '[M]OrganizationSettings.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]OrganizationSettings.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]OrganizationSettings.hashCode()\tInteger' : 'hashCode()$0',
        '[M]OrganizationSettings.toString()\tString' : 'toString()$0',
        '[P]OrganizationSettings.accessTimeout' : 'accessTimeout$0',
        '[P]OrganizationSettings.features' : 'features$0',
        '[P]OrganizationSettings.name' : 'name$0',
        '[P]OrganizationSettings.orgId' : 'orgId$0',
        '[P]OrganizationSettings.userSettings' : 'userSettings$0'
    },
    'OutputParameter' : {
        '[P]OutputParameter.description' : 'description$0',
        '[P]OutputParameter.name' : 'name$0',
        '[P]OutputParameter.parameterType' : 'parameterType$0'
    },
    'PageReference' : {
        '[M]PageReference.getAnchor()\tString' : 'getAnchor()$0',
        '[M]PageReference.getContent()\tBlob' : 'getContent()$0',
        '[M]PageReference.getContentAsPDF()\tBlob' : 'getContentAsPDF()$0',
        '[M]PageReference.getCookies()\tMAP<String,System.Cookie>' : 'getCookies()$0',
        '[M]PageReference.getHeaders()\tMAP<String,String>' : 'getHeaders()$0',
        '[M]PageReference.getParameters()\tMAP<String,String>' : 'getParameters()$0',
        '[M]PageReference.getRedirect()\tBoolean' : 'getRedirect()$0',
        '[M]PageReference.getUrl()\tString' : 'getUrl()$0',
        '[M]PageReference.setAnchor(String anchor)\tSystem.PageReference' : 'setAnchor($0)',
        '[M]PageReference.setCookies(List<System.Cookie> cookies)\tvoid' : 'setCookies($0)',
        '[M]PageReference.setRedirect(Boolean redirect)\tSystem.PageReference' : 'setRedirect($0)'
    },
    'ParameterType' : {
        '[M]ParameterType.values()\tList<Process.PluginDescribeResult.ParameterType>' : 'values()$0',
        '[P]ParameterType.BOOLEAN' : 'BOOLEAN$0',
        '[P]ParameterType.DATE' : 'DATE$0',
        '[P]ParameterType.DATETIME' : 'DATETIME$0',
        '[P]ParameterType.DECIMAL' : 'DECIMAL$0',
        '[P]ParameterType.DOUBLE' : 'DOUBLE$0',
        '[P]ParameterType.FLOAT' : 'FLOAT$0',
        '[P]ParameterType.ID' : 'ID$0',
        '[P]ParameterType.INTEGER' : 'INTEGER$0',
        '[P]ParameterType.LONG' : 'LONG$0',
        '[P]ParameterType.STRING' : 'STRING$0'
    },
    'Pattern' : {
        '[M]Pattern.compile(String regex)\tsystem.Pattern' : 'compile($0)',
        '[M]Pattern.matcher(String input)\tsystem.Matcher' : 'matcher($0)',
        '[M]Pattern.matches(String regex, String input)\tBoolean' : 'matches($0)',
        '[M]Pattern.pattern()\tString' : 'pattern()$0',
        '[M]Pattern.quote(String s)\tString' : 'quote($0)',
        '[M]Pattern.split(String input)\tList<String>' : 'split($0)',
        '[M]Pattern.split(String input, Integer n)\tList<String>' : 'split($0)'
    },
    'PhoneNumber' : {
        '[M]PhoneNumber.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]PhoneNumber.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]PhoneNumber.hashCode()\tInteger' : 'hashCode()$0',
        '[M]PhoneNumber.toString()\tString' : 'toString()$0',
        '[P]PhoneNumber.phoneNumber' : 'phoneNumber$0',
        '[P]PhoneNumber.type' : 'type$0'
    },
    'Photo' : {
        '[M]Photo.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Photo.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Photo.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Photo.toString()\tString' : 'toString()$0',
        '[P]Photo.fullEmailPhotoUrl' : 'fullEmailPhotoUrl$0',
        '[P]Photo.largePhotoUrl' : 'largePhotoUrl$0',
        '[P]Photo.photoVersionId' : 'photoVersionId$0',
        '[P]Photo.smallPhotoUrl' : 'smallPhotoUrl$0',
        '[P]Photo.standardEmailPhotoUrl' : 'standardEmailPhotoUrl$0',
        '[P]Photo.url' : 'url$0'
    },
    'Plugin' : {
        '[M]Plugin.describe()\tProcess.PluginDescribeResult' : 'describe()$0',
        '[M]Plugin.invoke(Process.PluginRequest param1)\tProcess.PluginResult' : 'invoke($0)'
    },
    'PluginDescribeResult' : {
        '[P]PluginDescribeResult.description' : 'description$0',
        '[P]PluginDescribeResult.inputParameters' : 'inputParameters$0',
        '[P]PluginDescribeResult.name' : 'name$0',
        '[P]PluginDescribeResult.outputParameters' : 'outputParameters$0',
        '[P]PluginDescribeResult.tag' : 'tag$0'
    },
    'PluginRequest' : {
        '[P]PluginRequest.inputParameters' : 'inputParameters$0'
    },
    'PluginResult' : {
        '[P]PluginResult.outputParameters' : 'outputParameters$0'
    },
    'PollAttachmentInput' : {
        '[M]PollAttachmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]PollAttachmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]PollAttachmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]PollAttachmentInput.toString()\tString' : 'toString()$0',
        '[P]PollAttachmentInput.pollChoices' : 'pollChoices$0'
    },
    'ProcedureException' : {
        '[M]ProcedureException.getCause()\tException' : 'getCause()$0',
        '[M]ProcedureException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]ProcedureException.getMessage()\tString' : 'getMessage()$0',
        '[M]ProcedureException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]ProcedureException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]ProcedureException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]ProcedureException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'PublishingService' : {
        '[M]PublishingService.archiveOnlineArticle(String articleId, Datetime scheduledDate)\tvoid' : 'archiveOnlineArticle($0)',
        '[M]PublishingService.assignDraftArticleTask(String articleId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid' : 'assignDraftArticleTask($0)',
        '[M]PublishingService.assignDraftTranslationTask(String translationVersionId, String assigneeId, String instructions, Datetime dueDate, Boolean sendEmailNotification)\tvoid' : 'assignDraftTranslationTask($0)',
        '[M]PublishingService.cancelScheduledArchivingOfArticle(String articleId)\tvoid' : 'cancelScheduledArchivingOfArticle($0)',
        '[M]PublishingService.cancelScheduledPublicationOfArticle(String articleId)\tvoid' : 'cancelScheduledPublicationOfArticle($0)',
        '[M]PublishingService.completeTranslation(String articleVersionId)\tvoid' : 'completeTranslation($0)',
        '[M]PublishingService.deleteArchivedArticle(String articleId)\tvoid' : 'deleteArchivedArticle($0)',
        '[M]PublishingService.deleteArchivedArticleVersion(String articleId, Integer versionNumber)\tvoid' : 'deleteArchivedArticleVersion($0)',
        '[M]PublishingService.deleteDraftArticle(String articleId)\tvoid' : 'deleteDraftArticle($0)',
        '[M]PublishingService.deleteDraftTranslation(String articleVersionId)\tvoid' : 'deleteDraftTranslation($0)',
        '[M]PublishingService.editArchivedArticle(String articleId)\tString' : 'editArchivedArticle($0)',
        '[M]PublishingService.editOnlineArticle(String articleId, Boolean unpublish)\tString' : 'editOnlineArticle($0)',
        '[M]PublishingService.editPublishedTranslation(String articleId, String language, Boolean unpublish)\tString' : 'editPublishedTranslation($0)',
        '[M]PublishingService.publishArticle(String articleId, Boolean flagAsNew)\tvoid' : 'publishArticle($0)',
        '[M]PublishingService.restoreOldVersion(String articleId, Integer versionNumber)\tString' : 'restoreOldVersion($0)',
        '[M]PublishingService.scheduleForPublication(String articleId, Datetime scheduledDate)\tvoid' : 'scheduleForPublication($0)',
        '[M]PublishingService.setTranslationToIncomplete(String articleVersionId)\tvoid' : 'setTranslationToIncomplete($0)',
        '[M]PublishingService.submitForTranslation(String articleId, String language, String assigneeId, Datetime dueDate)\tString' : 'submitForTranslation($0)'
    },
    'QueryException' : {
        '[M]QueryException.getCause()\tException' : 'getCause()$0',
        '[M]QueryException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]QueryException.getMessage()\tString' : 'getMessage()$0',
        '[M]QueryException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]QueryException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]QueryException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]QueryException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'QueryLocator' : {
        '[M]QueryLocator.getQuery()\tString' : 'getQuery()$0',
        '[M]QueryLocator.iterator()\tDatabase.QueryLocatorIterator' : 'iterator()$0'
    },
    'QueryLocatorChunkIterator' : {
        '[M]QueryLocatorChunkIterator.hasNext()\tBoolean' : 'hasNext()$0',
        '[M]QueryLocatorChunkIterator.next()\tList<SObject>' : 'next()$0'
    },
    'QueryLocatorIterator' : {
        '[M]QueryLocatorIterator.hasNext()\tBoolean' : 'hasNext()$0',
        '[M]QueryLocatorIterator.next()\tSObject' : 'next()$0'
    },
    'RateLimitException' : {
        '[M]RateLimitException.getErrorCode()\tString' : 'getErrorCode()$0',
        '[M]RateLimitException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'RecordSummary' : {
        '[M]RecordSummary.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]RecordSummary.hashCode()\tInteger' : 'hashCode()$0',
        '[M]RecordSummary.toString()\tString' : 'toString()$0'
    },
    'Records' : {
        '[M]Records.getMotif(String communityId, String idOrPrefix)\tConnectApi.Motif' : 'getMotif($0)'
    },
    'Reference' : {
        '[M]Reference.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Reference.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Reference.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Reference.toString()\tString' : 'toString()$0',
        '[P]Reference.id' : 'id$0',
        '[P]Reference.url' : 'url$0'
    },
    'RequiredFeatureMissingException' : {
        '[M]RequiredFeatureMissingException.getCause()\tException' : 'getCause()$0',
        '[M]RequiredFeatureMissingException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]RequiredFeatureMissingException.getMessage()\tString' : 'getMessage()$0',
        '[M]RequiredFeatureMissingException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]RequiredFeatureMissingException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]RequiredFeatureMissingException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]RequiredFeatureMissingException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'ResourceLinkSegment' : {
        '[M]ResourceLinkSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]ResourceLinkSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]ResourceLinkSegment.toString()\tString' : 'toString()$0',
        '[P]ResourceLinkSegment.url' : 'url$0'
    },
    'RestContext' : {
        '[P]RestContext.request' : 'request$0',
        '[P]RestContext.response' : 'response$0'
    },
    'RestRequest' : {
        '[M]RestRequest.addHeader(String name, String value)\tvoid' : 'addHeader($0)',
        '[M]RestRequest.addParameter(String name, String value)\tvoid' : 'addParameter($0)',
        '[P]RestRequest.headers' : 'headers$0',
        '[P]RestRequest.httpMethod' : 'httpMethod$0',
        '[P]RestRequest.params' : 'params$0',
        '[P]RestRequest.remoteAddress' : 'remoteAddress$0',
        '[P]RestRequest.requestBody' : 'requestBody$0',
        '[P]RestRequest.requestURI' : 'requestURI$0',
        '[P]RestRequest.resourcePath' : 'resourcePath$0'
    },
    'RestResponse' : {
        '[M]RestResponse.addHeader(String name, String value)\tvoid' : 'addHeader($0)',
        '[P]RestResponse.headers' : 'headers$0',
        '[P]RestResponse.responseBody' : 'responseBody$0',
        '[P]RestResponse.statusCode' : 'statusCode$0'
    },
    'SObject' : {
        '[M]SObject.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]SObject.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]SObject.addError(String msg)\tvoid' : 'addError($0)',
        '[M]SObject.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]SObject.clear()\tvoid' : 'clear()$0',
        '[M]SObject.clone()\tSObject' : 'clone()$0',
        '[M]SObject.clone(Boolean preserveId)\tSObject' : 'clone($0)',
        '[M]SObject.clone(Boolean preserveId, Boolean deep)\tSObject' : 'clone($0)',
        '[M]SObject.clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps)\tSObject' : 'clone($0)',
        '[M]SObject.clone(Boolean preserveId, Boolean deep, Boolean preserveReadOnlyTimestamps, Boolean preserveAutoNumbers)\tSObject' : 'clone($0)',
        '[M]SObject.get(Schema.SObjectField field)\tObject' : 'get($0)',
        '[M]SObject.get(String field)\tObject' : 'get($0)',
        '[M]SObject.getOptions()\tDatabase.DMLOptions' : 'getOptions()$0',
        '[M]SObject.getQuickActionName()\tString' : 'getQuickActionName()$0',
        '[M]SObject.getSObject(Schema.SObjectField field)\tSObject' : 'getSObject($0)',
        '[M]SObject.getSObject(String field)\tSObject' : 'getSObject($0)',
        '[M]SObject.getSObjectType()\tSchema.SObjectType' : 'getSObjectType()$0',
        '[M]SObject.getSObjects(Schema.SObjectField field)\tList<SObject>' : 'getSObjects($0)',
        '[M]SObject.getSObjects(String field)\tList<SObject>' : 'getSObjects($0)',
        '[M]SObject.put(Schema.SObjectField field, Object value)\tObject' : 'put($0)',
        '[M]SObject.put(String field, Object value)\tObject' : 'put($0)',
        '[M]SObject.putSObject(Schema.SObjectField field, SObject value)\tSObject' : 'putSObject($0)',
        '[M]SObject.putSObject(String field, SObject value)\tSObject' : 'putSObject($0)',
        '[M]SObject.setOptions(APEX_OBJECT options)\tvoid' : 'setOptions($0)'
    },
    'SObjectException' : {
        '[M]SObjectException.getCause()\tException' : 'getCause()$0',
        '[M]SObjectException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]SObjectException.getMessage()\tString' : 'getMessage()$0',
        '[M]SObjectException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]SObjectException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]SObjectException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]SObjectException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'SObjectField' : {
        '[M]SObjectField.getDescribe()\tSchema.DescribeFieldResult' : 'getDescribe()$0'
    },
    'SObjectType' : {
        '[M]SObjectType.getDescribe()\tSchema.DescribeSObjectResult' : 'getDescribe()$0',
        '[M]SObjectType.newSObject()\tSObject' : 'newSObject()$0',
        '[M]SObjectType.newSObject(Id id)\tSObject' : 'newSObject($0)',
        '[M]SObjectType.newSObject(Id recordTypeId, Boolean loadDefaultValues)\tSObject' : 'newSObject($0)'
    },
    'Schedulable' : {
        '[M]Schedulable.execute(system.SchedulableContext param1)\tvoid' : 'execute($0)'
    },
    'SchedulableContext' : {
        '[M]SchedulableContext.getTriggerId()\tId' : 'getTriggerId()$0'
    },
    'Schema' : {
        '[M]Schema.describeDataCategoryGroupStructures(List<Schema.DataCategoryGroupSobjectTypePair> pairs, Boolean topCategoriesOnly)\tList<Schema.DescribeDataCategoryGroupStructureResult>' : 'describeDataCategoryGroupStructures($0)',
        '[M]Schema.describeDataCategoryGroups(List<String> sobjects)\tList<Schema.DescribeDataCategoryGroupResult>' : 'describeDataCategoryGroups($0)',
        '[M]Schema.getAppDescribe(String appName)\tMAP<String,Schema.SObjectType>' : 'getAppDescribe($0)',
        '[M]Schema.getGlobalDescribe()\tMAP<String,Schema.SObjectType>' : 'getGlobalDescribe()$0',
        '[M]Schema.getModuleDescribe()\tMAP<String,Schema.SObjectType>' : 'getModuleDescribe()$0',
        '[M]Schema.getModuleDescribe(String moduleName)\tMAP<String,Schema.SObjectType>' : 'getModuleDescribe($0)'
    },
    'SearchException' : {
        '[M]SearchException.getCause()\tException' : 'getCause()$0',
        '[M]SearchException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]SearchException.getMessage()\tString' : 'getMessage()$0',
        '[M]SearchException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]SearchException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]SearchException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]SearchException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'SecurityException' : {
        '[M]SecurityException.getCause()\tException' : 'getCause()$0',
        '[M]SecurityException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]SecurityException.getMessage()\tString' : 'getMessage()$0',
        '[M]SecurityException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]SecurityException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]SecurityException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]SecurityException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'SelectOption' : {
        '[M]SelectOption.getDisabled()\tBoolean' : 'getDisabled()$0',
        '[M]SelectOption.getEscapeItem()\tBoolean' : 'getEscapeItem()$0',
        '[M]SelectOption.getLabel()\tString' : 'getLabel()$0',
        '[M]SelectOption.getValue()\tString' : 'getValue()$0',
        '[M]SelectOption.setDisabled(Boolean disabled)\tvoid' : 'setDisabled($0)',
        '[M]SelectOption.setEscapeItem(Boolean disabled)\tvoid' : 'setEscapeItem($0)',
        '[M]SelectOption.setLabel(String label)\tvoid' : 'setLabel($0)',
        '[M]SelectOption.setValue(String value)\tvoid' : 'setValue($0)'
    },
    'SerializationException' : {
        '[M]SerializationException.getCause()\tException' : 'getCause()$0',
        '[M]SerializationException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]SerializationException.getMessage()\tString' : 'getMessage()$0',
        '[M]SerializationException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]SerializationException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]SerializationException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]SerializationException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Set' : {
        '[M]Set.add(ANY element)\tBoolean' : 'add($0)',
        '[M]Set.addAll(List elements)\tBoolean' : 'addAll($0)',
        '[M]Set.addAll(SET elements)\tBoolean' : 'addAll($0)',
        '[M]Set.clear()\tvoid' : 'clear()$0',
        '[M]Set.clone()\tSET<String>' : 'clone()$0',
        '[M]Set.contains(ANY element)\tBoolean' : 'contains($0)',
        '[M]Set.containsAll(List elements)\tBoolean' : 'containsAll($0)',
        '[M]Set.containsAll(SET elements)\tBoolean' : 'containsAll($0)',
        '[M]Set.isEmpty()\tBoolean' : 'isEmpty()$0',
        '[M]Set.iterator()\tsystem.ListIterator' : 'iterator()$0',
        '[M]Set.remove(ANY element)\tBoolean' : 'remove($0)',
        '[M]Set.removeAll(List elements)\tBoolean' : 'removeAll($0)',
        '[M]Set.removeAll(SET elements)\tBoolean' : 'removeAll($0)',
        '[M]Set.retainAll(List elements)\tBoolean' : 'retainAll($0)',
        '[M]Set.retainAll(SET elements)\tBoolean' : 'retainAll($0)',
        '[M]Set.size()\tInteger' : 'size()$0'
    },
    'SetupScope' : {
        '[M]SetupScope.values()\tList<system.SetupScope>' : 'values()$0',
        '[P]SetupScope.ORGANIZATION' : 'ORGANIZATION$0',
        '[P]SetupScope.PROFILE' : 'PROFILE$0',
        '[P]SetupScope.USER' : 'USER$0'
    },
    'Severity' : {
        '[M]Severity.values()\tList<ApexPages.Severity>' : 'values()$0',
        '[P]Severity.CONFIRM' : 'CONFIRM$0',
        '[P]Severity.ERROR' : 'ERROR$0',
        '[P]Severity.FATAL' : 'FATAL$0',
        '[P]Severity.INFO' : 'INFO$0',
        '[P]Severity.WARNING' : 'WARNING$0'
    },
    'SingleEmailMessage' : {},
    'Site' : {
        '[M]Site.changePassword(String newPassword, String verifyNewPassword)\tSystem.PageReference' : 'changePassword($0)',
        '[M]Site.changePassword(String newPassword, String verifyNewPassword, String oldPassword)\tSystem.PageReference' : 'changePassword($0)',
        '[M]Site.createPersonAccountPortalUser(SObject user, String ownerId, String password)\tId' : 'createPersonAccountPortalUser($0)',
        '[M]Site.createPersonAccountPortalUser(SObject user, String ownerId, String recordTypeId, String password)\tId' : 'createPersonAccountPortalUser($0)',
        '[M]Site.createPortalUser(SObject user, String accountId)\tId' : 'createPortalUser($0)',
        '[M]Site.createPortalUser(SObject user, String accountId, String password)\tId' : 'createPortalUser($0)',
        '[M]Site.createPortalUser(SObject user, String accountId, String password, Boolean sendEmailConfirmation)\tId' : 'createPortalUser($0)',
        '[M]Site.forgotPassword(String username)\tBoolean' : 'forgotPassword($0)',
        '[M]Site.getAdminEmail()\tString' : 'getAdminEmail()$0',
        '[M]Site.getAdminId()\tId' : 'getAdminId()$0',
        '[M]Site.getAnalyticsTrackingCode()\tString' : 'getAnalyticsTrackingCode()$0',
        '[M]Site.getCurrentSiteUrl()\tString' : 'getCurrentSiteUrl()$0',
        '[M]Site.getCustomWebAddress()\tString' : 'getCustomWebAddress()$0',
        '[M]Site.getDomain()\tString' : 'getDomain()$0',
        '[M]Site.getErrorDescription()\tString' : 'getErrorDescription()$0',
        '[M]Site.getErrorMessage()\tString' : 'getErrorMessage()$0',
        '[M]Site.getName()\tString' : 'getName()$0',
        '[M]Site.getOriginalUrl()\tString' : 'getOriginalUrl()$0',
        '[M]Site.getPrefix()\tString' : 'getPrefix()$0',
        '[M]Site.getTemplate()\tSystem.PageReference' : 'getTemplate()$0',
        '[M]Site.isLoginEnabled()\tBoolean' : 'isLoginEnabled()$0',
        '[M]Site.isPasswordExpired()\tBoolean' : 'isPasswordExpired()$0',
        '[M]Site.isRegistrationEnabled()\tBoolean' : 'isRegistrationEnabled()$0',
        '[M]Site.login(String username, String password, String startUrl)\tSystem.PageReference' : 'login($0)',
        '[M]Site.setPortalUserAsAuthProvider(SObject user, String accountId)\tvoid' : 'setPortalUserAsAuthProvider($0)'
    },
    'SoapType' : {
        '[M]SoapType.values()\tList<Schema.SoapType>' : 'values()$0',
        '[P]SoapType.ANYTYPE' : 'ANYTYPE$0',
        '[P]SoapType.BASE64BINARY' : 'BASE64BINARY$0',
        '[P]SoapType.BOOLEAN' : 'BOOLEAN$0',
        '[P]SoapType.DATE' : 'DATE$0',
        '[P]SoapType.DATETIME' : 'DATETIME$0',
        '[P]SoapType.DOUBLE' : 'DOUBLE$0',
        '[P]SoapType.EXECUTIONOVERLAY_APEXRESULT' : 'EXECUTIONOVERLAY_APEXRESULT$0',
        '[P]SoapType.EXECUTIONOVERLAY_HEAPDUMP' : 'EXECUTIONOVERLAY_HEAPDUMP$0',
        '[P]SoapType.EXECUTIONOVERLAY_SOQLRESULT' : 'EXECUTIONOVERLAY_SOQLRESULT$0',
        '[P]SoapType.ID' : 'ID$0',
        '[P]SoapType.INTEGER' : 'INTEGER$0',
        '[P]SoapType.METADATA_APEXCLASS' : 'METADATA_APEXCLASS$0',
        '[P]SoapType.METADATA_APEXCOMPONENT' : 'METADATA_APEXCOMPONENT$0',
        '[P]SoapType.METADATA_APEXPAGE' : 'METADATA_APEXPAGE$0',
        '[P]SoapType.METADATA_APEXTRIGGER' : 'METADATA_APEXTRIGGER$0',
        '[P]SoapType.METADATA_CUSTOMFIELD' : 'METADATA_CUSTOMFIELD$0',
        '[P]SoapType.METADATA_CUSTOMOBJECT' : 'METADATA_CUSTOMOBJECT$0',
        '[P]SoapType.STRING' : 'STRING$0',
        '[P]SoapType.SYMBOLTABLE' : 'SYMBOLTABLE$0',
        '[P]SoapType.TIME' : 'TIME$0'
    },
    'SparkPlugApi' : {
        '[M]SparkPlugApi.describePlugin(String className)\tProcess.SparkPlugApi.SparkPlugDescribeResult' : 'describePlugin($0)',
        '[M]SparkPlugApi.describePlugins()\tList<Process.SparkPlugApi.SparkPlugDescribeResult>' : 'describePlugins()$0',
        '[M]SparkPlugApi.invokePluginWithJson(String className, String parameters)\tString' : 'invokePluginWithJson($0)'
    },
    'SparkPlugDescribeResult' : {
        '[P]SparkPlugDescribeResult.inputParameters' : 'inputParameters$0',
        '[P]SparkPlugDescribeResult.name' : 'name$0',
        '[P]SparkPlugDescribeResult.outputParameters' : 'outputParameters$0'
    },
    'SparkPlugParameter' : {
        '[P]SparkPlugParameter.name' : 'name$0',
        '[P]SparkPlugParameter.parameterType' : 'parameterType$0',
        '[P]SparkPlugParameter.required' : 'required$0'
    },
    'Stack' : {
        '[M]Stack.empty()\tBoolean' : 'empty()$0',
        '[M]Stack.peek()\tString' : 'peek()$0',
        '[M]Stack.pop()\tString' : 'pop()$0',
        '[M]Stack.push(String item)\tvoid' : 'push($0)'
    },
    'StandardController' : {
        '[M]StandardController.addFields(List<String> fieldNames)\tvoid' : 'addFields($0)',
        '[M]StandardController.cancel()\tSystem.PageReference' : 'cancel()$0',
        '[M]StandardController.delete()\tSystem.PageReference' : 'delete()$0',
        '[M]StandardController.edit()\tSystem.PageReference' : 'edit()$0',
        '[M]StandardController.getId()\tString' : 'getId()$0',
        '[M]StandardController.getRecord()\tSObject' : 'getRecord()$0',
        '[M]StandardController.getSubject()\tSObject' : 'getSubject()$0',
        '[M]StandardController.reset()\tvoid' : 'reset()$0',
        '[M]StandardController.save()\tSystem.PageReference' : 'save()$0',
        '[M]StandardController.view()\tSystem.PageReference' : 'view()$0'
    },
    'StandardSetController' : {
        '[M]StandardSetController.addFields(List<String> fieldNames)\tvoid' : 'addFields($0)',
        '[M]StandardSetController.cancel()\tSystem.PageReference' : 'cancel()$0',
        '[M]StandardSetController.first()\tvoid' : 'first()$0',
        '[M]StandardSetController.getCompleteResult()\tBoolean' : 'getCompleteResult()$0',
        '[M]StandardSetController.getFilterId()\tString' : 'getFilterId()$0',
        '[M]StandardSetController.getHasNext()\tBoolean' : 'getHasNext()$0',
        '[M]StandardSetController.getHasPrevious()\tBoolean' : 'getHasPrevious()$0',
        '[M]StandardSetController.getListViewOptions()\tList<System.SelectOption>' : 'getListViewOptions()$0',
        '[M]StandardSetController.getPageNumber()\tInteger' : 'getPageNumber()$0',
        '[M]StandardSetController.getPageSize()\tInteger' : 'getPageSize()$0',
        '[M]StandardSetController.getRecord()\tSObject' : 'getRecord()$0',
        '[M]StandardSetController.getRecords()\tList<SObject>' : 'getRecords()$0',
        '[M]StandardSetController.getResultSize()\tInteger' : 'getResultSize()$0',
        '[M]StandardSetController.getSelected()\tList<SObject>' : 'getSelected()$0',
        '[M]StandardSetController.last()\tvoid' : 'last()$0',
        '[M]StandardSetController.next()\tvoid' : 'next()$0',
        '[M]StandardSetController.previous()\tvoid' : 'previous()$0',
        '[M]StandardSetController.reset()\tvoid' : 'reset()$0',
        '[M]StandardSetController.save()\tSystem.PageReference' : 'save()$0',
        '[M]StandardSetController.setFilterId(String filterId)\tvoid' : 'setFilterId($0)',
        '[M]StandardSetController.setPageNumber(Integer pageNumber)\tvoid' : 'setPageNumber($0)',
        '[M]StandardSetController.setPageSize(Integer pageSize)\tvoid' : 'setPageSize($0)',
        '[M]StandardSetController.setSelected(List<SObject> selected)\tvoid' : 'setSelected($0)'
    },
    'StaticResourceCalloutMock' : {
        '[M]StaticResourceCalloutMock.respond(System.HttpRequest request)\tSystem.HttpResponse' : 'respond($0)',
        '[M]StaticResourceCalloutMock.setHeader(String key, String val)\tvoid' : 'setHeader($0)',
        '[M]StaticResourceCalloutMock.setStaticResource(String staticResourceName)\tvoid' : 'setStaticResource($0)',
        '[M]StaticResourceCalloutMock.setStatus(String status)\tvoid' : 'setStatus($0)',
        '[M]StaticResourceCalloutMock.setStatusCode(Integer code)\tvoid' : 'setStatusCode($0)'
    },
    'StatusCode' : {
        '[M]StatusCode.values()\tList<system.StatusCode>' : 'values()$0',
        '[P]StatusCode.ALL_OR_NONE_OPERATION_ROLLED_BACK' : 'ALL_OR_NONE_OPERATION_ROLLED_BACK$0',
        '[P]StatusCode.ALREADY_IN_PROCESS' : 'ALREADY_IN_PROCESS$0',
        '[P]StatusCode.ASSIGNEE_TYPE_REQUIRED' : 'ASSIGNEE_TYPE_REQUIRED$0',
        '[P]StatusCode.BAD_CUSTOM_ENTITY_PARENT_DOMAIN' : 'BAD_CUSTOM_ENTITY_PARENT_DOMAIN$0',
        '[P]StatusCode.BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED' : 'BCC_NOT_ALLOWED_IF_BCC_COMPLIANCE_ENABLED$0',
        '[P]StatusCode.CANNOT_CASCADE_PRODUCT_ACTIVE' : 'CANNOT_CASCADE_PRODUCT_ACTIVE$0',
        '[P]StatusCode.CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD' : 'CANNOT_CHANGE_FIELD_TYPE_OF_APEX_REFERENCED_FIELD$0',
        '[P]StatusCode.CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD' : 'CANNOT_CHANGE_FIELD_TYPE_OF_REFERENCED_FIELD$0',
        '[P]StatusCode.CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE' : 'CANNOT_CREATE_ANOTHER_MANAGED_PACKAGE$0',
        '[P]StatusCode.CANNOT_DEACTIVATE_DIVISION' : 'CANNOT_DEACTIVATE_DIVISION$0',
        '[P]StatusCode.CANNOT_DELETE_LAST_DATED_CONVERSION_RATE' : 'CANNOT_DELETE_LAST_DATED_CONVERSION_RATE$0',
        '[P]StatusCode.CANNOT_DELETE_MANAGED_OBJECT' : 'CANNOT_DELETE_MANAGED_OBJECT$0',
        '[P]StatusCode.CANNOT_DISABLE_LAST_ADMIN' : 'CANNOT_DISABLE_LAST_ADMIN$0',
        '[P]StatusCode.CANNOT_ENABLE_IP_RESTRICT_REQUESTS' : 'CANNOT_ENABLE_IP_RESTRICT_REQUESTS$0',
        '[P]StatusCode.CANNOT_EXECUTE_FLOW_TRIGGER' : 'CANNOT_EXECUTE_FLOW_TRIGGER$0',
        '[P]StatusCode.CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY' : 'CANNOT_INSERT_UPDATE_ACTIVATE_ENTITY$0',
        '[P]StatusCode.CANNOT_MODIFY_MANAGED_OBJECT' : 'CANNOT_MODIFY_MANAGED_OBJECT$0',
        '[P]StatusCode.CANNOT_RENAME_APEX_REFERENCED_FIELD' : 'CANNOT_RENAME_APEX_REFERENCED_FIELD$0',
        '[P]StatusCode.CANNOT_RENAME_APEX_REFERENCED_OBJECT' : 'CANNOT_RENAME_APEX_REFERENCED_OBJECT$0',
        '[P]StatusCode.CANNOT_RENAME_REFERENCED_FIELD' : 'CANNOT_RENAME_REFERENCED_FIELD$0',
        '[P]StatusCode.CANNOT_RENAME_REFERENCED_OBJECT' : 'CANNOT_RENAME_REFERENCED_OBJECT$0',
        '[P]StatusCode.CANNOT_REPARENT_RECORD' : 'CANNOT_REPARENT_RECORD$0',
        '[P]StatusCode.CANNOT_UPDATE_CONVERTED_LEAD' : 'CANNOT_UPDATE_CONVERTED_LEAD$0',
        '[P]StatusCode.CANT_DISABLE_CORP_CURRENCY' : 'CANT_DISABLE_CORP_CURRENCY$0',
        '[P]StatusCode.CANT_UNSET_CORP_CURRENCY' : 'CANT_UNSET_CORP_CURRENCY$0',
        '[P]StatusCode.CHILD_SHARE_FAILS_PARENT' : 'CHILD_SHARE_FAILS_PARENT$0',
        '[P]StatusCode.CIRCULAR_DEPENDENCY' : 'CIRCULAR_DEPENDENCY$0',
        '[P]StatusCode.COLLISION_DETECTED' : 'COLLISION_DETECTED$0',
        '[P]StatusCode.COMMUNITY_NOT_ACCESSIBLE' : 'COMMUNITY_NOT_ACCESSIBLE$0',
        '[P]StatusCode.CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED' : 'CUSTOM_CLOB_FIELD_LIMIT_EXCEEDED$0',
        '[P]StatusCode.CUSTOM_ENTITY_OR_FIELD_LIMIT' : 'CUSTOM_ENTITY_OR_FIELD_LIMIT$0',
        '[P]StatusCode.CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED' : 'CUSTOM_FIELD_INDEX_LIMIT_EXCEEDED$0',
        '[P]StatusCode.CUSTOM_INDEX_EXISTS' : 'CUSTOM_INDEX_EXISTS$0',
        '[P]StatusCode.CUSTOM_LINK_LIMIT_EXCEEDED' : 'CUSTOM_LINK_LIMIT_EXCEEDED$0',
        '[P]StatusCode.CUSTOM_METADATA_LIMIT_EXCEEDED' : 'CUSTOM_METADATA_LIMIT_EXCEEDED$0',
        '[P]StatusCode.CUSTOM_TAB_LIMIT_EXCEEDED' : 'CUSTOM_TAB_LIMIT_EXCEEDED$0',
        '[P]StatusCode.DELETE_FAILED' : 'DELETE_FAILED$0',
        '[P]StatusCode.DELETE_OPERATION_TOO_LARGE' : 'DELETE_OPERATION_TOO_LARGE$0',
        '[P]StatusCode.DELETE_REQUIRED_ON_CASCADE' : 'DELETE_REQUIRED_ON_CASCADE$0',
        '[P]StatusCode.DEPENDENCY_EXISTS' : 'DEPENDENCY_EXISTS$0',
        '[P]StatusCode.DUPLICATE_CASE_SOLUTION' : 'DUPLICATE_CASE_SOLUTION$0',
        '[P]StatusCode.DUPLICATE_COMM_NICKNAME' : 'DUPLICATE_COMM_NICKNAME$0',
        '[P]StatusCode.DUPLICATE_CUSTOM_ENTITY_DEFINITION' : 'DUPLICATE_CUSTOM_ENTITY_DEFINITION$0',
        '[P]StatusCode.DUPLICATE_CUSTOM_TAB_MOTIF' : 'DUPLICATE_CUSTOM_TAB_MOTIF$0',
        '[P]StatusCode.DUPLICATE_DEVELOPER_NAME' : 'DUPLICATE_DEVELOPER_NAME$0',
        '[P]StatusCode.DUPLICATE_EXTERNAL_ID' : 'DUPLICATE_EXTERNAL_ID$0',
        '[P]StatusCode.DUPLICATE_MASTER_LABEL' : 'DUPLICATE_MASTER_LABEL$0',
        '[P]StatusCode.DUPLICATE_SENDER_DISPLAY_NAME' : 'DUPLICATE_SENDER_DISPLAY_NAME$0',
        '[P]StatusCode.DUPLICATE_USERNAME' : 'DUPLICATE_USERNAME$0',
        '[P]StatusCode.DUPLICATE_VALUE' : 'DUPLICATE_VALUE$0',
        '[P]StatusCode.EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR' : 'EMAIL_NOT_PROCESSED_DUE_TO_PRIOR_ERROR$0',
        '[P]StatusCode.EMPTY_SCONTROL_FILE_NAME' : 'EMPTY_SCONTROL_FILE_NAME$0',
        '[P]StatusCode.ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE' : 'ENTITY_FAILED_IFLASTMODIFIED_ON_UPDATE$0',
        '[P]StatusCode.ENTITY_IS_ARCHIVED' : 'ENTITY_IS_ARCHIVED$0',
        '[P]StatusCode.ENTITY_IS_DELETED' : 'ENTITY_IS_DELETED$0',
        '[P]StatusCode.ENTITY_IS_LOCKED' : 'ENTITY_IS_LOCKED$0',
        '[P]StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT' : 'ENVIRONMENT_HUB_MEMBERSHIP_CONFLICT$0',
        '[P]StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB' : 'ENVIRONMENT_HUB_MEMBERSHIP_ERROR_JOINING_HUB$0',
        '[P]StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB' : 'ENVIRONMENT_HUB_MEMBERSHIP_USER_ALREADY_IN_HUB$0',
        '[P]StatusCode.ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN' : 'ENVIRONMENT_HUB_MEMBERSHIP_USER_NOT_ORG_ADMIN$0',
        '[P]StatusCode.ERROR_IN_MAILER' : 'ERROR_IN_MAILER$0',
        '[P]StatusCode.FAILED_ACTIVATION' : 'FAILED_ACTIVATION$0',
        '[P]StatusCode.FIELD_CUSTOM_VALIDATION_EXCEPTION' : 'FIELD_CUSTOM_VALIDATION_EXCEPTION$0',
        '[P]StatusCode.FIELD_FILTER_VALIDATION_EXCEPTION' : 'FIELD_FILTER_VALIDATION_EXCEPTION$0',
        '[P]StatusCode.FIELD_INTEGRITY_EXCEPTION' : 'FIELD_INTEGRITY_EXCEPTION$0',
        '[P]StatusCode.FILTERED_LOOKUP_LIMIT_EXCEEDED' : 'FILTERED_LOOKUP_LIMIT_EXCEEDED$0',
        '[P]StatusCode.HTML_FILE_UPLOAD_NOT_ALLOWED' : 'HTML_FILE_UPLOAD_NOT_ALLOWED$0',
        '[P]StatusCode.IMAGE_TOO_LARGE' : 'IMAGE_TOO_LARGE$0',
        '[P]StatusCode.INACTIVE_OWNER_OR_USER' : 'INACTIVE_OWNER_OR_USER$0',
        '[P]StatusCode.INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY' : 'INSUFFICIENT_ACCESS_ON_CROSS_REFERENCE_ENTITY$0',
        '[P]StatusCode.INSUFFICIENT_ACCESS_OR_READONLY' : 'INSUFFICIENT_ACCESS_OR_READONLY$0',
        '[P]StatusCode.INVALID_ACCESS_LEVEL' : 'INVALID_ACCESS_LEVEL$0',
        '[P]StatusCode.INVALID_ARGUMENT_TYPE' : 'INVALID_ARGUMENT_TYPE$0',
        '[P]StatusCode.INVALID_ASSIGNEE_TYPE' : 'INVALID_ASSIGNEE_TYPE$0',
        '[P]StatusCode.INVALID_ASSIGNMENT_RULE' : 'INVALID_ASSIGNMENT_RULE$0',
        '[P]StatusCode.INVALID_BATCH_OPERATION' : 'INVALID_BATCH_OPERATION$0',
        '[P]StatusCode.INVALID_CONTENT_TYPE' : 'INVALID_CONTENT_TYPE$0',
        '[P]StatusCode.INVALID_CREDIT_CARD_INFO' : 'INVALID_CREDIT_CARD_INFO$0',
        '[P]StatusCode.INVALID_CROSS_REFERENCE_KEY' : 'INVALID_CROSS_REFERENCE_KEY$0',
        '[P]StatusCode.INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD' : 'INVALID_CROSS_REFERENCE_TYPE_FOR_FIELD$0',
        '[P]StatusCode.INVALID_CURRENCY_CONV_RATE' : 'INVALID_CURRENCY_CONV_RATE$0',
        '[P]StatusCode.INVALID_CURRENCY_CORP_RATE' : 'INVALID_CURRENCY_CORP_RATE$0',
        '[P]StatusCode.INVALID_CURRENCY_ISO' : 'INVALID_CURRENCY_ISO$0',
        '[P]StatusCode.INVALID_DATA_CATEGORY_GROUP_REFERENCE' : 'INVALID_DATA_CATEGORY_GROUP_REFERENCE$0',
        '[P]StatusCode.INVALID_DATA_URI' : 'INVALID_DATA_URI$0',
        '[P]StatusCode.INVALID_EMAIL_ADDRESS' : 'INVALID_EMAIL_ADDRESS$0',
        '[P]StatusCode.INVALID_EMPTY_KEY_OWNER' : 'INVALID_EMPTY_KEY_OWNER$0',
        '[P]StatusCode.INVALID_FIELD' : 'INVALID_FIELD$0',
        '[P]StatusCode.INVALID_FIELD_FOR_INSERT_UPDATE' : 'INVALID_FIELD_FOR_INSERT_UPDATE$0',
        '[P]StatusCode.INVALID_FIELD_WHEN_USING_TEMPLATE' : 'INVALID_FIELD_WHEN_USING_TEMPLATE$0',
        '[P]StatusCode.INVALID_FILTER_ACTION' : 'INVALID_FILTER_ACTION$0',
        '[P]StatusCode.INVALID_GOOGLE_DOCS_URL' : 'INVALID_GOOGLE_DOCS_URL$0',
        '[P]StatusCode.INVALID_ID_FIELD' : 'INVALID_ID_FIELD$0',
        '[P]StatusCode.INVALID_INET_ADDRESS' : 'INVALID_INET_ADDRESS$0',
        '[P]StatusCode.INVALID_LINEITEM_CLONE_STATE' : 'INVALID_LINEITEM_CLONE_STATE$0',
        '[P]StatusCode.INVALID_MASTER_OR_TRANSLATED_SOLUTION' : 'INVALID_MASTER_OR_TRANSLATED_SOLUTION$0',
        '[P]StatusCode.INVALID_MESSAGE_ID_REFERENCE' : 'INVALID_MESSAGE_ID_REFERENCE$0',
        '[P]StatusCode.INVALID_OAUTH_URL' : 'INVALID_OAUTH_URL$0',
        '[P]StatusCode.INVALID_OPERATION' : 'INVALID_OPERATION$0',
        '[P]StatusCode.INVALID_OPERATOR' : 'INVALID_OPERATOR$0',
        '[P]StatusCode.INVALID_OR_NULL_FOR_RESTRICTED_PICKList' : 'INVALID_OR_NULL_FOR_RESTRICTED_PICKList$0',
        '[P]StatusCode.INVALID_OWNER' : 'INVALID_OWNER$0',
        '[P]StatusCode.INVALID_PACKAGE_VERSION' : 'INVALID_PACKAGE_VERSION$0',
        '[P]StatusCode.INVALID_PARTNER_NETWORK_STATUS' : 'INVALID_PARTNER_NETWORK_STATUS$0',
        '[P]StatusCode.INVALID_PERSON_ACCOUNT_OPERATION' : 'INVALID_PERSON_ACCOUNT_OPERATION$0',
        '[P]StatusCode.INVALID_QUERY_LOCATOR' : 'INVALID_QUERY_LOCATOR$0',
        '[P]StatusCode.INVALID_READ_ONLY_USER_DML' : 'INVALID_READ_ONLY_USER_DML$0',
        '[P]StatusCode.INVALID_SAVE_AS_ACTIVITY_FLAG' : 'INVALID_SAVE_AS_ACTIVITY_FLAG$0',
        '[P]StatusCode.INVALID_SESSION_ID' : 'INVALID_SESSION_ID$0',
        '[P]StatusCode.INVALID_SETUP_OWNER' : 'INVALID_SETUP_OWNER$0',
        '[P]StatusCode.INVALID_SIGNUP_COUNTRY' : 'INVALID_SIGNUP_COUNTRY$0',
        '[P]StatusCode.INVALID_STATUS' : 'INVALID_STATUS$0',
        '[P]StatusCode.INVALID_TYPE' : 'INVALID_TYPE$0',
        '[P]StatusCode.INVALID_TYPE_FOR_OPERATION' : 'INVALID_TYPE_FOR_OPERATION$0',
        '[P]StatusCode.INVALID_TYPE_ON_FIELD_IN_RECORD' : 'INVALID_TYPE_ON_FIELD_IN_RECORD$0',
        '[P]StatusCode.IP_RANGE_LIMIT_EXCEEDED' : 'IP_RANGE_LIMIT_EXCEEDED$0',
        '[P]StatusCode.LICENSE_LIMIT_EXCEEDED' : 'LICENSE_LIMIT_EXCEEDED$0',
        '[P]StatusCode.LIGHT_PORTAL_USER_EXCEPTION' : 'LIGHT_PORTAL_USER_EXCEPTION$0',
        '[P]StatusCode.LIMIT_EXCEEDED' : 'LIMIT_EXCEEDED$0',
        '[P]StatusCode.MALFORMED_ID' : 'MALFORMED_ID$0',
        '[P]StatusCode.MANAGER_NOT_DEFINED' : 'MANAGER_NOT_DEFINED$0',
        '[P]StatusCode.MASSMAIL_RETRY_LIMIT_EXCEEDED' : 'MASSMAIL_RETRY_LIMIT_EXCEEDED$0',
        '[P]StatusCode.MASS_MAIL_LIMIT_EXCEEDED' : 'MASS_MAIL_LIMIT_EXCEEDED$0',
        '[P]StatusCode.MAXIMUM_CCEMAILS_EXCEEDED' : 'MAXIMUM_CCEMAILS_EXCEEDED$0',
        '[P]StatusCode.MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED' : 'MAXIMUM_DASHBOARD_COMPONENTS_EXCEEDED$0',
        '[P]StatusCode.MAXIMUM_HIERARCHY_LEVELS_REACHED' : 'MAXIMUM_HIERARCHY_LEVELS_REACHED$0',
        '[P]StatusCode.MAXIMUM_SIZE_OF_ATTACHMENT' : 'MAXIMUM_SIZE_OF_ATTACHMENT$0',
        '[P]StatusCode.MAXIMUM_SIZE_OF_DOCUMENT' : 'MAXIMUM_SIZE_OF_DOCUMENT$0',
        '[P]StatusCode.MAX_ACTIONS_PER_RULE_EXCEEDED' : 'MAX_ACTIONS_PER_RULE_EXCEEDED$0',
        '[P]StatusCode.MAX_ACTIVE_RULES_EXCEEDED' : 'MAX_ACTIVE_RULES_EXCEEDED$0',
        '[P]StatusCode.MAX_APPROVAL_STEPS_EXCEEDED' : 'MAX_APPROVAL_STEPS_EXCEEDED$0',
        '[P]StatusCode.MAX_FORMULAS_PER_RULE_EXCEEDED' : 'MAX_FORMULAS_PER_RULE_EXCEEDED$0',
        '[P]StatusCode.MAX_RULES_EXCEEDED' : 'MAX_RULES_EXCEEDED$0',
        '[P]StatusCode.MAX_RULE_ENTRIES_EXCEEDED' : 'MAX_RULE_ENTRIES_EXCEEDED$0',
        '[P]StatusCode.MAX_TASK_DESCRIPTION_EXCEEEDED' : 'MAX_TASK_DESCRIPTION_EXCEEEDED$0',
        '[P]StatusCode.MAX_TM_RULES_EXCEEDED' : 'MAX_TM_RULES_EXCEEDED$0',
        '[P]StatusCode.MAX_TM_RULE_ITEMS_EXCEEDED' : 'MAX_TM_RULE_ITEMS_EXCEEDED$0',
        '[P]StatusCode.MERGE_FAILED' : 'MERGE_FAILED$0',
        '[P]StatusCode.MISSING_ARGUMENT' : 'MISSING_ARGUMENT$0',
        '[P]StatusCode.MIXED_DML_OPERATION' : 'MIXED_DML_OPERATION$0',
        '[P]StatusCode.NONUNIQUE_SHIPPING_ADDRESS' : 'NONUNIQUE_SHIPPING_ADDRESS$0',
        '[P]StatusCode.NO_APPLICABLE_PROCESS' : 'NO_APPLICABLE_PROCESS$0',
        '[P]StatusCode.NO_ATTACHMENT_PERMISSION' : 'NO_ATTACHMENT_PERMISSION$0',
        '[P]StatusCode.NO_INACTIVE_DIVISION_MEMBERS' : 'NO_INACTIVE_DIVISION_MEMBERS$0',
        '[P]StatusCode.NO_MASS_MAIL_PERMISSION' : 'NO_MASS_MAIL_PERMISSION$0',
        '[P]StatusCode.NO_SUCH_USER_EXISTS' : 'NO_SUCH_USER_EXISTS$0',
        '[P]StatusCode.NUMBER_OUTSIDE_VALID_RANGE' : 'NUMBER_OUTSIDE_VALID_RANGE$0',
        '[P]StatusCode.NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED' : 'NUM_HISTORY_FIELDS_BY_SOBJECT_EXCEEDED$0',
        '[P]StatusCode.OPTED_OUT_OF_MASS_MAIL' : 'OPTED_OUT_OF_MASS_MAIL$0',
        '[P]StatusCode.OP_WITH_INVALID_USER_TYPE_EXCEPTION' : 'OP_WITH_INVALID_USER_TYPE_EXCEPTION$0',
        '[P]StatusCode.PACKAGE_LICENSE_REQUIRED' : 'PACKAGE_LICENSE_REQUIRED$0',
        '[P]StatusCode.PACKAGING_API_INSTALL_FAILED' : 'PACKAGING_API_INSTALL_FAILED$0',
        '[P]StatusCode.PACKAGING_API_UNINSTALL_FAILED' : 'PACKAGING_API_UNINSTALL_FAILED$0',
        '[P]StatusCode.PORTAL_NO_ACCESS' : 'PORTAL_NO_ACCESS$0',
        '[P]StatusCode.PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT' : 'PORTAL_USER_ALREADY_EXISTS_FOR_CONTACT$0',
        '[P]StatusCode.PRIVATE_CONTACT_ON_ASSET' : 'PRIVATE_CONTACT_ON_ASSET$0',
        '[P]StatusCode.QUERY_TIMEOUT' : 'QUERY_TIMEOUT$0',
        '[P]StatusCode.RECORD_IN_USE_BY_WORKFLOW' : 'RECORD_IN_USE_BY_WORKFLOW$0',
        '[P]StatusCode.REQUEST_RUNNING_TOO_LONG' : 'REQUEST_RUNNING_TOO_LONG$0',
        '[P]StatusCode.REQUIRED_FEATURE_MISSING' : 'REQUIRED_FEATURE_MISSING$0',
        '[P]StatusCode.REQUIRED_FIELD_MISSING' : 'REQUIRED_FIELD_MISSING$0',
        '[P]StatusCode.SELF_REFERENCE_FROM_FLOW' : 'SELF_REFERENCE_FROM_FLOW$0',
        '[P]StatusCode.SELF_REFERENCE_FROM_TRIGGER' : 'SELF_REFERENCE_FROM_TRIGGER$0',
        '[P]StatusCode.SHARE_NEEDED_FOR_CHILD_OWNER' : 'SHARE_NEEDED_FOR_CHILD_OWNER$0',
        '[P]StatusCode.SINGLE_EMAIL_LIMIT_EXCEEDED' : 'SINGLE_EMAIL_LIMIT_EXCEEDED$0',
        '[P]StatusCode.STANDARD_PRICE_NOT_DEFINED' : 'STANDARD_PRICE_NOT_DEFINED$0',
        '[P]StatusCode.STORAGE_LIMIT_EXCEEDED' : 'STORAGE_LIMIT_EXCEEDED$0',
        '[P]StatusCode.STRING_TOO_LONG' : 'STRING_TOO_LONG$0',
        '[P]StatusCode.TABSET_LIMIT_EXCEEDED' : 'TABSET_LIMIT_EXCEEDED$0',
        '[P]StatusCode.TEMPLATE_NOT_ACTIVE' : 'TEMPLATE_NOT_ACTIVE$0',
        '[P]StatusCode.TEMPLATE_NOT_FOUND' : 'TEMPLATE_NOT_FOUND$0',
        '[P]StatusCode.TERRITORY_REALIGN_IN_PROGRESS' : 'TERRITORY_REALIGN_IN_PROGRESS$0',
        '[P]StatusCode.TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET' : 'TEXT_DATA_OUTSIDE_SUPPORTED_CHARSET$0',
        '[P]StatusCode.TOO_MANY_APEX_REQUESTS' : 'TOO_MANY_APEX_REQUESTS$0',
        '[P]StatusCode.TOO_MANY_ENUM_VALUE' : 'TOO_MANY_ENUM_VALUE$0',
        '[P]StatusCode.TOO_MANY_POSSIBLE_USERS_EXIST' : 'TOO_MANY_POSSIBLE_USERS_EXIST$0',
        '[P]StatusCode.TRANSFER_REQUIRES_READ' : 'TRANSFER_REQUIRES_READ$0',
        '[P]StatusCode.UNABLE_TO_LOCK_ROW' : 'UNABLE_TO_LOCK_ROW$0',
        '[P]StatusCode.UNAVAILABLE_RECORDTYPE_EXCEPTION' : 'UNAVAILABLE_RECORDTYPE_EXCEPTION$0',
        '[P]StatusCode.UNDELETE_FAILED' : 'UNDELETE_FAILED$0',
        '[P]StatusCode.UNKNOWN_EXCEPTION' : 'UNKNOWN_EXCEPTION$0',
        '[P]StatusCode.UNSPECIFIED_EMAIL_ADDRESS' : 'UNSPECIFIED_EMAIL_ADDRESS$0',
        '[P]StatusCode.UNSUPPORTED_APEX_TRIGGER_OPERATON' : 'UNSUPPORTED_APEX_TRIGGER_OPERATON$0',
        '[P]StatusCode.UNVERIFIED_SENDER_ADDRESS' : 'UNVERIFIED_SENDER_ADDRESS$0',
        '[P]StatusCode.USER_OWNS_PORTAL_ACCOUNT_EXCEPTION' : 'USER_OWNS_PORTAL_ACCOUNT_EXCEPTION$0',
        '[P]StatusCode.USER_WITH_APEX_SHARES_EXCEPTION' : 'USER_WITH_APEX_SHARES_EXCEPTION$0',
        '[P]StatusCode.WEBLINK_SIZE_LIMIT_EXCEEDED' : 'WEBLINK_SIZE_LIMIT_EXCEEDED$0',
        '[P]StatusCode.WEBLINK_URL_INVALID' : 'WEBLINK_URL_INVALID$0',
        '[P]StatusCode.WRONG_CONTROLLER_TYPE' : 'WRONG_CONTROLLER_TYPE$0'
    },
    'String' : {
        '[M]String.abbreviate(Integer maxWidth)\tString' : 'abbreviate($0)',
        '[M]String.abbreviate(Integer maxWidth, Integer offset)\tString' : 'abbreviate($0)',
        '[M]String.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]String.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]String.addError(String msg)\tvoid' : 'addError($0)',
        '[M]String.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]String.capitalize()\tString' : 'capitalize()$0',
        '[M]String.center(Integer size)\tString' : 'center($0)',
        '[M]String.center(Integer size, String padStr)\tString' : 'center($0)',
        '[M]String.compareTo(String str)\tInteger' : 'compareTo($0)',
        '[M]String.contains(String str)\tBoolean' : 'contains($0)',
        '[M]String.containsAny(String validChars)\tBoolean' : 'containsAny($0)',
        '[M]String.containsIgnoreCase(String searchStr)\tBoolean' : 'containsIgnoreCase($0)',
        '[M]String.containsNone(String invalidChars)\tBoolean' : 'containsNone($0)',
        '[M]String.containsOnly(String validChars)\tBoolean' : 'containsOnly($0)',
        '[M]String.containsWhitespace()\tBoolean' : 'containsWhitespace()$0',
        '[M]String.countMatches(String searchStr)\tInteger' : 'countMatches($0)',
        '[M]String.deleteWhitespace()\tString' : 'deleteWhitespace()$0',
        '[M]String.difference(String other)\tString' : 'difference($0)',
        '[M]String.endsWith(String str)\tBoolean' : 'endsWith($0)',
        '[M]String.endsWithIgnoreCase(String suffix)\tBoolean' : 'endsWithIgnoreCase($0)',
        '[M]String.equals(String other)\tBoolean' : 'equals($0)',
        '[M]String.equalsIgnoreCase(String other)\tBoolean' : 'equalsIgnoreCase($0)',
        '[M]String.escapeCsv()\tString' : 'escapeCsv()$0',
        '[M]String.escapeEcmaScript()\tString' : 'escapeEcmaScript()$0',
        '[M]String.escapeHtml3()\tString' : 'escapeHtml3()$0',
        '[M]String.escapeHtml4()\tString' : 'escapeHtml4()$0',
        '[M]String.escapeSingleQuotes(String s)\tString' : 'escapeSingleQuotes($0)',
        '[M]String.escapeXml()\tString' : 'escapeXml()$0',
        '[M]String.format(String format, List<String> arguments)\tString' : 'format($0)',
        '[M]String.fromCharArray(List<Integer> charArr)\tString' : 'fromCharArray($0)',
        '[M]String.getCommonPrefix(List strings)\tString' : 'getCommonPrefix($0)',
        '[M]String.getLevenshteinDistance(String other)\tInteger' : 'getLevenshteinDistance($0)',
        '[M]String.getLevenshteinDistance(String other, Integer threshold)\tInteger' : 'getLevenshteinDistance($0)',
        '[M]String.hashCode()\tInteger' : 'hashCode()$0',
        '[M]String.indexOf(String str)\tInteger' : 'indexOf($0)',
        '[M]String.indexOf(String str, Integer startPos)\tInteger' : 'indexOf($0)',
        '[M]String.indexOfAny(String searchChars)\tInteger' : 'indexOfAny($0)',
        '[M]String.indexOfAnyBut(String searchChars)\tInteger' : 'indexOfAnyBut($0)',
        '[M]String.indexOfDifference(String other)\tInteger' : 'indexOfDifference($0)',
        '[M]String.indexOfIgnoreCase(String searchStr)\tInteger' : 'indexOfIgnoreCase($0)',
        '[M]String.indexOfIgnoreCase(String searchStr, Integer startPos)\tInteger' : 'indexOfIgnoreCase($0)',
        '[M]String.isAllLowerCase()\tBoolean' : 'isAllLowerCase()$0',
        '[M]String.isAllUpperCase()\tBoolean' : 'isAllUpperCase()$0',
        '[M]String.isAlpha()\tBoolean' : 'isAlpha()$0',
        '[M]String.isAlphaSpace()\tBoolean' : 'isAlphaSpace()$0',
        '[M]String.isAlphanumeric()\tBoolean' : 'isAlphanumeric()$0',
        '[M]String.isAlphanumericSpace()\tBoolean' : 'isAlphanumericSpace()$0',
        '[M]String.isAsciiPrintable()\tBoolean' : 'isAsciiPrintable()$0',
        '[M]String.isBlank(String str)\tBoolean' : 'isBlank($0)',
        '[M]String.isEmpty(String str)\tBoolean' : 'isEmpty($0)',
        '[M]String.isNotBlank(String str)\tBoolean' : 'isNotBlank($0)',
        '[M]String.isNotEmpty(String str)\tBoolean' : 'isNotEmpty($0)',
        '[M]String.isNumeric()\tBoolean' : 'isNumeric()$0',
        '[M]String.isNumericSpace()\tBoolean' : 'isNumericSpace()$0',
        '[M]String.isWhitespace()\tBoolean' : 'isWhitespace()$0',
        '[M]String.join(APEX_OBJECT iterableObj, String separator)\tString' : 'join($0)',
        '[M]String.lastIndexOf(String searchStr, Integer startPos)\tInteger' : 'lastIndexOf($0)',
        '[M]String.lastIndexOf(String str)\tInteger' : 'lastIndexOf($0)',
        '[M]String.lastIndexOfIgnoreCase(String searchStr)\tInteger' : 'lastIndexOfIgnoreCase($0)',
        '[M]String.lastIndexOfIgnoreCase(String searchStr, Integer startPos)\tInteger' : 'lastIndexOfIgnoreCase($0)',
        '[M]String.left(Integer len)\tString' : 'left($0)',
        '[M]String.leftPad(Integer len)\tString' : 'leftPad($0)',
        '[M]String.leftPad(Integer len, String padStr)\tString' : 'leftPad($0)',
        '[M]String.length()\tInteger' : 'length()$0',
        '[M]String.mid(Integer pos, Integer len)\tString' : 'mid($0)',
        '[M]String.normalizeSpace()\tString' : 'normalizeSpace()$0',
        '[M]String.overlay(String overlay, Integer start, Integer end)\tString' : 'overlay($0)',
        '[M]String.remove(String toRemove)\tString' : 'remove($0)',
        '[M]String.removeEnd(String toRemove)\tString' : 'removeEnd($0)',
        '[M]String.removeEndIgnoreCase(String toRemove)\tString' : 'removeEndIgnoreCase($0)',
        '[M]String.removeStart(String toRemove)\tString' : 'removeStart($0)',
        '[M]String.removeStartIgnoreCase(String toRemove)\tString' : 'removeStartIgnoreCase($0)',
        '[M]String.repeat(Integer numTimes)\tString' : 'repeat($0)',
        '[M]String.repeat(String separator, Integer numTimes)\tString' : 'repeat($0)',
        '[M]String.replace(String target, String replacement)\tString' : 'replace($0)',
        '[M]String.replaceAll(String regex, String replacement)\tString' : 'replaceAll($0)',
        '[M]String.replaceFirst(String regex, String replacement)\tString' : 'replaceFirst($0)',
        '[M]String.reverse()\tString' : 'reverse()$0',
        '[M]String.right(Integer len)\tString' : 'right($0)',
        '[M]String.rightPad(Integer len)\tString' : 'rightPad($0)',
        '[M]String.rightPad(Integer len, String padStr)\tString' : 'rightPad($0)',
        '[M]String.split(String regex)\tList<String>' : 'split($0)',
        '[M]String.split(String regex, Integer limit)\tList<String>' : 'split($0)',
        '[M]String.splitByCharacterType()\tList<String>' : 'splitByCharacterType()$0',
        '[M]String.splitByCharacterTypeCamelCase()\tList<String>' : 'splitByCharacterTypeCamelCase()$0',
        '[M]String.startsWith(String str)\tBoolean' : 'startsWith($0)',
        '[M]String.startsWithIgnoreCase(String prefix)\tBoolean' : 'startsWithIgnoreCase($0)',
        '[M]String.stripHtmlTags()\tString' : 'stripHtmlTags()$0',
        '[M]String.substring(Integer start)\tString' : 'substring($0)',
        '[M]String.substring(Integer start, Integer end)\tString' : 'substring($0)',
        '[M]String.substringAfter(String separator)\tString' : 'substringAfter($0)',
        '[M]String.substringAfterLast(String separator)\tString' : 'substringAfterLast($0)',
        '[M]String.substringBefore(String separator)\tString' : 'substringBefore($0)',
        '[M]String.substringBeforeLast(String separator)\tString' : 'substringBeforeLast($0)',
        '[M]String.substringBetween(String open, String close)\tString' : 'substringBetween($0)',
        '[M]String.substringBetween(String tag)\tString' : 'substringBetween($0)',
        '[M]String.swapCase()\tString' : 'swapCase()$0',
        '[M]String.toLowerCase()\tString' : 'toLowerCase()$0',
        '[M]String.toLowerCase(String locale)\tString' : 'toLowerCase($0)',
        '[M]String.toUpperCase()\tString' : 'toUpperCase()$0',
        '[M]String.toUpperCase(String locale)\tString' : 'toUpperCase($0)',
        '[M]String.trim()\tString' : 'trim()$0',
        '[M]String.uncapitalize()\tString' : 'uncapitalize()$0',
        '[M]String.unescapeCsv()\tString' : 'unescapeCsv()$0',
        '[M]String.unescapeEcmaScript()\tString' : 'unescapeEcmaScript()$0',
        '[M]String.unescapeHtml3()\tString' : 'unescapeHtml3()$0',
        '[M]String.unescapeHtml4()\tString' : 'unescapeHtml4()$0',
        '[M]String.unescapeXml()\tString' : 'unescapeXml()$0',
        '[M]String.valueOf(Date d)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Datetime dt)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Decimal d)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Double d)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Integer i)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Long l)\tString' : 'valueOf($0)',
        '[M]String.valueOf(Object o)\tString' : 'valueOf($0)',
        '[M]String.valueOfGmt(Datetime dt)\tString' : 'valueOfGmt($0)'
    },
    'StringException' : {
        '[M]StringException.getCause()\tException' : 'getCause()$0',
        '[M]StringException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]StringException.getMessage()\tString' : 'getMessage()$0',
        '[M]StringException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]StringException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]StringException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]StringException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Subscription' : {
        '[M]Subscription.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]Subscription.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]Subscription.hashCode()\tInteger' : 'hashCode()$0',
        '[M]Subscription.toString()\tString' : 'toString()$0',
        '[P]Subscription.community' : 'community$0',
        '[P]Subscription.id' : 'id$0',
        '[P]Subscription.subject' : 'subject$0',
        '[P]Subscription.subscriber' : 'subscriber$0',
        '[P]Subscription.url' : 'url$0'
    },
    'System' : {
        '[M]System.abortJob(String jobId)\tvoid' : 'abortJob($0)',
        '[M]System.assert(Boolean condition)\tvoid' : 'assert($0)',
        '[M]System.assert(Boolean condition, ANY msg)\tvoid' : 'assert($0)',
        '[M]System.assertEquals(ANY expected, ANY actual)\tvoid' : 'assertEquals($0)',
        '[M]System.assertEquals(ANY expected, ANY actual, ANY msg)\tvoid' : 'assertEquals($0)',
        '[M]System.assertNotEquals(ANY expected, ANY actual)\tvoid' : 'assertNotEquals($0)',
        '[M]System.assertNotEquals(ANY expected, ANY actual, ANY msg)\tvoid' : 'assertNotEquals($0)',
        '[M]System.currentPageReference()\tSystem.PageReference' : 'currentPageReference()$0',
        '[M]System.currentTimeMillis()\tLong' : 'currentTimeMillis()$0',
        '[M]System.debug(ANY o)\tvoid' : 'debug($0)',
        '[M]System.debug(APEX_OBJECT logLevel, ANY o)\tvoid' : 'debug($0)',
        '[M]System.getApplicationReadWriteMode()\tsystem.ApplicationReadWriteMode' : 'getApplicationReadWriteMode()$0',
        '[M]System.isBatch()\tBoolean' : 'isBatch()$0',
        '[M]System.isFuture()\tBoolean' : 'isFuture()$0',
        '[M]System.isScheduled()\tBoolean' : 'isScheduled()$0',
        '[M]System.now()\tDatetime' : 'now()$0',
        '[M]System.process(List workitemIds, String action, String commments, String nextApprover)\tList<Id>' : 'process($0)',
        '[M]System.purgeOldAsyncJobs(Date date)\tInteger' : 'purgeOldAsyncJobs($0)',
        '[M]System.requestVersion()\tsystem.Version' : 'requestVersion()$0',
        '[M]System.resetPassword(Id userId, Boolean sendUserEmail)\tSystem.ResetPasswordResult' : 'resetPassword($0)',
        '[M]System.runAs(Package.Version version)\tvoid' : 'runAs($0)',
        '[M]System.runAs(SObject user, ANY block)\tvoid' : 'runAs($0)',
        '[M]System.schedule(String jobName, String cronExp, APEX_OBJECT schedulable)\tString' : 'schedule($0)',
        '[M]System.scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow)\tString' : 'scheduleBatch($0)',
        '[M]System.scheduleBatch(APEX_OBJECT batchable, String jobName, Integer minutesFromNow, Integer scopeSize)\tString' : 'scheduleBatch($0)',
        '[M]System.setPassword(Id userId, String password)\tvoid' : 'setPassword($0)',
        '[M]System.submit(List ids, String commments, String nextApprover)\tList<Id>' : 'submit($0)',
        '[M]System.today()\tDate' : 'today()$0'
    },
    'Test' : {
        '[M]Test.invokePage(System.PageReference p)\tComponent.apex.page' : 'invokePage($0)',
        '[M]Test.isRunningTest()\tBoolean' : 'isRunningTest()$0',
        '[M]Test.loadData(Schema.SObjectType sobjectType, String staticResourceName)\tList<SObject>' : 'loadData($0)',
        '[M]Test.setCurrentPage(Object pageReference)\tvoid' : 'setCurrentPage($0)',
        '[M]Test.setCurrentPageReference(Object pageReference)\tvoid' : 'setCurrentPageReference($0)',
        '[M]Test.setFixedSearchResults(List<String> searchResultsIds)\tvoid' : 'setFixedSearchResults($0)',
        '[M]Test.setMock(system.Type interfaceType, Object mock)\tvoid' : 'setMock($0)',
        '[M]Test.setReadOnlyApplicationMode(Boolean readOnlyApplicationMode)\tvoid' : 'setReadOnlyApplicationMode($0)',
        '[M]Test.startTest()\tvoid' : 'startTest()$0',
        '[M]Test.stopTest()\tvoid' : 'stopTest()$0',
        '[M]Test.testInstall(system.InstallHandler script, system.Version version)\tvoid' : 'testInstall($0)',
        '[M]Test.testInstall(system.InstallHandler script, system.Version version, Boolean isPush)\tvoid' : 'testInstall($0)',
        '[M]Test.testUninstall(system.UninstallHandler script)\tvoid' : 'testUninstall($0)'
    },
    'TextAttachment' : {
        '[P]TextAttachment.body' : 'body$0',
        '[P]TextAttachment.bodyIsTruncated' : 'bodyIsTruncated$0',
        '[P]TextAttachment.charset' : 'charset$0',
        '[P]TextAttachment.fileName' : 'fileName$0',
        '[P]TextAttachment.mimeTypeSubType' : 'mimeTypeSubType$0'
    },
    'TextSegment' : {
        '[M]TextSegment.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]TextSegment.hashCode()\tInteger' : 'hashCode()$0',
        '[M]TextSegment.toString()\tString' : 'toString()$0'
    },
    'TextSegmentInput' : {
        '[M]TextSegmentInput.convertToJavaObject(java:common.api.AppVersion currentVersion)\tjava:java.lang.Object' : 'convertToJavaObject($0)',
        '[M]TextSegmentInput.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]TextSegmentInput.hashCode()\tInteger' : 'hashCode()$0',
        '[M]TextSegmentInput.toString()\tString' : 'toString()$0',
        '[P]TextSegmentInput.text' : 'text$0'
    },
    'Time' : {
        '[M]Time.addError(APEX_OBJECT msg)\tvoid' : 'addError($0)',
        '[M]Time.addError(APEX_OBJECT msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Time.addError(String msg)\tvoid' : 'addError($0)',
        '[M]Time.addError(String msg, Boolean escape)\tvoid' : 'addError($0)',
        '[M]Time.addHours(Integer hours)\tTime' : 'addHours($0)',
        '[M]Time.addMilliseconds(Integer milliseconds)\tTime' : 'addMilliseconds($0)',
        '[M]Time.addMinutes(Integer minutes)\tTime' : 'addMinutes($0)',
        '[M]Time.addSeconds(Integer seconds)\tTime' : 'addSeconds($0)',
        '[M]Time.hour()\tInteger' : 'hour()$0',
        '[M]Time.millisecond()\tInteger' : 'millisecond()$0',
        '[M]Time.minute()\tInteger' : 'minute()$0',
        '[M]Time.newInstance(Integer hour, Integer minute, Integer second, Integer millisecond)\tTime' : 'newInstance($0)',
        '[M]Time.second()\tInteger' : 'second()$0'
    },
    'TimeZone' : {
        '[M]TimeZone.getDisplayName()\tString' : 'getDisplayName()$0',
        '[M]TimeZone.getID()\tString' : 'getID()$0',
        '[M]TimeZone.getOffset(Datetime dt)\tInteger' : 'getOffset($0)',
        '[M]TimeZone.getTimeZone(String id)\tsystem.TimeZone' : 'getTimeZone($0)',
        '[M]TimeZone.toString()\tString' : 'toString()$0'
    },
    'TouchHandledException' : {
        '[M]TouchHandledException.getCause()\tException' : 'getCause()$0',
        '[M]TouchHandledException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]TouchHandledException.getMessage()\tString' : 'getMessage()$0',
        '[M]TouchHandledException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]TouchHandledException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]TouchHandledException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]TouchHandledException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'Type' : {
        '[M]Type.equals(Object o)\tBoolean' : 'equals($0)',
        '[M]Type.forName(String clsName)\tsystem.Type' : 'forName($0)',
        '[M]Type.forName(String namespace, String clsName)\tsystem.Type' : 'forName($0)',
        '[M]Type.getName()\tString' : 'getName()$0',
        '[M]Type.hashcode()\tInteger' : 'hashcode()$0',
        '[M]Type.newInstance()\tObject' : 'newInstance()$0',
        '[M]Type.toString()\tString' : 'toString()$0'
    },
    'TypeException' : {
        '[M]TypeException.getCause()\tException' : 'getCause()$0',
        '[M]TypeException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]TypeException.getMessage()\tString' : 'getMessage()$0',
        '[M]TypeException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]TypeException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]TypeException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]TypeException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'UnauthenticatedUser' : {
        '[M]UnauthenticatedUser.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UnauthenticatedUser.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UnauthenticatedUser.toString()\tString' : 'toString()$0'
    },
    'UnexpectedException' : {
        '[M]UnexpectedException.getCause()\tException' : 'getCause()$0',
        '[M]UnexpectedException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]UnexpectedException.getMessage()\tString' : 'getMessage()$0',
        '[M]UnexpectedException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]UnexpectedException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]UnexpectedException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]UnexpectedException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'UnsupportedOperationException' : {
        '[M]UnsupportedOperationException.getTypeName()\tString' : 'getTypeName()$0'
    },
    'Url' : {
        '[M]Url.getAuthority()\tString' : 'getAuthority()$0',
        '[M]Url.getCurrentRequestUrl()\tsystem.Url' : 'getCurrentRequestUrl()$0',
        '[M]Url.getDefaultPort()\tInteger' : 'getDefaultPort()$0',
        '[M]Url.getFile()\tString' : 'getFile()$0',
        '[M]Url.getFileFieldURL(String objectId, String fieldName)\tString' : 'getFileFieldURL($0)',
        '[M]Url.getHost()\tString' : 'getHost()$0',
        '[M]Url.getPath()\tString' : 'getPath()$0',
        '[M]Url.getPort()\tInteger' : 'getPort()$0',
        '[M]Url.getProtocol()\tString' : 'getProtocol()$0',
        '[M]Url.getQuery()\tString' : 'getQuery()$0',
        '[M]Url.getRef()\tString' : 'getRef()$0',
        '[M]Url.getSalesforceBaseUrl()\tsystem.Url' : 'getSalesforceBaseUrl()$0',
        '[M]Url.getUserInfo()\tString' : 'getUserInfo()$0',
        '[M]Url.sameFile(system.Url other)\tBoolean' : 'sameFile($0)',
        '[M]Url.toExternalForm()\tString' : 'toExternalForm()$0'
    },
    'UrlRewriter' : {
        '[M]UrlRewriter.generateUrlFor(List<System.PageReference> param1)\tList<System.PageReference>' : 'generateUrlFor($0)',
        '[M]UrlRewriter.mapRequestUrl(System.PageReference param1)\tSystem.PageReference' : 'mapRequestUrl($0)'
    },
    'User' : {
        '[M]User.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]User.hashCode()\tInteger' : 'hashCode()$0',
        '[M]User.toString()\tString' : 'toString()$0',
        '[P]User.companyName' : 'companyName$0',
        '[P]User.firstName' : 'firstName$0',
        '[P]User.isInThisCommunity' : 'isInThisCommunity$0',
        '[P]User.lastName' : 'lastName$0',
        '[P]User.photo' : 'photo$0',
        '[P]User.title' : 'title$0',
        '[P]User.userType' : 'userType$0'
    },
    'UserChatterSettings' : {
        '[M]UserChatterSettings.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserChatterSettings.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]UserChatterSettings.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserChatterSettings.toString()\tString' : 'toString()$0',
        '[P]UserChatterSettings.defaultGroupEmailFrequency' : 'defaultGroupEmailFrequency$0'
    },
    'UserDetail' : {
        '[M]UserDetail.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserDetail.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserDetail.toString()\tString' : 'toString()$0',
        '[P]UserDetail.aboutMe' : 'aboutMe$0',
        '[P]UserDetail.address' : 'address$0',
        '[P]UserDetail.chatterActivity' : 'chatterActivity$0',
        '[P]UserDetail.chatterInfluence' : 'chatterInfluence$0',
        '[P]UserDetail.email' : 'email$0',
        '[P]UserDetail.followersCount' : 'followersCount$0',
        '[P]UserDetail.followingCounts' : 'followingCounts$0',
        '[P]UserDetail.groupCount' : 'groupCount$0',
        '[P]UserDetail.isActive' : 'isActive$0',
        '[P]UserDetail.managerId' : 'managerId$0',
        '[P]UserDetail.managerName' : 'managerName$0',
        '[P]UserDetail.phoneNumbers' : 'phoneNumbers$0',
        '[P]UserDetail.username' : 'username$0'
    },
    'UserGroupPage' : {
        '[M]UserGroupPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserGroupPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]UserGroupPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserGroupPage.toString()\tString' : 'toString()$0',
        '[P]UserGroupPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]UserGroupPage.groups' : 'groups$0',
        '[P]UserGroupPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]UserGroupPage.previousPageUrl' : 'previousPageUrl$0',
        '[P]UserGroupPage.total' : 'total$0'
    },
    'UserInfo' : {
        '[M]UserInfo.getDefaultCurrency()\tString' : 'getDefaultCurrency()$0',
        '[M]UserInfo.getFirstName()\tString' : 'getFirstName()$0',
        '[M]UserInfo.getLanguage()\tString' : 'getLanguage()$0',
        '[M]UserInfo.getLastName()\tString' : 'getLastName()$0',
        '[M]UserInfo.getLocale()\tString' : 'getLocale()$0',
        '[M]UserInfo.getName()\tString' : 'getName()$0',
        '[M]UserInfo.getOrganizationId()\tString' : 'getOrganizationId()$0',
        '[M]UserInfo.getOrganizationName()\tString' : 'getOrganizationName()$0',
        '[M]UserInfo.getProfileId()\tString' : 'getProfileId()$0',
        '[M]UserInfo.getSessionId()\tString' : 'getSessionId()$0',
        '[M]UserInfo.getTimeZone()\tsystem.TimeZone' : 'getTimeZone()$0',
        '[M]UserInfo.getUiTheme()\tString' : 'getUiTheme()$0',
        '[M]UserInfo.getUiThemeDisplayed()\tString' : 'getUiThemeDisplayed()$0',
        '[M]UserInfo.getUserEmail()\tString' : 'getUserEmail()$0',
        '[M]UserInfo.getUserId()\tString' : 'getUserId()$0',
        '[M]UserInfo.getUserName()\tString' : 'getUserName()$0',
        '[M]UserInfo.getUserRoleId()\tString' : 'getUserRoleId()$0',
        '[M]UserInfo.getUserType()\tString' : 'getUserType()$0',
        '[M]UserInfo.isCurrentUserLicensed(String namespacePrefix)\tBoolean' : 'isCurrentUserLicensed($0)',
        '[M]UserInfo.isMultiCurrencyOrganization()\tBoolean' : 'isMultiCurrencyOrganization()$0'
    },
    'UserPage' : {
        '[M]UserPage.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserPage.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]UserPage.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserPage.toString()\tString' : 'toString()$0',
        '[P]UserPage.currentPageToken' : 'currentPageToken$0',
        '[P]UserPage.currentPageUrl' : 'currentPageUrl$0',
        '[P]UserPage.nextPageToken' : 'nextPageToken$0',
        '[P]UserPage.nextPageUrl' : 'nextPageUrl$0',
        '[P]UserPage.previousPageToken' : 'previousPageToken$0',
        '[P]UserPage.previousPageUrl' : 'previousPageUrl$0',
        '[P]UserPage.users' : 'users$0'
    },
    'UserSettings' : {
        '[M]UserSettings.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserSettings.getBuildVersion()\tDouble' : 'getBuildVersion()$0',
        '[M]UserSettings.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserSettings.toString()\tString' : 'toString()$0',
        '[P]UserSettings.approvalPosts' : 'approvalPosts$0',
        '[P]UserSettings.canFollow' : 'canFollow$0',
        '[P]UserSettings.canModifyAllData' : 'canModifyAllData$0',
        '[P]UserSettings.canOwnGroups' : 'canOwnGroups$0',
        '[P]UserSettings.canViewAllData' : 'canViewAllData$0',
        '[P]UserSettings.canViewAllGroups' : 'canViewAllGroups$0',
        '[P]UserSettings.canViewAllUsers' : 'canViewAllUsers$0',
        '[P]UserSettings.canViewFullUserProfile' : 'canViewFullUserProfile$0',
        '[P]UserSettings.canViewPublicFiles' : 'canViewPublicFiles$0',
        '[P]UserSettings.currencySymbol' : 'currencySymbol$0',
        '[P]UserSettings.externalUser' : 'externalUser$0',
        '[P]UserSettings.hasAccessToInternalOrg' : 'hasAccessToInternalOrg$0',
        '[P]UserSettings.hasFileSync' : 'hasFileSync$0',
        '[P]UserSettings.userDefaultCurrencyIsoCode' : 'userDefaultCurrencyIsoCode$0',
        '[P]UserSettings.userId' : 'userId$0',
        '[P]UserSettings.userLocale' : 'userLocale$0'
    },
    'UserSummary' : {
        '[M]UserSummary.equals(Object obj)\tBoolean' : 'equals($0)',
        '[M]UserSummary.hashCode()\tInteger' : 'hashCode()$0',
        '[M]UserSummary.toString()\tString' : 'toString()$0',
        '[P]UserSummary.isActive' : 'isActive$0'
    },
    'UserType' : {
        '[M]UserType.values()\tList<ConnectApi.UserType>' : 'values()$0',
        '[P]UserType.ChatterGuest' : 'ChatterGuest$0',
        '[P]UserType.ChatterOnly' : 'ChatterOnly$0',
        '[P]UserType.Guest' : 'Guest$0',
        '[P]UserType.Internal' : 'Internal$0',
        '[P]UserType.Portal' : 'Portal$0',
        '[P]UserType.System' : 'System$0',
        '[P]UserType.Undefined' : 'Undefined$0'
    },
    'Version' : {
        '[M]Version.compareTo(system.Version other)\tInteger' : 'compareTo($0)',
        '[M]Version.major()\tInteger' : 'major()$0',
        '[M]Version.minor()\tInteger' : 'minor()$0',
        '[M]Version.patch()\tInteger' : 'patch()$0'
    },
    'VisualforceException' : {
        '[M]VisualforceException.getCause()\tException' : 'getCause()$0',
        '[M]VisualforceException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]VisualforceException.getMessage()\tString' : 'getMessage()$0',
        '[M]VisualforceException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]VisualforceException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]VisualforceException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]VisualforceException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'WebServiceMock' : {
        '[M]WebServiceMock.doInvoke(Object param1, Object param2, MAP<String,ANY> param3, String param4, String param5, String param6, String param7, String param8, String param9)\tvoid' : 'doInvoke($0)'
    },
    'WorkflowProcessStatus' : {
        '[M]WorkflowProcessStatus.values()\tList<ConnectApi.WorkflowProcessStatus>' : 'values()$0',
        '[P]WorkflowProcessStatus.Approved' : 'Approved$0',
        '[P]WorkflowProcessStatus.Fault' : 'Fault$0',
        '[P]WorkflowProcessStatus.Held' : 'Held$0',
        '[P]WorkflowProcessStatus.NoResponse' : 'NoResponse$0',
        '[P]WorkflowProcessStatus.Pending' : 'Pending$0',
        '[P]WorkflowProcessStatus.Reassigned' : 'Reassigned$0',
        '[P]WorkflowProcessStatus.Rejected' : 'Rejected$0',
        '[P]WorkflowProcessStatus.Removed' : 'Removed$0',
        '[P]WorkflowProcessStatus.Started' : 'Started$0'
    },
    'XmlException' : {
        '[M]XmlException.getCause()\tException' : 'getCause()$0',
        '[M]XmlException.getLineNumber()\tInteger' : 'getLineNumber()$0',
        '[M]XmlException.getMessage()\tString' : 'getMessage()$0',
        '[M]XmlException.getStackTraceString()\tString' : 'getStackTraceString()$0',
        '[M]XmlException.getTypeName()\tString' : 'getTypeName()$0',
        '[M]XmlException.initCause(APEX_OBJECT cause)\tvoid' : 'initCause($0)',
        '[M]XmlException.setMessage(String message)\tvoid' : 'setMessage($0)'
    },
    'XmlNode' : {
        '[M]XmlNode.addChildElement(String name, String namespace, String prefix)\tdom.XmlNode' : 'addChildElement($0)',
        '[M]XmlNode.addCommentNode(String text)\tdom.XmlNode' : 'addCommentNode($0)',
        '[M]XmlNode.addTextNode(String text)\tdom.XmlNode' : 'addTextNode($0)',
        '[M]XmlNode.getAttribute(String key, String keyNamespace)\tString' : 'getAttribute($0)',
        '[M]XmlNode.getAttributeCount()\tInteger' : 'getAttributeCount()$0',
        '[M]XmlNode.getAttributeKeyAt(Integer index)\tString' : 'getAttributeKeyAt($0)',
        '[M]XmlNode.getAttributeKeyNsAt(Integer index)\tString' : 'getAttributeKeyNsAt($0)',
        '[M]XmlNode.getAttributeValue(String key, String keyNamespace)\tString' : 'getAttributeValue($0)',
        '[M]XmlNode.getAttributeValueNs(String key, String keyNamespace)\tString' : 'getAttributeValueNs($0)',
        '[M]XmlNode.getChildElement(String name, String namespace)\tdom.XmlNode' : 'getChildElement($0)',
        '[M]XmlNode.getChildElements()\tList<dom.XmlNode>' : 'getChildElements()$0',
        '[M]XmlNode.getChildren()\tList<dom.XmlNode>' : 'getChildren()$0',
        '[M]XmlNode.getName()\tString' : 'getName()$0',
        '[M]XmlNode.getNamespace()\tString' : 'getNamespace()$0',
        '[M]XmlNode.getNamespaceFor(String prefix)\tString' : 'getNamespaceFor($0)',
        '[M]XmlNode.getNodeType()\tDom.XmlNodeType' : 'getNodeType()$0',
        '[M]XmlNode.getParent()\tdom.XmlNode' : 'getParent()$0',
        '[M]XmlNode.getPrefixFor(String namespace)\tString' : 'getPrefixFor($0)',
        '[M]XmlNode.getText()\tString' : 'getText()$0',
        '[M]XmlNode.removeAttribute(String key, String keyNamespace)\tBoolean' : 'removeAttribute($0)',
        '[M]XmlNode.removeChild(ANY child)\tBoolean' : 'removeChild($0)',
        '[M]XmlNode.setAttribute(String key, String value)\tvoid' : 'setAttribute($0)',
        '[M]XmlNode.setAttributeNs(String key, String value, String keyNamespace, String valueNamespace)\tvoid' : 'setAttributeNs($0)',
        '[M]XmlNode.setNamespace(String prefix, String namespace)\tvoid' : 'setNamespace($0)'
    },
    'XmlNodeType' : {
        '[M]XmlNodeType.values()\tList<Dom.XmlNodeType>' : 'values()$0',
        '[P]XmlNodeType.COMMENT' : 'COMMENT$0',
        '[P]XmlNodeType.ELEMENT' : 'ELEMENT$0',
        '[P]XmlNodeType.TEXT' : 'TEXT$0'
    },
    'XmlStreamReader' : {
        '[M]XmlStreamReader.getAttributeCount()\tInteger' : 'getAttributeCount()$0',
        '[M]XmlStreamReader.getAttributeLocalName(Integer index)\tString' : 'getAttributeLocalName($0)',
        '[M]XmlStreamReader.getAttributeNamespace(Integer index)\tString' : 'getAttributeNamespace($0)',
        '[M]XmlStreamReader.getAttributePrefix(Integer index)\tString' : 'getAttributePrefix($0)',
        '[M]XmlStreamReader.getAttributeType(Integer index)\tString' : 'getAttributeType($0)',
        '[M]XmlStreamReader.getAttributeValue(String namespaceURI, String localName)\tString' : 'getAttributeValue($0)',
        '[M]XmlStreamReader.getAttributeValueAt(Integer index)\tString' : 'getAttributeValueAt($0)',
        '[M]XmlStreamReader.getEventType()\tsystem.XmlTag' : 'getEventType()$0',
        '[M]XmlStreamReader.getLocalName()\tString' : 'getLocalName()$0',
        '[M]XmlStreamReader.getLocation()\tString' : 'getLocation()$0',
        '[M]XmlStreamReader.getNamespace()\tString' : 'getNamespace()$0',
        '[M]XmlStreamReader.getNamespaceCount()\tInteger' : 'getNamespaceCount()$0',
        '[M]XmlStreamReader.getNamespacePrefix(Integer index)\tString' : 'getNamespacePrefix($0)',
        '[M]XmlStreamReader.getNamespaceURI(String prefix)\tString' : 'getNamespaceURI($0)',
        '[M]XmlStreamReader.getNamespaceURIAt(Integer index)\tString' : 'getNamespaceURIAt($0)',
        '[M]XmlStreamReader.getPIData()\tString' : 'getPIData()$0',
        '[M]XmlStreamReader.getPITarget()\tString' : 'getPITarget()$0',
        '[M]XmlStreamReader.getPrefix()\tString' : 'getPrefix()$0',
        '[M]XmlStreamReader.getText()\tString' : 'getText()$0',
        '[M]XmlStreamReader.getVersion()\tString' : 'getVersion()$0',
        '[M]XmlStreamReader.hasName()\tBoolean' : 'hasName()$0',
        '[M]XmlStreamReader.hasNext()\tBoolean' : 'hasNext()$0',
        '[M]XmlStreamReader.hasText()\tBoolean' : 'hasText()$0',
        '[M]XmlStreamReader.isCharacters()\tBoolean' : 'isCharacters()$0',
        '[M]XmlStreamReader.isEndElement()\tBoolean' : 'isEndElement()$0',
        '[M]XmlStreamReader.isStartElement()\tBoolean' : 'isStartElement()$0',
        '[M]XmlStreamReader.isWhitespace()\tBoolean' : 'isWhitespace()$0',
        '[M]XmlStreamReader.next()\tInteger' : 'next()$0',
        '[M]XmlStreamReader.nextTag()\tInteger' : 'nextTag()$0',
        '[M]XmlStreamReader.setCoalescing(Boolean flag)\tvoid' : 'setCoalescing($0)',
        '[M]XmlStreamReader.setNamespaceAware(Boolean flag)\tvoid' : 'setNamespaceAware($0)',
        '[M]XmlStreamReader.toString()\tString' : 'toString()$0'
    },
    'XmlStreamWriter' : {
        '[M]XmlStreamWriter.close()\tvoid' : 'close()$0',
        '[M]XmlStreamWriter.getXmlString()\tString' : 'getXmlString()$0',
        '[M]XmlStreamWriter.setDefaultNamespace(String uri)\tvoid' : 'setDefaultNamespace($0)',
        '[M]XmlStreamWriter.writeAttribute(String prefix, String namespaceURI, String localName, String value)\tvoid' : 'writeAttribute($0)',
        '[M]XmlStreamWriter.writeCData(String data)\tvoid' : 'writeCData($0)',
        '[M]XmlStreamWriter.writeCharacters(String text)\tvoid' : 'writeCharacters($0)',
        '[M]XmlStreamWriter.writeComment(String data)\tvoid' : 'writeComment($0)',
        '[M]XmlStreamWriter.writeDefaultNamespace(String namesapceURI)\tvoid' : 'writeDefaultNamespace($0)',
        '[M]XmlStreamWriter.writeEmptyElement(String prefix, String localName, String namesapceURI)\tvoid' : 'writeEmptyElement($0)',
        '[M]XmlStreamWriter.writeEndDocument()\tvoid' : 'writeEndDocument()$0',
        '[M]XmlStreamWriter.writeEndElement()\tvoid' : 'writeEndElement()$0',
        '[M]XmlStreamWriter.writeNamespace(String prefix, String namesapceURI)\tvoid' : 'writeNamespace($0)',
        '[M]XmlStreamWriter.writeProcessingInstruction(String target, String data)\tvoid' : 'writeProcessingInstruction($0)',
        '[M]XmlStreamWriter.writeStartDocument(String encoding, String version)\tvoid' : 'writeStartDocument($0)',
        '[M]XmlStreamWriter.writeStartElement(String prefix, String localName, String namesapceURI)\tvoid' : 'writeStartElement($0)'
    },
    'XmlTag' : {
        '[M]XmlTag.values()\tList<system.XmlTag>' : 'values()$0',
        '[P]XmlTag.ATTRIBUTE' : 'ATTRIBUTE$0',
        '[P]XmlTag.CDATA' : 'CDATA$0',
        '[P]XmlTag.CHARACTERS' : 'CHARACTERS$0',
        '[P]XmlTag.COMMENT' : 'COMMENT$0',
        '[P]XmlTag.DTD' : 'DTD$0',
        '[P]XmlTag.END_DOCUMENT' : 'END_DOCUMENT$0',
        '[P]XmlTag.END_ELEMENT' : 'END_ELEMENT$0',
        '[P]XmlTag.ENTITY_DECLARATION' : 'ENTITY_DECLARATION$0',
        '[P]XmlTag.ENTITY_REFERENCE' : 'ENTITY_REFERENCE$0',
        '[P]XmlTag.NAMESPACE' : 'NAMESPACE$0',
        '[P]XmlTag.NOTATION_DECLARATION' : 'NOTATION_DECLARATION$0',
        '[P]XmlTag.PROCESSING_INSTRUCTION' : 'PROCESSING_INSTRUCTION$0',
        '[P]XmlTag.SPACE' : 'SPACE$0',
        '[P]XmlTag.START_DOCUMENT' : 'START_DOCUMENT$0',
        '[P]XmlTag.START_ELEMENT' : 'START_ELEMENT$0'
    }
}